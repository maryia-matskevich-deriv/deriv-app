{"version":3,"sources":["webpack://Onfido/../node_modules/libphonenumber-js/es6/tools/semver-compare.js","webpack://Onfido/../node_modules/libphonenumber-js/es6/metadata.js","webpack://Onfido/../node_modules/libphonenumber-js/es6/constants.js","webpack://Onfido/../node_modules/libphonenumber-js/core/index.js","webpack://Onfido/../node_modules/input-format/modules/input control.js","webpack://Onfido/../node_modules/libphonenumber-js/es6/parsePhoneNumber.js","webpack://Onfido/../node_modules/libphonenumber-js/es6/getNumberType_.js","webpack://Onfido/../node_modules/libphonenumber-js/es6/util.js","webpack://Onfido/../node_modules/libphonenumber-js/es6/RFC3966.js","webpack://Onfido/../node_modules/libphonenumber-js/es6/parseDigits.js","webpack://Onfido/../node_modules/libphonenumber-js/es6/ParseError.js","webpack://Onfido/../node_modules/libphonenumber-js/es6/PhoneNumber.js","webpack://Onfido/../node_modules/libphonenumber-js/es6/parseIncompletePhoneNumber.js","webpack://Onfido/../node_modules/input-format/modules/parse.js","webpack://Onfido/../node_modules/libphonenumber-js/es6/findNumbers/LRUCache.js","webpack://Onfido/../node_modules/libphonenumber-js/es6/findNumbers/RegExpCache.js","webpack://Onfido/../node_modules/libphonenumber-js/es6/findNumbers/util.js","webpack://Onfido/../node_modules/libphonenumber-js/es6/findNumbers/utf-8.js","webpack://Onfido/../node_modules/libphonenumber-js/es6/findNumbers/Leniency.js","webpack://Onfido/../node_modules/libphonenumber-js/es6/findNumbers/parsePreCandidate.js","webpack://Onfido/../node_modules/libphonenumber-js/es6/findNumbers/isValidPreCandidate.js","webpack://Onfido/../node_modules/libphonenumber-js/es6/findNumbers/isValidCandidate.js","webpack://Onfido/../node_modules/libphonenumber-js/es6/PhoneNumberMatcher.js","webpack://Onfido/../node_modules/libphonenumber-js/es6/parse_.js","webpack://Onfido/../node_modules/libphonenumber-js/es6/extension.js","webpack://Onfido/../node_modules/libphonenumber-js/es6/IDD.js","webpack://Onfido/../node_modules/libphonenumber-js/es6/searchNumbers.js","webpack://Onfido/../node_modules/libphonenumber-js/es6/findPhoneNumbersInText.js","webpack://Onfido/../node_modules/libphonenumber-js/es6/AsYouType.js","webpack://Onfido/../node_modules/input-format/modules/helpers.js","webpack://Onfido/../node_modules/input-format/modules/template formatter.js","webpack://Onfido/../node_modules/input-format/modules/format.js","webpack://Onfido/../node_modules/libphonenumber-js/es6/findNumbers_.js","webpack://Onfido/../node_modules/libphonenumber-js/es6/findNumbers.js","webpack://Onfido/../node_modules/libphonenumber-js/es6/parsePhoneNumber_.js","webpack://Onfido/../node_modules/libphonenumber-js/es6/isPossibleNumber_.js","webpack://Onfido/../node_modules/libphonenumber-js/es6/validate_.js","webpack://Onfido/../node_modules/libphonenumber-js/es6/format_.js","webpack://Onfido/../node_modules/libphonenumber-js/es6/isViablePhoneNumber.js","webpack://Onfido/../node_modules/libphonenumber-js/es6/searchPhoneNumbersInText.js","webpack://Onfido/../node_modules/libphonenumber-js/es6/getCountries.js","webpack://Onfido/../node_modules/libphonenumber-js/es6/getExampleNumber.js","webpack://Onfido/../node_modules/libphonenumber-js/es6/formatIncompletePhoneNumber.js","webpack://Onfido/../node_modules/react-phone-number-input/commonjs/PropTypes.js","webpack://Onfido/../node_modules/input-format/modules/template parser.js","webpack://Onfido/../node_modules/input-format/modules/ReactInput.js","webpack://Onfido/../node_modules/input-format/modules/parse digit.js","webpack://Onfido/../node_modules/react-phone-number-input/commonjs/countries.js","webpack://Onfido/../node_modules/libphonenumber-js/es6/parsePhoneNumberFromString_.js","webpack://Onfido/../node_modules/libphonenumber-js/es6/parsePhoneNumberFromString.js","webpack://Onfido/../node_modules/react-phone-number-input/native.js","webpack://Onfido/../node_modules/react-phone-number-input/commonjs/PhoneInputNativeDefaultMetadata.js","webpack://Onfido/../node_modules/react-phone-number-input/commonjs/PhoneInputNativeDefaults.js","webpack://Onfido/../node_modules/react-phone-number-input/commonjs/InternationalIcon.js","webpack://Onfido/../node_modules/react-phone-number-input/commonjs/PhoneInputNative.js","webpack://Onfido/../node_modules/react-phone-number-input/commonjs/PhoneInput.js","webpack://Onfido/../node_modules/react-phone-number-input/commonjs/InputSmart.js","webpack://Onfido/../node_modules/input-format/index.js","webpack://Onfido/../node_modules/input-format/modules/close braces.js","webpack://Onfido/../node_modules/input-format/modules/edit.js","webpack://Onfido/../node_modules/input-format/modules/dom.js","webpack://Onfido/../node_modules/react-phone-number-input/commonjs/InputBasic.js","webpack://Onfido/../node_modules/react-phone-number-input/commonjs/Flag.js","webpack://Onfido/../node_modules/react-phone-number-input/commonjs/input-control.js","webpack://Onfido/../node_modules/react-phone-number-input/commonjs/CountrySelectNative.js","webpack://Onfido/../node_modules/libphonenumber-js/metadata.mobile.json.js","webpack://Onfido/../node_modules/libphonenumber-js/mobile/index.js"],"names":["a","split","b","pa","pb","i","na","Number","nb","isNaN","_typeof","obj","Symbol","iterator","constructor","prototype","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","Metadata","metadata","this","Error","is_object","countries","concat","keys","join","type_of","validateMetadata","setVersion","call","value","filter","_","countryCode","v1","v2","v3","nonGeographic","nonGeographical","country","undefined","getCountryMetadata","callingCode","getCountryCodesForCallingCode","countryCodes","countryCallingCodes","selectNumberingPlan","hasCountry","numberingPlan","NumberingPlan","hasCallingCode","getNumberingPlanMetadata","getCountryCodeForCallingCode","IDDPrefix","defaultIDDPrefix","nationalNumberPattern","possibleLengths","formats","nationalPrefixForParsing","nationalPrefixTransformRule","leadingDigits","hasTypes","_type","type","ext","country_phone_code_to_countries","country_calling_codes","globalMetadataObject","_this","_getFormats","getDefaultCountryMetadataForRegion","map","Format","_getNationalPrefixFormattingRule","_nationalPrefixForParsing","nationalPrefix","_getNationalPrefixIsOptionalWhenFormatting","types","_type2","getType","Type","format","_format","nationalPrefixFormattingRule","nationalPrefixIsOptionalWhenFormattingInNationalFormat","usesNationalPrefix","FIRST_GROUP_ONLY_PREFIX_PATTERN","test","getExtPrefix","getCountryCallingCode","countryCallingCode","isSupportedCountry","version","v4","MIN_LENGTH_FOR_NSN","MAX_LENGTH_FOR_NSN","MAX_LENGTH_COUNTRY_CODE","VALID_DIGITS","VALID_PUNCTUATION","PLUS_CHARS","exports","onCut","event","input","_parse","on_change","setTimeout","format_input_text","onPaste","selection","_dom","getSelection","erase_selection","onChange","onKeyDown","operation","getOperation","preventDefault","_edit2","_interopRequireDefault","_parse4","_format3","__esModule","default","text","slice","start","end","setCaretPosition","_parse2","getCaretPosition","caret","operation_applied","formatted","_defineProperty","_slicedToArray","arr","Array","isArray","_arrayWithHoles","_arr","_n","_d","_e","_s","_i","next","done","push","err","_iterableToArrayLimit","_nonIterableRest","parsePhoneNumber","_normalizeArguments","normalizeArguments","arguments","options","args","_Array$prototype$slic2","arg_1","arg_2","arg_3","arg_4","isObject","source","ownKeys","getOwnPropertySymbols","sym","getOwnPropertyDescriptor","forEach","_objectSpread","defaultCountry","NON_FIXED_LINE_PHONE_TYPES","getNumberType","nationalNumber","phone","is_of_type","pattern","_NON_FIXED_LINE_PHONE","indexOf","checkNumberLengthForType","type_info","possible_lengths","mobile_type","actual_length","minimum_length","matchesEntirely","regular_expression","RegExp","mergeArrays","merged","_iterator","_isArray","_ref","element","sort","parseRFC3966","number","replace","_part$split2","name","result","formatRFC3966","_ref2","DIGITS","parseDigit","character","parseDigits","string","digit","ParseError","code","message","stack","create","PhoneNumber","_metadata","isCountryCode","isNonGeographicCallingCode","phoneNumber","parseIncompletePhoneNumber","parsePhoneNumberCharacter","caret_position","parse_character","focused_input_character_index","index","Node","prev","LRUCache","limit","size","head","tail","cache","ensureLimit","node","remove","put","console","log","RegExpCache","regExp","get","lower","upper","trimAfterFirstMatch","regexp","search","_pZ","pZ","PZ","pNd","_pL","pL","pL_regexp","pSc","pSc_regexp","pMn","pMn_regexp","latinLetterRegexp","isLatinLetter","letter","isInvalidPunctuationSymbol","POSSIBLE","candidate","VALID","containsOnlyValidXChars","toString","STRICT_GROUPING","regExpCache","candidateString","containsMoreThanOneSlashInNationalNumber","isNationalPrefixPresentIfRequired","checkNumberGroupingIsValid","allNumberGroupsRemainGrouped","EXACT_GROUPING","allNumberGroupsAreExactlyPresent","charAtIndex","charAt","charAtNextIndex","util","isNumberMatch","substring","MatchType","NSN_MATCH","getCountryCodeSource","phoneNumberRegion","getRegionCodeForCountryCode","getCountryCode","getMetadataForRegion","getNationalSignificantNumber","formatRule","chooseFormattingPatternForNumber","numberFormats","getNationalPrefixFormattingRule","getNationalPrefixOptionalWhenFormatting","PhoneNumberUtil","formattingRuleHasFirstGroupOnly","rawInputCopy","normalizeDigitsOnly","getRawInput","maybeStripNationalPrefixAndCarrierCode","firstSlashInBodyIndex","secondSlashInBodyIndex","CountryCodeSource","FROM_NUMBER_WITH_PLUS_SIGN","FROM_NUMBER_WITHOUT_PLUS_SIGN","String","checkGroups","normalizedCandidate","normalizeDigits","formattedNumberGroups","getNationalNumberGroups","alternateFormats","MetadataManager","getAlternateFormatsForCountry","nationalSignificantNumber","alternateFormat","leadingDigitsPatterns","getPatternForRegExp","formattingPattern","formatNsnUsingPattern","rfc3966Format","formatNumber","endIndex","startIndex","candidateGroups","NON_DIGITS_PATTERN","candidateNumberGroupIndex","hasExtension","contains","formattedNumberGroupIndex","fromIndex","FROM_DEFAULT_COUNTRY","region","getNddPrefixForRegion","Character","isDigit","getExtension","SECOND_NUMBER_START_PATTERN","parsePreCandidate","SLASH_SEPARATED_DATES","TIME_STAMPS","TIME_STAMPS_SUFFIX_LEADING","isValidPreCandidate","offset","followingText","NON_PARENS","LEAD_CLASS","LEAD_CLASS_LEADING","BRACKET_PAIR_LIMIT","MATCHING_BRACKETS_ENTIRE","PUB_PAGES","INNER_MATCHES","leadLimit","punctuationLimit","digitBlockLimit","blockLimit","punctuation","digitSequence","PATTERN","UNWANTED_END_CHAR_PATTERN","MAX_SAFE_INTEGER","Math","pow","PhoneNumberMatcher","defaultCallingCode","leniency","extended","maxTries","Leniency","matches","exec","match","parseAndVerify","extractInnerMatch","startsAt","endsAt","_INNER_MATCHES","isFirstMatch","possibleInnerMatch","_group","_match","group","previousChar","lastCharIndex","nextChar","isValidCandidate","possible","state","lastMatch","find","hasNext","PHONE_NUMBER_START_PATTERN","AFTER_PHONE_NUMBER_END_PATTERN","parse","_parseInput","throwOnError","extractFormattedPhoneNumber","withExtensionStripped","parseInput","formattedPhoneNumber","_parsePhoneNumber","_extractCountryCallin","extractCountryCallingCode","chooseCountryByCountryCallingCode","_stripNationalPrefixA","stripNationalPrefixAndCarrierCodeFromCompleteNumber","carrierCode","exactCountry","findCountryCode","hasSelectedNumberingPlan","valid","stripNationalPrefixAndCarrierCode","prefixPattern","prefixMatch","capturedGroupsCount","nationalPhoneNumber","possibleCountries","_findCountryCode","_stripNationalPrefixA2","numberWithoutIDD","_extractCountryCallin2","extractCountryCallingCodeFromInternationalNumberWithoutPlusSign","shorterNumber","_countryCallingCode","possibleShorterNumber","possibleShorterNationalNumber","CAPTURING_EXTN_DIGITS","create_extension_pattern","purpose","single_extension_characters","RFC3966_EXTN_PREFIX","EXTN_PATTERNS_FOR_PARSING","EXTN_PATTERNS_FOR_MATCHING","EXTN_PATTERN","extractExtension","number_without_extension","CAPTURING_DIGIT_PATTERN","SINGLE_IDD_PREFIX","getIDDPrefix","countryMetadata","stripIDDPrefix","IDDPrefixPattern","matchedGroups","searchNumbers","matcher","findPhoneNumbersInText","getArguments","LONGEST_DUMMY_PHONE_NUMBER","repeat","DIGIT_PLACEHOLDER_MATCHER","NATIONAL_PREFIX_SEPARATORS_PATTERN","CREATE_CHARACTER_CLASS_PATTERN","CREATE_STANDALONE_DIGIT_PATTERN","ELIGIBLE_FORMAT_PATTERN","VALID_FORMATTED_PHONE_NUMBER_PART","VALID_FORMATTED_PHONE_NUMBER_PART_PATTERN","VALID_PHONE_NUMBER","AFTER_PHONE_NUMBER_DIGITS_END_PATTERN","AsYouType","optionsOrDefaultCountry","reset","formattedOutput","international","internationalPrefix","digits","nationalNumberDigits","setCountry","initializePhoneNumberFormatsForCountry","matchingFormats","resetFormat","chosenFormat","template","populatedNationalNumberTemplate","populatedNationalNumberTemplatePosition","formattedDigits","extractFormattedDigits","getFullNumber","inputDigits","getNonFormattedNationalNumber","extractedNumber","hasPlus","startInternationalNumber","nextDigits","isInternational","isCountryCallingCodeAmbiguous","determineTheCountry","previousNationalPrefix","extractNationalPrefix","matchFormats","formatNationalNumberWithNextDigits","formattedNumber","attemptToFormatCompletePhoneNumber","previouslyChosenFormat","newlyChosenFormat","chooseFormat","formatNextNationalNumberDigits","reformatNationalNumber","createFormattingTemplate","internationalFormat","leadingDigitsPatternIndex","nationalPrefixIsMandatoryWhenFormattingInNationalFormat","leadingDigitsPatternsCount","min","leadingDigitsPattern","_iterator2","_isArray2","_i2","formattedNationalNumber","formattedNationalNumberWithNationalPrefix","getSeparatorAfterNationalPrefix","spacing","prefix","getInternationalPrefix","getTemplateForNumberFormatPattern","strictPattern","nationalNumberDummyDigits","includesNationalPrefix","numberFormat","getFormatFormat","numberFormatWithNationalPrefix","_iterator3","_isArray3","_i3","_ref3","cutAndStripNonPairedParens","getNonFormattedTemplate","cutBeforeIndex","dangling_braces","pop","cleared_string","_i4","_dangling_braces","stripNonPairedParens","times","count_occurences","symbol","count","placeholder","should_close_braces","characters_in_template","_helpers","value_character_index","filled_in_template","_closeBraces2","_closeBraces","formatter","_templateFormatter2","found","possibly_last_input_character_index","_templateFormatter","findNumbers","results","isPossiblePhoneNumber","isPossibleNumber","isValidNumber","national_number","DEFAULT_OPTIONS","formatExtension","extension","addExtension","formatNationalNumber","fromCountry","humanReadable","formattedForSameCountryCallingCode","toCountryCallingCode","toCountryMetadata","fromCountryMetadata","formatIDDSameCountryCallingCodeNumber","FIRST_GROUP_PATTERN","formatNationalNumberUsingFormat","useInternationalSeparator","useNationalPrefixFormattingRule","applyInternationalSeparatorStyle","formatAs","availableFormats","nationalNnumber","lastLeadingDigitsPattern","chooseFormatForNumber","local","trim","MIN_LENGTH_PHONE_NUMBER_PATTERN","VALID_PHONE_NUMBER_PATTERN","isViablePhoneNumber","searchPhoneNumbersInText","getCountries","getExampleNumber","examples","formatIncompletePhoneNumber","labels","_propTypes","_propTypes2","shape","object","isRequired","objectOf","max_characters","_class","_temp2","_extends","assign","hasOwnProperty","defineProperties","_react2","_parse3","_inputControl","_possibleConstructorReturn","self","ReferenceError","ReactInput","_React$Component","_temp","_len","_key","__proto__","getPrototypeOf","apply","storeInstance","getInputElement","_this$props","_this$props2","_this$props3","onBlur","_this$props4","_event","stopPropagation","_this$props5","subClass","superClass","setPrototypeOf","_inherits","_props","inputComponent","rest","_objectWithoutProperties","createElement","ref","isEmpty","focus","Component","propTypes","func","elementType","defaultProps","getCountryCodes","toUpperCase","SKIP_COUNTRIES","getCountryCodeForFlag","parsePhoneNumberFromString","error","PhoneInput","module","_metadataMin","_metadataMin2","_PhoneInputNativeDefaults","createPhoneInput","_react","_en2","_InternationalIcon2","_PropTypes","_PhoneInputNative2","defaultMetadata","_Component","PhoneInputNativeDefaults","storeInputRef","render","internationalIcon","xmlns","viewBox","stroke","fill","strokeWidth","strokeLinecap","d","x1","y1","x2","y2","_PhoneInput2","_CountrySelectNative2","PhoneInputNative","countrySelectArrowComponent","countrySelectComponent","countrySelectProperties","COUNTRY_SELECT_PROPERTIES","_class2","_initialiseProps","_classnames2","_reactLifecyclesCompat","_core","_InputSmart2","_InputBasic2","_Flag2","_countries2","PureComponent","PhoneNumberInput","polyfill","_PureComponent","countryOptions","isCountrySupportedWithError","filterCountries","filterCountryOptions","pre_selected_country","getPreSelectedCountry","country_select_options","generateCountrySelectOptions","parsed_input","generateParsedInput","onCountryChange","selectedCountry","prevProps","prevState","_props2","disabled","disablePhoneInput","autoComplete","countrySelectTabIndex","showCountrySelect","style","className","inputClassName","getInputClassName","countrySelectAriaLabel","indicateInvalid","CountrySelectComponent","countrySelectProps","inputStyleReset","_InputComponent","numberInputComponent","numberInputProps","smartCaret","flags","flagComponent","flagsPath","displayInitialValueAsLocalNumber","limitMaxLength","phoneNumberInputProps","_state","hidePhoneInputField","isFocused","InputComponent","_countrySelectProps","storeCountrySelectInstance","tabIndex","onFocus","_onFocus","_onBlur","focusPhoneInputField","storePhoneNumberInputInstance","onPhoneNumberKeyDown","invalid","cloneElement","parseExtDigits","hasUserSelectedACountry","_state$props","old_default_country","old_value","old_reset","new_default_country","new_value","new_reset","new_state","parsedCountry","_countries","bool","arrayOf","any","_this2","new_country","_props3","_state2","old_parsed_input","old_country","new_parsed_input","migrateParsedInputForNewCountry","e164","setState","_input","_props4","hide","number_input","country_select","CountrySelectOptionIcon","FlagComponent","InternationalIcon","createCountrySelectOptionIconComponent","transform","optionsOnTop","optionsOnBottom","appendTo","_loop","divider","option","splice","transformCountryOptions","getCountrySelectOptions","isCountrySupported","label","icon","generateNationalNumberDigits","countryOption","isCountryOptionSupportedWithError","createInput","_inputFormat","InputSmart","storeInput","getTemplate","retained_template","empty_placeholder","cut_before","opening_braces","closing_braces","selectionStart","selectionEnd","keyCode","Keys","Backspace","Delete","navigator","ANDROID_USER_AGENT_REG_EXP","userAgent","isAndroid","setSelectionRange","InputBasic","newValue","Input","alt","src","toLowerCase","includeInternationalOption","country_names","compare_strings","unshift","ZZ","formatNational","previous_country","preferNationalFormat","strip_country_calling_code","trimNumber","getCountryForPartialE164Number","prevInput","get_country_from_possibly_incomplete_international_phone_number","get_national_significant_number_part","could_number_belong_to_country","partial_national_significant_number","overflowDigitsCount","getMaxNumberLength","partialE164Number","derived_country","localeCompare","country_calling_prefix","country_calling_code","getNationalNumber","CountrySelectNative","SelectArrow","selectArrowComponent","selectedOption","_arguments"],"mappings":"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AC,KAAK,MAAM,GAAK,CAAC,MAAM,GAAK,CAAC,MAAM,GAAK,CAAC,MAAM,GAAK,CAAC,MAAM,GAAK,CAAC,MAAM,GAAK,CAAC,MAAM,GAAK,CAAC,MAAM,GAAK,CAAC,MAAM,GAAK,CAAC,KAAK,MAAM,GAAK,CAAC,MAAM,GAAK,CAAC,MAAM,GAAK,CAAC,MAAM,GAAK,CAAC,KAAK,KAAK,KAAK,MAAM,GAAK,CAAC,MAAM,GAAK,CAAC,MAAM,GAAK,CAAC,KAAK,MAAM,GAAK,CAAC,MAAM,GAAK,CAAC,MAAM,GAAK,CAAC,MAAM,GAAK,CAAC,MAAM,GAAK,CAAC,MAAM,GAAK,CAAC,MAAM,GAAK,CAAC,MAAM,GAAK,CAAC,MAAM,GAAK,CAAC,MAAM,GAAK,CAAC,MAAM,GAAK,CAAC,MAAM,GAAK,CAAC,KAAK,KAAK,MAAM,GAAK,CAAC,MAAM,GAAK,CAAC,MAAM,GAAK,CAAC,MAAM,GAAK,CAAC,MAAM,GAAK,CAAC,MAAM,GAAK,CAAC,MAAM,GAAK,CAAC,MAAM,GAAK,CAAC,MAAM,GAAK,CAAC,MAAM,GAAK,CAAC,MAAM,GAAK,CAAC,MAAM,GAAK,CAAC,MAAM,GAAK,CAAC,MAAM,GAAK,CAAC,MAAM,GAAK,CAAC,MAAM,GAAK,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,KAAK,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,KAAK,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,KAAK,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,KAAK,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,KAAK,KAAK,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,MAAM,IAAM,CAAC,KAAK,MAAM,IAAM,CAAC,MAAM,IAAM,CA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","file":"onfido.vendors~crossDevice.min.js","sourcesContent":["// Copy-pasted from:\n// https://github.com/substack/semver-compare/blob/master/index.js\n//\n// Inlining this function because some users reported issues with\n// importing from `semver-compare` in a browser with ES6 \"native\" modules.\n//\n// Fixes `semver-compare` not being able to compare versions with alpha/beta/etc \"tags\".\n// https://github.com/catamphetamine/libphonenumber-js/issues/381\nexport default function (a, b) {\n  a = a.split('-');\n  b = b.split('-');\n  var pa = a[0].split('.');\n  var pb = b[0].split('.');\n\n  for (var i = 0; i < 3; i++) {\n    var na = Number(pa[i]);\n    var nb = Number(pb[i]);\n    if (na > nb) return 1;\n    if (nb > na) return -1;\n    if (!isNaN(na) && isNaN(nb)) return 1;\n    if (isNaN(na) && !isNaN(nb)) return -1;\n  }\n\n  if (a[1] && b[1]) {\n    return a[1] > b[1] ? 1 : a[1] < b[1] ? -1 : 0;\n  }\n\n  return !a[1] && b[1] ? 1 : a[1] && !b[1] ? -1 : 0;\n}\n//# sourceMappingURL=semver-compare.js.map","function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport compare from './tools/semver-compare'; // Added \"possibleLengths\" and renamed\n// \"country_phone_code_to_countries\" to \"country_calling_codes\".\n\nvar V2 = '1.0.18'; // Added \"idd_prefix\" and \"default_idd_prefix\".\n\nvar V3 = '1.2.0'; // Moved `001` country code to \"nonGeographic\" section of metadata.\n\nvar V4 = '1.7.35';\nvar DEFAULT_EXT_PREFIX = ' ext. ';\n/**\r\n * See: https://gitlab.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md\r\n */\n\nvar Metadata =\n/*#__PURE__*/\nfunction () {\n  function Metadata(metadata) {\n    _classCallCheck(this, Metadata);\n\n    validateMetadata(metadata);\n    this.metadata = metadata;\n    setVersion.call(this, metadata);\n  }\n\n  _createClass(Metadata, [{\n    key: \"getCountries\",\n    value: function getCountries() {\n      return Object.keys(this.metadata.countries).filter(function (_) {\n        return _ !== '001';\n      });\n    }\n  }, {\n    key: \"getCountryMetadata\",\n    value: function getCountryMetadata(countryCode) {\n      return this.metadata.countries[countryCode];\n    }\n  }, {\n    key: \"nonGeographic\",\n    value: function nonGeographic() {\n      if (this.v1 || this.v2 || this.v3) return; // `nonGeographical` was a typo.\n      // It's present in metadata generated from `1.7.35` to `1.7.37`.\n\n      return this.metadata.nonGeographic || this.metadata.nonGeographical;\n    }\n  }, {\n    key: \"hasCountry\",\n    value: function hasCountry(country) {\n      return this.getCountryMetadata(country) !== undefined;\n    }\n  }, {\n    key: \"hasCallingCode\",\n    value: function hasCallingCode(callingCode) {\n      if (this.getCountryCodesForCallingCode(callingCode)) {\n        return true;\n      }\n\n      if (this.nonGeographic()) {\n        if (this.nonGeographic()[callingCode]) {\n          return true;\n        }\n      } else {\n        // A hacky workaround for old custom metadata (generated before V4).\n        var countryCodes = this.countryCallingCodes()[callingCode];\n\n        if (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\n          return true;\n        }\n      }\n    }\n  }, {\n    key: \"isNonGeographicCallingCode\",\n    value: function isNonGeographicCallingCode(callingCode) {\n      if (this.nonGeographic()) {\n        return this.nonGeographic()[callingCode] ? true : false;\n      } else {\n        return this.getCountryCodesForCallingCode(callingCode) ? false : true;\n      }\n    } // Deprecated.\n\n  }, {\n    key: \"country\",\n    value: function country(countryCode) {\n      return this.selectNumberingPlan(countryCode);\n    }\n  }, {\n    key: \"selectNumberingPlan\",\n    value: function selectNumberingPlan(countryCode, callingCode) {\n      if (countryCode && countryCode !== '001') {\n        if (!this.hasCountry(countryCode)) {\n          throw new Error(\"Unknown country: \".concat(countryCode));\n        }\n\n        this.numberingPlan = new NumberingPlan(this.getCountryMetadata(countryCode), this);\n      } else if (callingCode) {\n        if (!this.hasCallingCode(callingCode)) {\n          throw new Error(\"Unknown calling code: \".concat(callingCode));\n        }\n\n        this.numberingPlan = new NumberingPlan(this.getNumberingPlanMetadata(callingCode), this);\n      } else {\n        this.numberingPlan = undefined;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"getCountryCodesForCallingCode\",\n    value: function getCountryCodesForCallingCode(callingCode) {\n      var countryCodes = this.countryCallingCodes()[callingCode];\n\n      if (countryCodes) {\n        // Metadata before V4 included \"non-geographic entity\" calling codes\n        // inside `country_calling_codes` (for example, `\"881\":[\"001\"]`).\n        // Now the semantics of `country_calling_codes` has changed:\n        // it's specifically for \"countries\" now.\n        // Older versions of custom metadata will simply skip parsing\n        // \"non-geographic entity\" phone numbers with new versions\n        // of this library: it's not considered a bug,\n        // because such numbers are extremely rare,\n        // and developers extremely rarely use custom metadata.\n        if (countryCodes.length === 1 && countryCodes[0].length === 3) {\n          return;\n        }\n\n        return countryCodes;\n      }\n    }\n  }, {\n    key: \"getCountryCodeForCallingCode\",\n    value: function getCountryCodeForCallingCode(callingCode) {\n      var countryCodes = this.getCountryCodesForCallingCode(callingCode);\n\n      if (countryCodes) {\n        return countryCodes[0];\n      }\n    }\n  }, {\n    key: \"getNumberingPlanMetadata\",\n    value: function getNumberingPlanMetadata(callingCode) {\n      var countryCode = this.getCountryCodeForCallingCode(callingCode);\n\n      if (countryCode) {\n        return this.getCountryMetadata(countryCode);\n      }\n\n      if (this.nonGeographic()) {\n        var metadata = this.nonGeographic()[callingCode];\n\n        if (metadata) {\n          return metadata;\n        }\n      } else {\n        // A hacky workaround for old custom metadata (generated before V4).\n        var countryCodes = this.countryCallingCodes()[callingCode];\n\n        if (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\n          return this.metadata.countries['001'];\n        }\n      }\n    } // Deprecated.\n\n  }, {\n    key: \"countryCallingCode\",\n    value: function countryCallingCode() {\n      return this.numberingPlan.callingCode();\n    } // Deprecated.\n\n  }, {\n    key: \"IDDPrefix\",\n    value: function IDDPrefix() {\n      return this.numberingPlan.IDDPrefix();\n    } // Deprecated.\n\n  }, {\n    key: \"defaultIDDPrefix\",\n    value: function defaultIDDPrefix() {\n      return this.numberingPlan.defaultIDDPrefix();\n    } // Deprecated.\n\n  }, {\n    key: \"nationalNumberPattern\",\n    value: function nationalNumberPattern() {\n      return this.numberingPlan.nationalNumberPattern();\n    } // Deprecated.\n\n  }, {\n    key: \"possibleLengths\",\n    value: function possibleLengths() {\n      return this.numberingPlan.possibleLengths();\n    } // Deprecated.\n\n  }, {\n    key: \"formats\",\n    value: function formats() {\n      return this.numberingPlan.formats();\n    } // Deprecated.\n\n  }, {\n    key: \"nationalPrefixForParsing\",\n    value: function nationalPrefixForParsing() {\n      return this.numberingPlan.nationalPrefixForParsing();\n    } // Deprecated.\n\n  }, {\n    key: \"nationalPrefixTransformRule\",\n    value: function nationalPrefixTransformRule() {\n      return this.numberingPlan.nationalPrefixTransformRule();\n    } // Deprecated.\n\n  }, {\n    key: \"leadingDigits\",\n    value: function leadingDigits() {\n      return this.numberingPlan.leadingDigits();\n    } // Deprecated.\n\n  }, {\n    key: \"hasTypes\",\n    value: function hasTypes() {\n      return this.numberingPlan.hasTypes();\n    } // Deprecated.\n\n  }, {\n    key: \"type\",\n    value: function type(_type) {\n      return this.numberingPlan.type(_type);\n    } // Deprecated.\n\n  }, {\n    key: \"ext\",\n    value: function ext() {\n      return this.numberingPlan.ext();\n    }\n  }, {\n    key: \"countryCallingCodes\",\n    value: function countryCallingCodes() {\n      if (this.v1) return this.metadata.country_phone_code_to_countries;\n      return this.metadata.country_calling_codes;\n    } // Deprecated.\n\n  }, {\n    key: \"chooseCountryByCountryCallingCode\",\n    value: function chooseCountryByCountryCallingCode(callingCode) {\n      this.selectNumberingPlan(null, callingCode);\n    }\n  }, {\n    key: \"hasSelectedNumberingPlan\",\n    value: function hasSelectedNumberingPlan() {\n      return this.numberingPlan !== undefined;\n    }\n  }]);\n\n  return Metadata;\n}();\n\nexport { Metadata as default };\n\nvar NumberingPlan =\n/*#__PURE__*/\nfunction () {\n  function NumberingPlan(metadata, globalMetadataObject) {\n    _classCallCheck(this, NumberingPlan);\n\n    this.globalMetadataObject = globalMetadataObject;\n    this.metadata = metadata;\n    setVersion.call(this, globalMetadataObject.metadata);\n  }\n\n  _createClass(NumberingPlan, [{\n    key: \"callingCode\",\n    value: function callingCode() {\n      return this.metadata[0];\n    } // Formatting information for regions which share\n    // a country calling code is contained by only one region\n    // for performance reasons. For example, for NANPA region\n    // (\"North American Numbering Plan Administration\",\n    //  which includes USA, Canada, Cayman Islands, Bahamas, etc)\n    // it will be contained in the metadata for `US`.\n\n  }, {\n    key: \"getDefaultCountryMetadataForRegion\",\n    value: function getDefaultCountryMetadataForRegion() {\n      return this.globalMetadataObject.getNumberingPlanMetadata(this.callingCode());\n    }\n  }, {\n    key: \"IDDPrefix\",\n    value: function IDDPrefix() {\n      if (this.v1 || this.v2) return;\n      return this.metadata[1];\n    }\n  }, {\n    key: \"defaultIDDPrefix\",\n    value: function defaultIDDPrefix() {\n      if (this.v1 || this.v2) return;\n      return this.metadata[12];\n    }\n  }, {\n    key: \"nationalNumberPattern\",\n    value: function nationalNumberPattern() {\n      if (this.v1 || this.v2) return this.metadata[1];\n      return this.metadata[2];\n    }\n  }, {\n    key: \"possibleLengths\",\n    value: function possibleLengths() {\n      if (this.v1) return;\n      return this.metadata[this.v2 ? 2 : 3];\n    }\n  }, {\n    key: \"_getFormats\",\n    value: function _getFormats(metadata) {\n      return metadata[this.v1 ? 2 : this.v2 ? 3 : 4];\n    } // For countries of the same region (e.g. NANPA)\n    // formats are all stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n  }, {\n    key: \"formats\",\n    value: function formats() {\n      var _this = this;\n\n      var formats = this._getFormats(this.metadata) || this._getFormats(this.getDefaultCountryMetadataForRegion()) || [];\n      return formats.map(function (_) {\n        return new Format(_, _this);\n      });\n    }\n  }, {\n    key: \"nationalPrefix\",\n    value: function nationalPrefix() {\n      return this.metadata[this.v1 ? 3 : this.v2 ? 4 : 5];\n    }\n  }, {\n    key: \"_getNationalPrefixFormattingRule\",\n    value: function _getNationalPrefixFormattingRule(metadata) {\n      return metadata[this.v1 ? 4 : this.v2 ? 5 : 6];\n    } // For countries of the same region (e.g. NANPA)\n    // national prefix formatting rule is stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n  }, {\n    key: \"nationalPrefixFormattingRule\",\n    value: function nationalPrefixFormattingRule() {\n      return this._getNationalPrefixFormattingRule(this.metadata) || this._getNationalPrefixFormattingRule(this.getDefaultCountryMetadataForRegion());\n    }\n  }, {\n    key: \"_nationalPrefixForParsing\",\n    value: function _nationalPrefixForParsing() {\n      return this.metadata[this.v1 ? 5 : this.v2 ? 6 : 7];\n    }\n  }, {\n    key: \"nationalPrefixForParsing\",\n    value: function nationalPrefixForParsing() {\n      // If `national_prefix_for_parsing` is not set explicitly,\n      // then infer it from `national_prefix` (if any)\n      return this._nationalPrefixForParsing() || this.nationalPrefix();\n    }\n  }, {\n    key: \"nationalPrefixTransformRule\",\n    value: function nationalPrefixTransformRule() {\n      return this.metadata[this.v1 ? 6 : this.v2 ? 7 : 8];\n    }\n  }, {\n    key: \"_getNationalPrefixIsOptionalWhenFormatting\",\n    value: function _getNationalPrefixIsOptionalWhenFormatting() {\n      return !!this.metadata[this.v1 ? 7 : this.v2 ? 8 : 9];\n    } // For countries of the same region (e.g. NANPA)\n    // \"national prefix is optional when formatting\" flag is\n    // stored in the \"main\" country for that region.\n    // E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n  }, {\n    key: \"nationalPrefixIsOptionalWhenFormattingInNationalFormat\",\n    value: function nationalPrefixIsOptionalWhenFormattingInNationalFormat() {\n      return this._getNationalPrefixIsOptionalWhenFormatting(this.metadata) || this._getNationalPrefixIsOptionalWhenFormatting(this.getDefaultCountryMetadataForRegion());\n    }\n  }, {\n    key: \"leadingDigits\",\n    value: function leadingDigits() {\n      return this.metadata[this.v1 ? 8 : this.v2 ? 9 : 10];\n    }\n  }, {\n    key: \"types\",\n    value: function types() {\n      return this.metadata[this.v1 ? 9 : this.v2 ? 10 : 11];\n    }\n  }, {\n    key: \"hasTypes\",\n    value: function hasTypes() {\n      // Versions 1.2.0 - 1.2.4: can be `[]`.\n\n      /* istanbul ignore next */\n      if (this.types() && this.types().length === 0) {\n        return false;\n      } // Versions <= 1.2.4: can be `undefined`.\n      // Version >= 1.2.5: can be `0`.\n\n\n      return !!this.types();\n    }\n  }, {\n    key: \"type\",\n    value: function type(_type2) {\n      if (this.hasTypes() && getType(this.types(), _type2)) {\n        return new Type(getType(this.types(), _type2), this);\n      }\n    }\n  }, {\n    key: \"ext\",\n    value: function ext() {\n      if (this.v1 || this.v2) return DEFAULT_EXT_PREFIX;\n      return this.metadata[13] || DEFAULT_EXT_PREFIX;\n    }\n  }]);\n\n  return NumberingPlan;\n}();\n\nvar Format =\n/*#__PURE__*/\nfunction () {\n  function Format(format, metadata) {\n    _classCallCheck(this, Format);\n\n    this._format = format;\n    this.metadata = metadata;\n  }\n\n  _createClass(Format, [{\n    key: \"pattern\",\n    value: function pattern() {\n      return this._format[0];\n    }\n  }, {\n    key: \"format\",\n    value: function format() {\n      return this._format[1];\n    }\n  }, {\n    key: \"leadingDigitsPatterns\",\n    value: function leadingDigitsPatterns() {\n      return this._format[2] || [];\n    }\n  }, {\n    key: \"nationalPrefixFormattingRule\",\n    value: function nationalPrefixFormattingRule() {\n      return this._format[3] || this.metadata.nationalPrefixFormattingRule();\n    }\n  }, {\n    key: \"nationalPrefixIsOptionalWhenFormattingInNationalFormat\",\n    value: function nationalPrefixIsOptionalWhenFormattingInNationalFormat() {\n      return !!this._format[4] || this.metadata.nationalPrefixIsOptionalWhenFormattingInNationalFormat();\n    }\n  }, {\n    key: \"nationalPrefixIsMandatoryWhenFormattingInNationalFormat\",\n    value: function nationalPrefixIsMandatoryWhenFormattingInNationalFormat() {\n      // National prefix is omitted if there's no national prefix formatting rule\n      // set for this country, or when the national prefix formatting rule\n      // contains no national prefix itself, or when this rule is set but\n      // national prefix is optional for this phone number format\n      // (and it is not enforced explicitly)\n      return this.usesNationalPrefix() && !this.nationalPrefixIsOptionalWhenFormattingInNationalFormat();\n    } // Checks whether national prefix formatting rule contains national prefix.\n\n  }, {\n    key: \"usesNationalPrefix\",\n    value: function usesNationalPrefix() {\n      return this.nationalPrefixFormattingRule() && // Check that national prefix formatting rule is not a \"dummy\" one.\n      !FIRST_GROUP_ONLY_PREFIX_PATTERN.test(this.nationalPrefixFormattingRule()); // Previously, `FIRST_GROUP_ONLY_PREFIX_PATTERN` check was instead done via:\n      // // Check that national prefix formatting rule is not a \"dummy\" one.\n      // this.nationalPrefixFormattingRule() !== '$1' &&\n      // // Check that national prefix formatting rule actually has national prefix digit(s).\n      // // Filters out cases like \"($1)\".\n      // // Is used in place of `libphonenumber`'s `FIRST_GROUP_ONLY_PREFIX_PATTERN_` regexp.\n      // /\\d/.test(this.nationalPrefixFormattingRule().replace('$1', ''))\n    }\n  }, {\n    key: \"internationalFormat\",\n    value: function internationalFormat() {\n      return this._format[5] || this.format();\n    }\n  }]);\n\n  return Format;\n}();\n/**\r\n * A pattern that is used to determine if the national prefix formatting rule\r\n * has the first group only, i.e., does not start with the national prefix.\r\n * Note that the pattern explicitly allows for unbalanced parentheses.\r\n */\n\n\nvar FIRST_GROUP_ONLY_PREFIX_PATTERN = /^\\(?\\$1\\)?$/;\n\nvar Type =\n/*#__PURE__*/\nfunction () {\n  function Type(type, metadata) {\n    _classCallCheck(this, Type);\n\n    this.type = type;\n    this.metadata = metadata;\n  }\n\n  _createClass(Type, [{\n    key: \"pattern\",\n    value: function pattern() {\n      if (this.metadata.v1) return this.type;\n      return this.type[0];\n    }\n  }, {\n    key: \"possibleLengths\",\n    value: function possibleLengths() {\n      if (this.metadata.v1) return;\n      return this.type[1] || this.metadata.possibleLengths();\n    }\n  }]);\n\n  return Type;\n}();\n\nfunction getType(types, type) {\n  switch (type) {\n    case 'FIXED_LINE':\n      return types[0];\n\n    case 'MOBILE':\n      return types[1];\n\n    case 'TOLL_FREE':\n      return types[2];\n\n    case 'PREMIUM_RATE':\n      return types[3];\n\n    case 'PERSONAL_NUMBER':\n      return types[4];\n\n    case 'VOICEMAIL':\n      return types[5];\n\n    case 'UAN':\n      return types[6];\n\n    case 'PAGER':\n      return types[7];\n\n    case 'VOIP':\n      return types[8];\n\n    case 'SHARED_COST':\n      return types[9];\n  }\n}\n\nexport function validateMetadata(metadata) {\n  if (!metadata) {\n    throw new Error('[libphonenumber-js] `metadata` argument not passed. Check your arguments.');\n  } // `country_phone_code_to_countries` was renamed to\n  // `country_calling_codes` in `1.0.18`.\n\n\n  if (!is_object(metadata) || !is_object(metadata.countries)) {\n    throw new Error(\"[libphonenumber-js] `metadata` argument was passed but it's not a valid metadata. Must be an object having `.countries` child object property. Got \".concat(is_object(metadata) ? 'an object of shape: { ' + Object.keys(metadata).join(', ') + ' }' : 'a ' + type_of(metadata) + ': ' + metadata, \".\"));\n  }\n} // Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\nvar is_object = function is_object(_) {\n  return _typeof(_) === 'object';\n}; // Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\n\nvar type_of = function type_of(_) {\n  return _typeof(_);\n};\n/**\r\n * Returns extension prefix for a country.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string?}\r\n * @example\r\n * // Returns \" ext. \"\r\n * getExtPrefix(\"US\")\r\n */\n\n\nexport function getExtPrefix(country, metadata) {\n  metadata = new Metadata(metadata);\n\n  if (metadata.hasCountry(country)) {\n    return metadata.country(country).ext();\n  }\n\n  return DEFAULT_EXT_PREFIX;\n}\n/**\r\n * Returns \"country calling code\" for a country.\r\n * Throws an error if the country doesn't exist or isn't supported by this library.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string}\r\n * @example\r\n * // Returns \"44\"\r\n * getCountryCallingCode(\"GB\")\r\n */\n\nexport function getCountryCallingCode(country, metadata) {\n  metadata = new Metadata(metadata);\n\n  if (metadata.hasCountry(country)) {\n    return metadata.country(country).countryCallingCode();\n  }\n\n  throw new Error(\"Unknown country: \".concat(country));\n}\nexport function isSupportedCountry(country, metadata) {\n  // metadata = new Metadata(metadata)\n  // return metadata.hasCountry(country)\n  return metadata.countries[country] !== undefined;\n}\n\nfunction setVersion(metadata) {\n  this.v1 = !metadata.version;\n  this.v2 = metadata.version !== undefined && compare(metadata.version, V3) === -1;\n  this.v3 = metadata.version !== undefined && compare(metadata.version, V4) === -1;\n  this.v4 = metadata.version !== undefined; // && compare(metadata.version, V5) === -1\n} // const ISO_COUNTRY_CODE = /^[A-Z]{2}$/\n// function isCountryCode(countryCode) {\n// \treturn ISO_COUNTRY_CODE.test(countryCodeOrCountryCallingCode)\n// }\n//# sourceMappingURL=metadata.js.map","// The minimum length of the national significant number.\nexport var MIN_LENGTH_FOR_NSN = 2; // The ITU says the maximum length should be 15,\n// but one can find longer numbers in Germany.\n\nexport var MAX_LENGTH_FOR_NSN = 17; // The maximum length of the country calling code.\n\nexport var MAX_LENGTH_COUNTRY_CODE = 3; // Digits accepted in phone numbers\n// (ascii, fullwidth, arabic-indic, and eastern arabic digits).\n\nexport var VALID_DIGITS = \"0-9\\uFF10-\\uFF19\\u0660-\\u0669\\u06F0-\\u06F9\"; // `DASHES` will be right after the opening square bracket of the \"character class\"\n\nvar DASHES = \"-\\u2010-\\u2015\\u2212\\u30FC\\uFF0D\";\nvar SLASHES = \"\\uFF0F/\";\nvar DOTS = \"\\uFF0E.\";\nexport var WHITESPACE = \" \\xA0\\xAD\\u200B\\u2060\\u3000\";\nvar BRACKETS = \"()\\uFF08\\uFF09\\uFF3B\\uFF3D\\\\[\\\\]\"; // export const OPENING_BRACKETS = '(\\uFF08\\uFF3B\\\\\\['\n\nvar TILDES = \"~\\u2053\\u223C\\uFF5E\"; // Regular expression of acceptable punctuation found in phone numbers. This\n// excludes punctuation found as a leading character only. This consists of dash\n// characters, white space characters, full stops, slashes, square brackets,\n// parentheses and tildes. Full-width variants are also present.\n\nexport var VALID_PUNCTUATION = \"\".concat(DASHES).concat(SLASHES).concat(DOTS).concat(WHITESPACE).concat(BRACKETS).concat(TILDES);\nexport var PLUS_CHARS = \"+\\uFF0B\"; // const LEADING_PLUS_CHARS_PATTERN = new RegExp('^[' + PLUS_CHARS + ']+')\n//# sourceMappingURL=constants.js.map","export { default as ParseError } from '../es6/ParseError'\r\nexport { default as parsePhoneNumber } from '../es6/parsePhoneNumber'\r\nexport { default as parsePhoneNumberFromString } from '../es6/parsePhoneNumberFromString'\r\n\r\nexport { default as findNumbers } from '../es6/findNumbers'\r\nexport { default as searchNumbers } from '../es6/searchNumbers'\r\nexport { default as findPhoneNumbersInText } from '../es6/findPhoneNumbersInText'\r\nexport { default as searchPhoneNumbersInText } from '../es6/searchPhoneNumbersInText'\r\nexport { default as PhoneNumberMatcher } from '../es6/PhoneNumberMatcher'\r\n\r\nexport { default as AsYouType } from '../es6/AsYouType'\r\n\r\nexport { default as getCountries } from '../es6/getCountries'\r\nexport { default as Metadata, isSupportedCountry, getCountryCallingCode, getExtPrefix } from '../es6/metadata'\r\n\r\nexport { default as getExampleNumber } from '../es6/getExampleNumber'\r\n\r\nexport { default as formatIncompletePhoneNumber } from '../es6/formatIncompletePhoneNumber'\r\nexport { default as parseIncompletePhoneNumber, parsePhoneNumberCharacter } from '../es6/parseIncompletePhoneNumber'\r\nexport { default as parseDigits } from '../es6/parseDigits'\r\n\r\nexport { parseRFC3966, formatRFC3966 } from '../es6/RFC3966'","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.onCut = onCut;\nexports.onPaste = onPaste;\nexports.onChange = onChange;\nexports.onKeyDown = onKeyDown;\n\nvar _edit = require('./edit');\n\nvar _edit2 = _interopRequireDefault(_edit);\n\nvar _parse3 = require('./parse');\n\nvar _parse4 = _interopRequireDefault(_parse3);\n\nvar _format2 = require('./format');\n\nvar _format3 = _interopRequireDefault(_format2);\n\nvar _dom = require('./dom');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction onCut(event, input, _parse, _format, on_change) {\n\t// The actual cut hasn't happened just yet hence the timeout.\n\tsetTimeout(function () {\n\t\treturn format_input_text(input, _parse, _format, undefined, on_change);\n\t}, 0);\n}\n\nfunction onPaste(event, input, _parse, _format, on_change) {\n\tvar selection = (0, _dom.getSelection)(input);\n\n\t// If selection is made,\n\t// just erase the selected text\n\t// prior to pasting\n\tif (selection) {\n\t\terase_selection(input, selection);\n\t}\n\n\tformat_input_text(input, _parse, _format, undefined, on_change);\n}\n\nfunction onChange(event, input, _parse, _format, on_change) {\n\tformat_input_text(input, _parse, _format, undefined, on_change);\n}\n\n// Intercepts \"Delete\" and \"Backspace\" keys.\n// (hitting \"Delete\" or \"Backspace\" at any caret\n//  position should always result in rasing a digit)\nfunction onKeyDown(event, input, _parse, _format, on_change) {\n\tvar operation = (0, _dom.getOperation)(event);\n\n\tswitch (operation) {\n\t\tcase 'Delete':\n\t\tcase 'Backspace':\n\t\t\t// Intercept this operation and perform it manually.\n\t\t\tevent.preventDefault();\n\n\t\t\tvar selection = (0, _dom.getSelection)(input);\n\n\t\t\t// If selection is made,\n\t\t\t// just erase the selected text,\n\t\t\t// and don't apply any more operations to it.\n\t\t\tif (selection) {\n\t\t\t\terase_selection(input, selection);\n\t\t\t\treturn format_input_text(input, _parse, _format, undefined, on_change);\n\t\t\t}\n\n\t\t\t// Else, perform the (character erasing) operation manually\n\t\t\treturn format_input_text(input, _parse, _format, operation, on_change);\n\n\t\tdefault:\n\t\t// Will be handled when `onChange` fires.\n\t}\n}\n\n/**\r\n * Erases the selected text inside an `<input/>`.\r\n * @param  {DOMElement} input\r\n * @param  {Selection} selection\r\n */\nfunction erase_selection(input, selection) {\n\tvar text = input.value;\n\ttext = text.slice(0, selection.start) + text.slice(selection.end);\n\n\tinput.value = text;\n\t(0, _dom.setCaretPosition)(input, selection.start);\n}\n\n/**\r\n * Parses and re-formats `<input/>` textual value.\r\n * E.g. when a user enters something into the `<input/>`\r\n * that raw input must first be parsed and the re-formatted properly.\r\n * Is called either after some user input (e.g. entered a character, pasted something)\r\n * or after the user performed an `operation` (e.g. \"Backspace\", \"Delete\").\r\n * @param  {DOMElement} input\r\n * @param  {Function} parse\r\n * @param  {Function} format\r\n * @param  {string} [operation] - The operation that triggered `<input/>` textual value change. E.g. \"Backspace\", \"Delete\".\r\n * @param  {Function} onChange\r\n */\nfunction format_input_text(input, _parse, _format, operation, on_change) {\n\t// Parse `<input/>` textual value.\n\t// Get `value` and `caret` position.\n\tvar _parse2 = (0, _parse4.default)(input.value, (0, _dom.getCaretPosition)(input), _parse),\n\t    value = _parse2.value,\n\t    caret = _parse2.caret;\n\n\t// If a user performed an operation (e.g. \"Backspace\", \"Delete\")\n\t// then apply that operation and get new `value` and `caret` position.\n\n\n\tif (operation) {\n\t\tvar operation_applied = (0, _edit2.default)(value, caret, operation);\n\n\t\tvalue = operation_applied.value;\n\t\tcaret = operation_applied.caret;\n\t}\n\n\t// Format the `value`.\n\t// (and reposition the caret accordingly)\n\tvar formatted = (0, _format3.default)(value, caret, _format);\n\n\tvar text = formatted.text;\n\tcaret = formatted.caret;\n\n\t// Set `<input/>` textual value manually\n\t// to prevent React from resetting the caret position\n\t// later inside subsequent `render()`.\n\t// Doesn't work for custom `inputComponent`s for some reason.\n\tinput.value = text;\n\t// Position the caret properly.\n\t(0, _dom.setCaretPosition)(input, caret);\n\n\t// `<input/>` textual value may have changed,\n\t// so the parsed `value` may have changed too.\n\t// The `value` didn't neccessarily change\n\t// but it might have.\n\ton_change(value);\n}\n//# sourceMappingURL=input control.js.map","function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport parsePhoneNumber_ from './parsePhoneNumber_';\nexport default function parsePhoneNumber() {\n  var _normalizeArguments = normalizeArguments(arguments),\n      text = _normalizeArguments.text,\n      options = _normalizeArguments.options,\n      metadata = _normalizeArguments.metadata;\n\n  return parsePhoneNumber_(text, options, metadata);\n}\nexport function normalizeArguments(args) {\n  var _Array$prototype$slic = Array.prototype.slice.call(args),\n      _Array$prototype$slic2 = _slicedToArray(_Array$prototype$slic, 4),\n      arg_1 = _Array$prototype$slic2[0],\n      arg_2 = _Array$prototype$slic2[1],\n      arg_3 = _Array$prototype$slic2[2],\n      arg_4 = _Array$prototype$slic2[3];\n\n  var text;\n  var options;\n  var metadata; // If the phone number is passed as a string.\n  // `parsePhoneNumber('88005553535', ...)`.\n\n  if (typeof arg_1 === 'string') {\n    text = arg_1;\n  } else throw new TypeError('A text for parsing must be a string.'); // If \"default country\" argument is being passed then move it to `options`.\n  // `parsePhoneNumber('88005553535', 'RU', [options], metadata)`.\n\n\n  if (!arg_2 || typeof arg_2 === 'string') {\n    if (arg_4) {\n      options = arg_3;\n      metadata = arg_4;\n    } else {\n      options = undefined;\n      metadata = arg_3;\n    }\n\n    if (arg_2) {\n      options = _objectSpread({\n        defaultCountry: arg_2\n      }, options);\n    }\n  } // `defaultCountry` is not passed.\n  // Example: `parsePhoneNumber('+78005553535', [options], metadata)`.\n  else if (isObject(arg_2)) {\n      if (arg_3) {\n        options = arg_2;\n        metadata = arg_3;\n      } else {\n        metadata = arg_2;\n      }\n    } else throw new Error(\"Invalid second argument: \".concat(arg_2));\n\n  return {\n    text: text,\n    options: options,\n    metadata: metadata\n  };\n} // Otherwise istanbul would show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\nvar isObject = function isObject(_) {\n  return _typeof(_) === 'object';\n};\n//# sourceMappingURL=parsePhoneNumber.js.map","import Metadata from './metadata';\nimport { matchesEntirely, mergeArrays } from './util';\nvar NON_FIXED_LINE_PHONE_TYPES = ['MOBILE', 'PREMIUM_RATE', 'TOLL_FREE', 'SHARED_COST', 'VOIP', 'PERSONAL_NUMBER', 'PAGER', 'UAN', 'VOICEMAIL']; // Finds out national phone number type (fixed line, mobile, etc)\n\nexport default function getNumberType(input, options, metadata) {\n  // If assigning the `{}` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  options = options || {}; // When `parse()` returned `{}`\n  // meaning that the phone number is not a valid one.\n\n  if (!input.country) {\n    return;\n  }\n\n  metadata = new Metadata(metadata);\n  metadata.selectNumberingPlan(input.country, input.countryCallingCode);\n  var nationalNumber = options.v2 ? input.nationalNumber : input.phone; // The following is copy-pasted from the original function:\n  // https://github.com/googlei18n/libphonenumber/blob/3ea547d4fbaa2d0b67588904dfa5d3f2557c27ff/javascript/i18n/phonenumbers/phonenumberutil.js#L2835\n  // Is this national number even valid for this country\n\n  if (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern())) {\n    return;\n  } // Is it fixed line number\n\n\n  if (is_of_type(nationalNumber, 'FIXED_LINE', metadata)) {\n    // Because duplicate regular expressions are removed\n    // to reduce metadata size, if \"mobile\" pattern is \"\"\n    // then it means it was removed due to being a duplicate of the fixed-line pattern.\n    //\n    if (metadata.type('MOBILE') && metadata.type('MOBILE').pattern() === '') {\n      return 'FIXED_LINE_OR_MOBILE';\n    } // v1 metadata.\n    // Legacy.\n    // Deprecated.\n\n\n    if (!metadata.type('MOBILE')) {\n      return 'FIXED_LINE_OR_MOBILE';\n    } // Check if the number happens to qualify as both fixed line and mobile.\n    // (no such country in the minimal metadata set)\n\n    /* istanbul ignore if */\n\n\n    if (is_of_type(nationalNumber, 'MOBILE', metadata)) {\n      return 'FIXED_LINE_OR_MOBILE';\n    }\n\n    return 'FIXED_LINE';\n  }\n\n  for (var _i = 0, _NON_FIXED_LINE_PHONE = NON_FIXED_LINE_PHONE_TYPES; _i < _NON_FIXED_LINE_PHONE.length; _i++) {\n    var _type = _NON_FIXED_LINE_PHONE[_i];\n\n    if (is_of_type(nationalNumber, _type, metadata)) {\n      return _type;\n    }\n  }\n}\nexport function is_of_type(nationalNumber, type, metadata) {\n  type = metadata.type(type);\n\n  if (!type || !type.pattern()) {\n    return false;\n  } // Check if any possible number lengths are present;\n  // if so, we use them to avoid checking\n  // the validation pattern if they don't match.\n  // If they are absent, this means they match\n  // the general description, which we have\n  // already checked before a specific number type.\n\n\n  if (type.possibleLengths() && type.possibleLengths().indexOf(nationalNumber.length) < 0) {\n    return false;\n  }\n\n  return matchesEntirely(nationalNumber, type.pattern());\n} // Should only be called for the \"new\" metadata which has \"possible lengths\".\n\nexport function checkNumberLengthForType(nationalNumber, type, metadata) {\n  var type_info = metadata.type(type); // There should always be \"<possiblePengths/>\" set for every type element.\n  // This is declared in the XML schema.\n  // For size efficiency, where a sub-description (e.g. fixed-line)\n  // has the same \"<possiblePengths/>\" as the \"general description\", this is missing,\n  // so we fall back to the \"general description\". Where no numbers of the type\n  // exist at all, there is one possible length (-1) which is guaranteed\n  // not to match the length of any real phone number.\n\n  var possible_lengths = type_info && type_info.possibleLengths() || metadata.possibleLengths(); // let local_lengths    = type_info && type.possibleLengthsLocal() || metadata.possibleLengthsLocal()\n  // Metadata before version `1.0.18` didn't contain `possible_lengths`.\n\n  if (!possible_lengths) {\n    return 'IS_POSSIBLE';\n  }\n\n  if (type === 'FIXED_LINE_OR_MOBILE') {\n    // No such country in metadata.\n\n    /* istanbul ignore next */\n    if (!metadata.type('FIXED_LINE')) {\n      // The rare case has been encountered where no fixedLine data is available\n      // (true for some non-geographic entities), so we just check mobile.\n      return checkNumberLengthForType(nationalNumber, 'MOBILE', metadata);\n    }\n\n    var mobile_type = metadata.type('MOBILE');\n\n    if (mobile_type) {\n      // Merge the mobile data in if there was any. \"Concat\" creates a new\n      // array, it doesn't edit possible_lengths in place, so we don't need a copy.\n      // Note that when adding the possible lengths from mobile, we have\n      // to again check they aren't empty since if they are this indicates\n      // they are the same as the general desc and should be obtained from there.\n      possible_lengths = mergeArrays(possible_lengths, mobile_type.possibleLengths()); // The current list is sorted; we need to merge in the new list and\n      // re-sort (duplicates are okay). Sorting isn't so expensive because\n      // the lists are very small.\n      // if (local_lengths)\n      // {\n      // \tlocal_lengths = mergeArrays(local_lengths, mobile_type.possibleLengthsLocal())\n      // }\n      // else\n      // {\n      // \tlocal_lengths = mobile_type.possibleLengthsLocal()\n      // }\n    }\n  } // If the type doesn't exist then return 'INVALID_LENGTH'.\n  else if (type && !type_info) {\n      return 'INVALID_LENGTH';\n    }\n\n  var actual_length = nationalNumber.length; // In `libphonenumber-js` all \"local-only\" formats are dropped for simplicity.\n  // // This is safe because there is never an overlap beween the possible lengths\n  // // and the local-only lengths; this is checked at build time.\n  // if (local_lengths && local_lengths.indexOf(nationalNumber.length) >= 0)\n  // {\n  // \treturn 'IS_POSSIBLE_LOCAL_ONLY'\n  // }\n\n  var minimum_length = possible_lengths[0];\n\n  if (minimum_length === actual_length) {\n    return 'IS_POSSIBLE';\n  }\n\n  if (minimum_length > actual_length) {\n    return 'TOO_SHORT';\n  }\n\n  if (possible_lengths[possible_lengths.length - 1] < actual_length) {\n    return 'TOO_LONG';\n  } // We skip the first element since we've already checked it.\n\n\n  return possible_lengths.indexOf(actual_length, 1) >= 0 ? 'IS_POSSIBLE' : 'INVALID_LENGTH';\n}\n//# sourceMappingURL=getNumberType_.js.map","/**\r\n * Checks whether the entire input sequence can be matched\r\n * against the regular expression.\r\n * @return {boolean}\r\n */\nexport function matchesEntirely(text, regular_expression) {\n  // If assigning the `''` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  text = text || '';\n  return new RegExp('^(?:' + regular_expression + ')$').test(text);\n}\n/**\r\n * Merges two arrays.\r\n * @param  {*} a\r\n * @param  {*} b\r\n * @return {*}\r\n */\n\nexport function mergeArrays(a, b) {\n  var merged = a.slice();\n\n  for (var _iterator = b, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var element = _ref;\n\n    if (a.indexOf(element) < 0) {\n      merged.push(element);\n    }\n  }\n\n  return merged.sort(function (a, b) {\n    return a - b;\n  }); // ES6 version, requires Set polyfill.\n  // let merged = new Set(a)\n  // for (const element of b)\n  // {\n  // \tmerged.add(i)\n  // }\n  // return Array.from(merged).sort((a, b) => a - b)\n}\n//# sourceMappingURL=util.js.map","function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport isViablePhoneNumber from './isViablePhoneNumber'; // https://www.ietf.org/rfc/rfc3966.txt\n\n/**\r\n * @param  {string} text - Phone URI (RFC 3966).\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\n\nexport function parseRFC3966(text) {\n  var number;\n  var ext; // Replace \"tel:\" with \"tel=\" for parsing convenience.\n\n  text = text.replace(/^tel:/, 'tel=');\n\n  for (var _iterator = text.split(';'), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var part = _ref;\n\n    var _part$split = part.split('='),\n        _part$split2 = _slicedToArray(_part$split, 2),\n        name = _part$split2[0],\n        value = _part$split2[1];\n\n    switch (name) {\n      case 'tel':\n        number = value;\n        break;\n\n      case 'ext':\n        ext = value;\n        break;\n\n      case 'phone-context':\n        // Only \"country contexts\" are supported.\n        // \"Domain contexts\" are ignored.\n        if (value[0] === '+') {\n          number = value + number;\n        }\n\n        break;\n    }\n  } // If the phone number is not viable, then abort.\n\n\n  if (!isViablePhoneNumber(number)) {\n    return {};\n  }\n\n  var result = {\n    number: number\n  };\n\n  if (ext) {\n    result.ext = ext;\n  }\n\n  return result;\n}\n/**\r\n * @param  {object} - `{ ?number, ?extension }`.\r\n * @return {string} Phone URI (RFC 3966).\r\n */\n\nexport function formatRFC3966(_ref2) {\n  var number = _ref2.number,\n      ext = _ref2.ext;\n\n  if (!number) {\n    return '';\n  }\n\n  if (number[0] !== '+') {\n    throw new Error(\"\\\"formatRFC3966()\\\" expects \\\"number\\\" to be in E.164 format.\");\n  }\n\n  return \"tel:\".concat(number).concat(ext ? ';ext=' + ext : '');\n}\n//# sourceMappingURL=RFC3966.js.map","// These mappings map a character (key) to a specific digit that should\n// replace it for normalization purposes. Non-European digits that\n// may be used in phone numbers are mapped to a European equivalent.\n//\n// E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\n//\nexport var DIGITS = {\n  '0': '0',\n  '1': '1',\n  '2': '2',\n  '3': '3',\n  '4': '4',\n  '5': '5',\n  '6': '6',\n  '7': '7',\n  '8': '8',\n  '9': '9',\n  \"\\uFF10\": '0',\n  // Fullwidth digit 0\n  \"\\uFF11\": '1',\n  // Fullwidth digit 1\n  \"\\uFF12\": '2',\n  // Fullwidth digit 2\n  \"\\uFF13\": '3',\n  // Fullwidth digit 3\n  \"\\uFF14\": '4',\n  // Fullwidth digit 4\n  \"\\uFF15\": '5',\n  // Fullwidth digit 5\n  \"\\uFF16\": '6',\n  // Fullwidth digit 6\n  \"\\uFF17\": '7',\n  // Fullwidth digit 7\n  \"\\uFF18\": '8',\n  // Fullwidth digit 8\n  \"\\uFF19\": '9',\n  // Fullwidth digit 9\n  \"\\u0660\": '0',\n  // Arabic-indic digit 0\n  \"\\u0661\": '1',\n  // Arabic-indic digit 1\n  \"\\u0662\": '2',\n  // Arabic-indic digit 2\n  \"\\u0663\": '3',\n  // Arabic-indic digit 3\n  \"\\u0664\": '4',\n  // Arabic-indic digit 4\n  \"\\u0665\": '5',\n  // Arabic-indic digit 5\n  \"\\u0666\": '6',\n  // Arabic-indic digit 6\n  \"\\u0667\": '7',\n  // Arabic-indic digit 7\n  \"\\u0668\": '8',\n  // Arabic-indic digit 8\n  \"\\u0669\": '9',\n  // Arabic-indic digit 9\n  \"\\u06F0\": '0',\n  // Eastern-Arabic digit 0\n  \"\\u06F1\": '1',\n  // Eastern-Arabic digit 1\n  \"\\u06F2\": '2',\n  // Eastern-Arabic digit 2\n  \"\\u06F3\": '3',\n  // Eastern-Arabic digit 3\n  \"\\u06F4\": '4',\n  // Eastern-Arabic digit 4\n  \"\\u06F5\": '5',\n  // Eastern-Arabic digit 5\n  \"\\u06F6\": '6',\n  // Eastern-Arabic digit 6\n  \"\\u06F7\": '7',\n  // Eastern-Arabic digit 7\n  \"\\u06F8\": '8',\n  // Eastern-Arabic digit 8\n  \"\\u06F9\": '9' // Eastern-Arabic digit 9\n\n};\nexport function parseDigit(character) {\n  return DIGITS[character];\n}\n/**\r\n * Parses phone number digits from a string.\r\n * Drops all punctuation leaving only digits.\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * parseDigits('8 (800) 555')\r\n * // Outputs '8800555'.\r\n * ```\r\n */\n\nexport default function parseDigits(string) {\n  var result = ''; // Using `.split('')` here instead of normal `for ... of`\n  // because the importing application doesn't neccessarily include an ES6 polyfill.\n  // The `.split('')` approach discards \"exotic\" UTF-8 characters\n  // (the ones consisting of four bytes) but digits\n  // (including non-European ones) don't fall into that range\n  // so such \"exotic\" characters would be discarded anyway.\n\n  for (var _iterator = string.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var character = _ref;\n    var digit = parseDigit(character);\n\n    if (digit) {\n      result += digit;\n    }\n  }\n\n  return result;\n}\n//# sourceMappingURL=parseDigits.js.map","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// https://stackoverflow.com/a/46971044/970769\nvar ParseError = function ParseError(code) {\n  _classCallCheck(this, ParseError);\n\n  this.name = this.constructor.name;\n  this.message = code;\n  this.stack = new Error(code).stack;\n};\n\nexport { ParseError as default };\nParseError.prototype = Object.create(Error.prototype);\nParseError.prototype.constructor = ParseError;\n//# sourceMappingURL=ParseError.js.map","function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport Metadata from './metadata';\nimport isPossibleNumber from './isPossibleNumber_';\nimport isValidNumber from './validate_';\nimport isValidNumberForRegion from './isValidNumberForRegion_';\nimport getNumberType from './getNumberType_';\nimport formatNumber from './format_';\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;\n\nvar PhoneNumber =\n/*#__PURE__*/\nfunction () {\n  function PhoneNumber(countryCallingCode, nationalNumber, metadata) {\n    _classCallCheck(this, PhoneNumber);\n\n    if (!countryCallingCode) {\n      throw new TypeError('`country` or `countryCallingCode` not passed');\n    }\n\n    if (!nationalNumber) {\n      throw new TypeError('`nationalNumber` not passed');\n    }\n\n    var _metadata = new Metadata(metadata); // If country code is passed then derive `countryCallingCode` from it.\n    // Also store the country code as `.country`.\n\n\n    if (isCountryCode(countryCallingCode)) {\n      this.country = countryCallingCode;\n\n      _metadata.country(countryCallingCode);\n\n      countryCallingCode = _metadata.countryCallingCode();\n    } else {\n      /* istanbul ignore if */\n      if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n        if (_metadata.isNonGeographicCallingCode(countryCallingCode)) {\n          this.country = '001';\n        }\n      }\n    }\n\n    this.countryCallingCode = countryCallingCode;\n    this.nationalNumber = nationalNumber;\n    this.number = '+' + this.countryCallingCode + this.nationalNumber;\n    this.metadata = metadata;\n  }\n\n  _createClass(PhoneNumber, [{\n    key: \"isPossible\",\n    value: function isPossible() {\n      return isPossibleNumber(this, {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"isValid\",\n    value: function isValid() {\n      return isValidNumber(this, {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"isNonGeographic\",\n    value: function isNonGeographic() {\n      var metadata = new Metadata(this.metadata);\n      return metadata.isNonGeographicCallingCode(this.countryCallingCode);\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(phoneNumber) {\n      return this.number === phoneNumber.number && this.ext === phoneNumber.ext;\n    } // // Is just an alias for `this.isValid() && this.country === country`.\n    // // https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\n    // isValidForRegion(country) {\n    // \treturn isValidNumberForRegion(this, country, { v2: true }, this.metadata)\n    // }\n\n  }, {\n    key: \"getType\",\n    value: function getType() {\n      return getNumberType(this, {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"format\",\n    value: function format(_format, options) {\n      return formatNumber(this, _format, options ? _objectSpread({}, options, {\n        v2: true\n      }) : {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"formatNational\",\n    value: function formatNational(options) {\n      return this.format('NATIONAL', options);\n    }\n  }, {\n    key: \"formatInternational\",\n    value: function formatInternational(options) {\n      return this.format('INTERNATIONAL', options);\n    }\n  }, {\n    key: \"getURI\",\n    value: function getURI(options) {\n      return this.format('RFC3966', options);\n    }\n  }]);\n\n  return PhoneNumber;\n}();\n\nexport { PhoneNumber as default };\n\nvar isCountryCode = function isCountryCode(value) {\n  return /^[A-Z]{2}$/.test(value);\n};\n//# sourceMappingURL=PhoneNumber.js.map","import { parseDigit } from './parseDigits';\n/**\r\n * Parses phone number characters from a string.\r\n * Drops all punctuation leaving only digits and the leading `+` sign (if any).\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * // Outputs '8800555'.\r\n * parseIncompletePhoneNumber('8 (800) 555')\r\n * // Outputs '+7800555'.\r\n * parseIncompletePhoneNumber('+7 800 555')\r\n * ```\r\n */\n\nexport default function parseIncompletePhoneNumber(string) {\n  var result = ''; // Using `.split('')` here instead of normal `for ... of`\n  // because the importing application doesn't neccessarily include an ES6 polyfill.\n  // The `.split('')` approach discards \"exotic\" UTF-8 characters\n  // (the ones consisting of four bytes) but digits\n  // (including non-European ones) don't fall into that range\n  // so such \"exotic\" characters would be discarded anyway.\n\n  for (var _iterator = string.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var character = _ref;\n    result += parsePhoneNumberCharacter(character, result) || '';\n  }\n\n  return result;\n}\n/**\r\n * `input-format` `parse()` function.\r\n * https://gitlab.com/catamphetamine/input-format\r\n * @param  {string} character - Yet another character from raw input string.\r\n * @param  {string} value - The value parsed so far.\r\n * @param  {object} meta - Optional custom use-case-specific metadata.\r\n * @return {string?} The parsed character.\r\n */\n\nexport function parsePhoneNumberCharacter(character, value) {\n  // Only allow a leading `+`.\n  if (character === '+') {\n    // If this `+` is not the first parsed character\n    // then discard it.\n    if (value) {\n      return;\n    }\n\n    return '+';\n  } // Allow digits.\n\n\n  return parseDigit(character);\n}\n//# sourceMappingURL=parseIncompletePhoneNumber.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = parse;\n// Parses the `text`.\n//\n// Returns `{ value, caret }` where `caret` is\n// the caret position inside `value`\n// corresponding to the `caret_position` inside `text`.\n//\n// The `text` is parsed by feeding each character sequentially to\n// `parse_character(character, value)` function\n// and appending the result (if it's not `undefined`) to `value`.\n//\n// Example:\n//\n// `text` is `8 (800) 555-35-35`,\n// `caret_position` is `4` (before the first `0`).\n// `parse_character` is `(character, value) =>\n//   if (character >= '0' && character <= '9') { return character }`.\n//\n// then `parse()` outputs `{ value: '88005553535', caret: 2 }`.\n//\nfunction parse(text, caret_position, parse_character) {\n\tvar value = '';\n\n\tvar focused_input_character_index = 0;\n\n\tvar index = 0;\n\twhile (index < text.length) {\n\t\tvar character = parse_character(text[index], value);\n\n\t\tif (character !== undefined) {\n\t\t\tvalue += character;\n\n\t\t\tif (caret_position !== undefined) {\n\t\t\t\tif (caret_position === index) {\n\t\t\t\t\tfocused_input_character_index = value.length - 1;\n\t\t\t\t} else if (caret_position > index) {\n\t\t\t\t\tfocused_input_character_index = value.length;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tindex++;\n\t}\n\n\t// If caret position wasn't specified\n\tif (caret_position === undefined) {\n\t\t// Then set caret position to \"after the last input character\"\n\t\tfocused_input_character_index = value.length;\n\t}\n\n\tvar result = {\n\t\tvalue: value,\n\t\tcaret: focused_input_character_index\n\t};\n\n\treturn result;\n}\n//# sourceMappingURL=parse.js.map","function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// https://medium.com/dsinjs/implementing-lru-cache-in-javascript-94ba6755cda9\nvar Node = function Node(key, value) {\n  var next = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var prev = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n  _classCallCheck(this, Node);\n\n  this.key = key;\n  this.value = value;\n  this.next = next;\n  this.prev = prev;\n};\n\nvar LRUCache =\n/*#__PURE__*/\nfunction () {\n  //set default limit of 10 if limit is not passed.\n  function LRUCache() {\n    var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n\n    _classCallCheck(this, LRUCache);\n\n    this.size = 0;\n    this.limit = limit;\n    this.head = null;\n    this.tail = null;\n    this.cache = {};\n  } // Write Node to head of LinkedList\n  // update cache with Node key and Node reference\n\n\n  _createClass(LRUCache, [{\n    key: \"put\",\n    value: function put(key, value) {\n      this.ensureLimit();\n\n      if (!this.head) {\n        this.head = this.tail = new Node(key, value);\n      } else {\n        var node = new Node(key, value, this.head);\n        this.head.prev = node;\n        this.head = node;\n      } //Update the cache map\n\n\n      this.cache[key] = this.head;\n      this.size++;\n    } // Read from cache map and make that node as new Head of LinkedList\n\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      if (this.cache[key]) {\n        var value = this.cache[key].value; // node removed from it's position and cache\n\n        this.remove(key); // write node again to the head of LinkedList to make it most recently used\n\n        this.put(key, value);\n        return value;\n      }\n\n      console.log(\"Item not available in cache for key \".concat(key));\n    }\n  }, {\n    key: \"ensureLimit\",\n    value: function ensureLimit() {\n      if (this.size === this.limit) {\n        this.remove(this.tail.key);\n      }\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(key) {\n      var node = this.cache[key];\n\n      if (node.prev !== null) {\n        node.prev.next = node.next;\n      } else {\n        this.head = node.next;\n      }\n\n      if (node.next !== null) {\n        node.next.prev = node.prev;\n      } else {\n        this.tail = node.prev;\n      }\n\n      delete this.cache[key];\n      this.size--;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.head = null;\n      this.tail = null;\n      this.size = 0;\n      this.cache = {};\n    } // // Invokes the callback function with every node of the chain and the index of the node.\n    // forEach(fn) {\n    //   let node = this.head;\n    //   let counter = 0;\n    //   while (node) {\n    //     fn(node, counter);\n    //     node = node.next;\n    //     counter++;\n    //   }\n    // }\n    // // To iterate over LRU with a 'for...of' loop\n    // *[Symbol.iterator]() {\n    //   let node = this.head;\n    //   while (node) {\n    //     yield node;\n    //     node = node.next;\n    //   }\n    // }\n\n  }]);\n\n  return LRUCache;\n}();\n\nexport { LRUCache as default };\n//# sourceMappingURL=LRUCache.js.map","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport LRUCache from './LRUCache'; // A cache for frequently used country-specific regular expressions. Set to 32 to cover ~2-3\n// countries being used for the same doc with ~10 patterns for each country. Some pages will have\n// a lot more countries in use, but typically fewer numbers for each so expanding the cache for\n// that use-case won't have a lot of benefit.\n\nvar RegExpCache =\n/*#__PURE__*/\nfunction () {\n  function RegExpCache(size) {\n    _classCallCheck(this, RegExpCache);\n\n    this.cache = new LRUCache(size);\n  }\n\n  _createClass(RegExpCache, [{\n    key: \"getPatternForRegExp\",\n    value: function getPatternForRegExp(pattern) {\n      var regExp = this.cache.get(pattern);\n\n      if (!regExp) {\n        regExp = new RegExp('^' + pattern);\n        this.cache.put(pattern, regExp);\n      }\n\n      return regExp;\n    }\n  }]);\n\n  return RegExpCache;\n}();\n\nexport { RegExpCache as default };\n//# sourceMappingURL=RegExpCache.js.map","/** Returns a regular expression quantifier with an upper and lower limit. */\nexport function limit(lower, upper) {\n  if (lower < 0 || upper <= 0 || upper < lower) {\n    throw new TypeError();\n  }\n\n  return \"{\".concat(lower, \",\").concat(upper, \"}\");\n}\n/**\r\n * Trims away any characters after the first match of {@code pattern} in {@code candidate},\r\n * returning the trimmed version.\r\n */\n\nexport function trimAfterFirstMatch(regexp, string) {\n  var index = string.search(regexp);\n\n  if (index >= 0) {\n    return string.slice(0, index);\n  }\n\n  return string;\n}\nexport function startsWith(string, substring) {\n  return string.indexOf(substring) === 0;\n}\nexport function endsWith(string, substring) {\n  return string.indexOf(substring, string.length - substring.length) === string.length - substring.length;\n}\n//# sourceMappingURL=util.js.map","// Javascript doesn't support UTF-8 regular expressions.\n// So mimicking them here.\n// Copy-pasted from `PhoneNumberMatcher.js`.\n\n/**\r\n * \"\\p{Z}\" is any kind of whitespace or invisible separator (\"Separator\").\r\n * http://www.regular-expressions.info/unicode.html\r\n * \"\\P{Z}\" is the reverse of \"\\p{Z}\".\r\n * \"\\p{N}\" is any kind of numeric character in any script (\"Number\").\r\n * \"\\p{Nd}\" is a digit zero through nine in any script except \"ideographic scripts\" (\"Decimal_Digit_Number\").\r\n * \"\\p{Sc}\" is a currency symbol (\"Currency_Symbol\").\r\n * \"\\p{L}\" is any kind of letter from any language (\"Letter\").\r\n * \"\\p{Mn}\" is \"non-spacing mark\".\r\n *\r\n * Javascript doesn't support Unicode Regular Expressions\r\n * so substituting it with this explicit set of characters.\r\n *\r\n * https://stackoverflow.com/questions/13210194/javascript-regex-equivalent-of-a-za-z-using-pl\r\n * https://github.com/danielberndt/babel-plugin-utf-8-regex/blob/master/src/transformer.js\r\n */\nvar _pZ = \" \\xA0\\u1680\\u180E\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\";\nexport var pZ = \"[\".concat(_pZ, \"]\");\nexport var PZ = \"[^\".concat(_pZ, \"]\");\nexport var _pN = \"0-9\\xB2\\xB3\\xB9\\xBC-\\xBE\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u09F4-\\u09F9\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0B72-\\u0B77\\u0BE6-\\u0BF2\\u0C66-\\u0C6F\\u0C78-\\u0C7E\\u0CE6-\\u0CEF\\u0D66-\\u0D75\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F33\\u1040-\\u1049\\u1090-\\u1099\\u1369-\\u137C\\u16EE-\\u16F0\\u17E0-\\u17E9\\u17F0-\\u17F9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19DA\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\u2070\\u2074-\\u2079\\u2080-\\u2089\\u2150-\\u2182\\u2185-\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2CFD\\u3007\\u3021-\\u3029\\u3038-\\u303A\\u3192-\\u3195\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\uA620-\\uA629\\uA6E6-\\uA6EF\\uA830-\\uA835\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19\"; // const pN = `[${_pN}]`\n\nvar _pNd = \"0-9\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0BE6-\\u0BEF\\u0C66-\\u0C6F\\u0CE6-\\u0CEF\\u0D66-\\u0D6F\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F29\\u1040-\\u1049\\u1090-\\u1099\\u17E0-\\u17E9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19D9\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\uA620-\\uA629\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19\";\nexport var pNd = \"[\".concat(_pNd, \"]\");\nexport var _pL = \"A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC\";\nvar pL = \"[\".concat(_pL, \"]\");\nvar pL_regexp = new RegExp(pL);\nvar _pSc = \"$\\xA2-\\xA5\\u058F\\u060B\\u09F2\\u09F3\\u09FB\\u0AF1\\u0BF9\\u0E3F\\u17DB\\u20A0-\\u20B9\\uA838\\uFDFC\\uFE69\\uFF04\\uFFE0\\uFFE1\\uFFE5\\uFFE6\";\nvar pSc = \"[\".concat(_pSc, \"]\");\nvar pSc_regexp = new RegExp(pSc);\nvar _pMn = \"\\u0300-\\u036F\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08E4-\\u08FE\\u0900-\\u0902\\u093A\\u093C\\u0941-\\u0948\\u094D\\u0951-\\u0957\\u0962\\u0963\\u0981\\u09BC\\u09C1-\\u09C4\\u09CD\\u09E2\\u09E3\\u0A01\\u0A02\\u0A3C\\u0A41\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81\\u0A82\\u0ABC\\u0AC1-\\u0AC5\\u0AC7\\u0AC8\\u0ACD\\u0AE2\\u0AE3\\u0B01\\u0B3C\\u0B3F\\u0B41-\\u0B44\\u0B4D\\u0B56\\u0B62\\u0B63\\u0B82\\u0BC0\\u0BCD\\u0C3E-\\u0C40\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0CBC\\u0CBF\\u0CC6\\u0CCC\\u0CCD\\u0CE2\\u0CE3\\u0D41-\\u0D44\\u0D4D\\u0D62\\u0D63\\u0DCA\\u0DD2-\\u0DD4\\u0DD6\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F71-\\u0F7E\\u0F80-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102D-\\u1030\\u1032-\\u1037\\u1039\\u103A\\u103D\\u103E\\u1058\\u1059\\u105E-\\u1060\\u1071-\\u1074\\u1082\\u1085\\u1086\\u108D\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4\\u17B5\\u17B7-\\u17BD\\u17C6\\u17C9-\\u17D3\\u17DD\\u180B-\\u180D\\u18A9\\u1920-\\u1922\\u1927\\u1928\\u1932\\u1939-\\u193B\\u1A17\\u1A18\\u1A56\\u1A58-\\u1A5E\\u1A60\\u1A62\\u1A65-\\u1A6C\\u1A73-\\u1A7C\\u1A7F\\u1B00-\\u1B03\\u1B34\\u1B36-\\u1B3A\\u1B3C\\u1B42\\u1B6B-\\u1B73\\u1B80\\u1B81\\u1BA2-\\u1BA5\\u1BA8\\u1BA9\\u1BAB\\u1BE6\\u1BE8\\u1BE9\\u1BED\\u1BEF-\\u1BF1\\u1C2C-\\u1C33\\u1C36\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1CF4\\u1DC0-\\u1DE6\\u1DFC-\\u1DFF\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302D\\u3099\\u309A\\uA66F\\uA674-\\uA67D\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA825\\uA826\\uA8C4\\uA8E0-\\uA8F1\\uA926-\\uA92D\\uA947-\\uA951\\uA980-\\uA982\\uA9B3\\uA9B6-\\uA9B9\\uA9BC\\uAA29-\\uAA2E\\uAA31\\uAA32\\uAA35\\uAA36\\uAA43\\uAA4C\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEC\\uAAED\\uAAF6\\uABE5\\uABE8\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE26\";\nvar pMn = \"[\".concat(_pMn, \"]\");\nvar pMn_regexp = new RegExp(pMn);\nvar _InBasic_Latin = \"\\0-\\x7F\";\nvar _InLatin_1_Supplement = \"\\x80-\\xFF\";\nvar _InLatin_Extended_A = \"\\u0100-\\u017F\";\nvar _InLatin_Extended_Additional = \"\\u1E00-\\u1EFF\";\nvar _InLatin_Extended_B = \"\\u0180-\\u024F\";\nvar _InCombining_Diacritical_Marks = \"\\u0300-\\u036F\";\nvar latinLetterRegexp = new RegExp('[' + _InBasic_Latin + _InLatin_1_Supplement + _InLatin_Extended_A + _InLatin_Extended_Additional + _InLatin_Extended_B + _InCombining_Diacritical_Marks + ']');\n/**\r\n * Helper method to determine if a character is a Latin-script letter or not.\r\n * For our purposes, combining marks should also return true since we assume\r\n * they have been added to a preceding Latin character.\r\n */\n\nexport function isLatinLetter(letter) {\n  // Combining marks are a subset of non-spacing-mark.\n  if (!pL_regexp.test(letter) && !pMn_regexp.test(letter)) {\n    return false;\n  }\n\n  return latinLetterRegexp.test(letter);\n}\nexport function isInvalidPunctuationSymbol(character) {\n  return character === '%' || pSc_regexp.test(character);\n}\n//# sourceMappingURL=utf-8.js.map","import isValidNumber from '../validate_';\nimport parseDigits from '../parseDigits';\nimport { startsWith, endsWith } from './util';\n/**\r\n * Leniency when finding potential phone numbers in text segments\r\n * The levels here are ordered in increasing strictness.\r\n */\n\nexport default {\n  /**\r\n   * Phone numbers accepted are \"possible\", but not necessarily \"valid\".\r\n   */\n  POSSIBLE: function POSSIBLE(number, candidate, metadata) {\n    return true;\n  },\n\n  /**\r\n   * Phone numbers accepted are \"possible\" and \"valid\".\r\n   * Numbers written in national format must have their national-prefix\r\n   * present if it is usually written for a number of this type.\r\n   */\n  VALID: function VALID(number, candidate, metadata) {\n    if (!isValidNumber(number, undefined, metadata) || !containsOnlyValidXChars(number, candidate.toString(), metadata)) {\n      return false;\n    } // Skipped for simplicity.\n    // return isNationalPrefixPresentIfRequired(number, metadata)\n\n\n    return true;\n  },\n\n  /**\r\n   * Phone numbers accepted are \"valid\" and\r\n   * are grouped in a possible way for this locale. For example, a US number written as\r\n   * \"65 02 53 00 00\" and \"650253 0000\" are not accepted at this leniency level, whereas\r\n   * \"650 253 0000\", \"650 2530000\" or \"6502530000\" are.\r\n   * Numbers with more than one '/' symbol in the national significant number\r\n   * are also dropped at this level.\r\n   *\r\n   * Warning: This level might result in lower coverage especially for regions outside of\r\n   * country code \"+1\". If you are not sure about which level to use,\r\n   * email the discussion group libphonenumber-discuss@googlegroups.com.\r\n   */\n  STRICT_GROUPING: function STRICT_GROUPING(number, candidate, metadata, regExpCache) {\n    var candidateString = candidate.toString();\n\n    if (!isValidNumber(number, undefined, metadata) || !containsOnlyValidXChars(number, candidateString, metadata) || containsMoreThanOneSlashInNationalNumber(number, candidateString) || !isNationalPrefixPresentIfRequired(number, metadata)) {\n      return false;\n    }\n\n    return checkNumberGroupingIsValid(number, candidate, metadata, allNumberGroupsRemainGrouped, regExpCache);\n  },\n\n  /**\r\n   * Phone numbers accepted are {@linkplain PhoneNumberUtil#isValidNumber(PhoneNumber) valid} and\r\n   * are grouped in the same way that we would have formatted it, or as a single block. For\r\n   * example, a US number written as \"650 2530000\" is not accepted at this leniency level, whereas\r\n   * \"650 253 0000\" or \"6502530000\" are.\r\n   * Numbers with more than one '/' symbol are also dropped at this level.\r\n   * <p>\r\n   * Warning: This level might result in lower coverage especially for regions outside of country\r\n   * code \"+1\". If you are not sure about which level to use, email the discussion group\r\n   * libphonenumber-discuss@googlegroups.com.\r\n   */\n  EXACT_GROUPING: function EXACT_GROUPING(number, candidate, metadata, regExpCache) {\n    var candidateString = candidate.toString();\n\n    if (!isValidNumber(number, undefined, metadata) || !containsOnlyValidXChars(number, candidateString, metadata) || containsMoreThanOneSlashInNationalNumber(number, candidateString) || !isNationalPrefixPresentIfRequired(number, metadata)) {\n      return false;\n    }\n\n    return checkNumberGroupingIsValid(number, candidate, metadata, allNumberGroupsAreExactlyPresent, regExpCache);\n  }\n};\n\nfunction containsOnlyValidXChars(number, candidate, metadata) {\n  // The characters 'x' and 'X' can be (1) a carrier code, in which case they always precede the\n  // national significant number or (2) an extension sign, in which case they always precede the\n  // extension number. We assume a carrier code is more than 1 digit, so the first case has to\n  // have more than 1 consecutive 'x' or 'X', whereas the second case can only have exactly 1 'x'\n  // or 'X'. We ignore the character if it appears as the last character of the string.\n  for (var index = 0; index < candidate.length - 1; index++) {\n    var charAtIndex = candidate.charAt(index);\n\n    if (charAtIndex === 'x' || charAtIndex === 'X') {\n      var charAtNextIndex = candidate.charAt(index + 1);\n\n      if (charAtNextIndex === 'x' || charAtNextIndex === 'X') {\n        // This is the carrier code case, in which the 'X's always precede the national\n        // significant number.\n        index++;\n\n        if (util.isNumberMatch(number, candidate.substring(index)) != MatchType.NSN_MATCH) {\n          return false;\n        } // This is the extension sign case, in which the 'x' or 'X' should always precede the\n        // extension number.\n\n      } else if (parseDigits(candidate.substring(index)) !== number.ext) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction isNationalPrefixPresentIfRequired(number, _metadata) {\n  // First, check how we deduced the country code. If it was written in international format, then\n  // the national prefix is not required.\n  if (number.getCountryCodeSource() != 'FROM_DEFAULT_COUNTRY') {\n    return true;\n  }\n\n  var phoneNumberRegion = util.getRegionCodeForCountryCode(number.getCountryCode());\n  var metadata = util.getMetadataForRegion(phoneNumberRegion);\n\n  if (metadata == null) {\n    return true;\n  } // Check if a national prefix should be present when formatting this number.\n\n\n  var nationalNumber = util.getNationalSignificantNumber(number);\n  var formatRule = util.chooseFormattingPatternForNumber(metadata.numberFormats(), nationalNumber); // To do this, we check that a national prefix formatting rule was present\n  // and that it wasn't just the first-group symbol ($1) with punctuation.\n\n  if (formatRule && formatRule.getNationalPrefixFormattingRule().length > 0) {\n    if (formatRule.getNationalPrefixOptionalWhenFormatting()) {\n      // The national-prefix is optional in these cases, so we don't need to check if it was\n      // present.\n      return true;\n    }\n\n    if (PhoneNumberUtil.formattingRuleHasFirstGroupOnly(formatRule.getNationalPrefixFormattingRule())) {\n      // National Prefix not needed for this number.\n      return true;\n    } // Normalize the remainder.\n\n\n    var rawInputCopy = PhoneNumberUtil.normalizeDigitsOnly(number.getRawInput()); // Check if we found a national prefix and/or carrier code at the start of the raw input, and\n    // return the result.\n\n    return util.maybeStripNationalPrefixAndCarrierCode(rawInputCopy, metadata, null);\n  }\n\n  return true;\n}\n\nexport function containsMoreThanOneSlashInNationalNumber(number, candidate) {\n  var firstSlashInBodyIndex = candidate.indexOf('/');\n\n  if (firstSlashInBodyIndex < 0) {\n    // No slashes, this is okay.\n    return false;\n  } // Now look for a second one.\n\n\n  var secondSlashInBodyIndex = candidate.indexOf('/', firstSlashInBodyIndex + 1);\n\n  if (secondSlashInBodyIndex < 0) {\n    // Only one slash, this is okay.\n    return false;\n  } // If the first slash is after the country calling code, this is permitted.\n\n\n  var candidateHasCountryCode = number.getCountryCodeSource() === CountryCodeSource.FROM_NUMBER_WITH_PLUS_SIGN || number.getCountryCodeSource() === CountryCodeSource.FROM_NUMBER_WITHOUT_PLUS_SIGN;\n\n  if (candidateHasCountryCode && PhoneNumberUtil.normalizeDigitsOnly(candidate.substring(0, firstSlashInBodyIndex)) === String(number.getCountryCode())) {\n    // Any more slashes and this is illegal.\n    return candidate.slice(secondSlashInBodyIndex + 1).indexOf('/') >= 0;\n  }\n\n  return true;\n}\n\nfunction checkNumberGroupingIsValid(number, candidate, metadata, checkGroups, regExpCache) {\n  var normalizedCandidate = normalizeDigits(candidate, true\n  /* keep non-digits */\n  );\n  var formattedNumberGroups = getNationalNumberGroups(metadata, number, null);\n\n  if (checkGroups(metadata, number, normalizedCandidate, formattedNumberGroups)) {\n    return true;\n  } // If this didn't pass, see if there are any alternate formats that match, and try them instead.\n\n\n  var alternateFormats = MetadataManager.getAlternateFormatsForCountry(number.getCountryCode());\n  var nationalSignificantNumber = util.getNationalSignificantNumber(number);\n\n  if (alternateFormats) {\n    for (var _iterator = alternateFormats.numberFormats(), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var alternateFormat = _ref;\n\n      if (alternateFormat.leadingDigitsPatterns().length > 0) {\n        // There is only one leading digits pattern for alternate formats.\n        var leadingDigitsRegExp = regExpCache.getPatternForRegExp('^' + alternateFormat.leadingDigitsPatterns()[0]);\n\n        if (!leadingDigitsRegExp.test(nationalSignificantNumber)) {\n          // Leading digits don't match; try another one.\n          continue;\n        }\n      }\n\n      formattedNumberGroups = getNationalNumberGroups(metadata, number, alternateFormat);\n\n      if (checkGroups(metadata, number, normalizedCandidate, formattedNumberGroups)) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n/**\r\n * Helper method to get the national-number part of a number, formatted without any national\r\n * prefix, and return it as a set of digit blocks that would be formatted together following\r\n * standard formatting rules.\r\n */\n\n\nfunction getNationalNumberGroups(metadata, number, formattingPattern) {\n  if (formattingPattern) {\n    // We format the NSN only, and split that according to the separator.\n    var nationalSignificantNumber = util.getNationalSignificantNumber(number);\n    return util.formatNsnUsingPattern(nationalSignificantNumber, formattingPattern, 'RFC3966', metadata).split('-');\n  } // This will be in the format +CC-DG1-DG2-DGX;ext=EXT where DG1..DGX represents groups of digits.\n\n\n  var rfc3966Format = formatNumber(number, 'RFC3966', metadata); // We remove the extension part from the formatted string before splitting it into different\n  // groups.\n\n  var endIndex = rfc3966Format.indexOf(';');\n\n  if (endIndex < 0) {\n    endIndex = rfc3966Format.length;\n  } // The country-code will have a '-' following it.\n\n\n  var startIndex = rfc3966Format.indexOf('-') + 1;\n  return rfc3966Format.slice(startIndex, endIndex).split('-');\n}\n\nfunction allNumberGroupsAreExactlyPresent(metadata, number, normalizedCandidate, formattedNumberGroups) {\n  var candidateGroups = normalizedCandidate.split(NON_DIGITS_PATTERN); // Set this to the last group, skipping it if the number has an extension.\n\n  var candidateNumberGroupIndex = number.hasExtension() ? candidateGroups.length - 2 : candidateGroups.length - 1; // First we check if the national significant number is formatted as a block.\n  // We use contains and not equals, since the national significant number may be present with\n  // a prefix such as a national number prefix, or the country code itself.\n\n  if (candidateGroups.length == 1 || candidateGroups[candidateNumberGroupIndex].contains(util.getNationalSignificantNumber(number))) {\n    return true;\n  } // Starting from the end, go through in reverse, excluding the first group, and check the\n  // candidate and number groups are the same.\n\n\n  var formattedNumberGroupIndex = formattedNumberGroups.length - 1;\n\n  while (formattedNumberGroupIndex > 0 && candidateNumberGroupIndex >= 0) {\n    if (candidateGroups[candidateNumberGroupIndex] !== formattedNumberGroups[formattedNumberGroupIndex]) {\n      return false;\n    }\n\n    formattedNumberGroupIndex--;\n    candidateNumberGroupIndex--;\n  } // Now check the first group. There may be a national prefix at the start, so we only check\n  // that the candidate group ends with the formatted number group.\n\n\n  return candidateNumberGroupIndex >= 0 && endsWith(candidateGroups[candidateNumberGroupIndex], formattedNumberGroups[0]);\n}\n\nfunction allNumberGroupsRemainGrouped(metadata, number, normalizedCandidate, formattedNumberGroups) {\n  var fromIndex = 0;\n\n  if (number.getCountryCodeSource() !== CountryCodeSource.FROM_DEFAULT_COUNTRY) {\n    // First skip the country code if the normalized candidate contained it.\n    var countryCode = String(number.getCountryCode());\n    fromIndex = normalizedCandidate.indexOf(countryCode) + countryCode.length();\n  } // Check each group of consecutive digits are not broken into separate groupings in the\n  // {@code normalizedCandidate} string.\n\n\n  for (var i = 0; i < formattedNumberGroups.length; i++) {\n    // Fails if the substring of {@code normalizedCandidate} starting from {@code fromIndex}\n    // doesn't contain the consecutive digits in formattedNumberGroups[i].\n    fromIndex = normalizedCandidate.indexOf(formattedNumberGroups[i], fromIndex);\n\n    if (fromIndex < 0) {\n      return false;\n    } // Moves {@code fromIndex} forward.\n\n\n    fromIndex += formattedNumberGroups[i].length();\n\n    if (i == 0 && fromIndex < normalizedCandidate.length()) {\n      // We are at the position right after the NDC. We get the region used for formatting\n      // information based on the country code in the phone number, rather than the number itself,\n      // as we do not need to distinguish between different countries with the same country\n      // calling code and this is faster.\n      var region = util.getRegionCodeForCountryCode(number.getCountryCode());\n\n      if (util.getNddPrefixForRegion(region, true) != null && Character.isDigit(normalizedCandidate.charAt(fromIndex))) {\n        // This means there is no formatting symbol after the NDC. In this case, we only\n        // accept the number if there is no formatting symbol at all in the number, except\n        // for extensions. This is only important for countries with national prefixes.\n        var nationalSignificantNumber = util.getNationalSignificantNumber(number);\n        return startsWith(normalizedCandidate.slice(fromIndex - formattedNumberGroups[i].length), nationalSignificantNumber);\n      }\n    }\n  } // The check here makes sure that we haven't mistakenly already used the extension to\n  // match the last group of the subscriber number. Note the extension cannot have\n  // formatting in-between digits.\n\n\n  return normalizedCandidate.slice(fromIndex).contains(number.getExtension());\n}\n//# sourceMappingURL=Leniency.js.map","import { trimAfterFirstMatch } from './util'; // Regular expression of characters typically used to start a second phone number for the purposes\n// of parsing. This allows us to strip off parts of the number that are actually the start of\n// another number, such as for: (530) 583-6985 x302/x2303 -> the second extension here makes this\n// actually two phone numbers, (530) 583-6985 x302 and (530) 583-6985 x2303. We remove the second\n// extension so that the first number is parsed correctly.\n//\n// Matches a slash (\\ or /) followed by a space followed by an `x`.\n//\n\nvar SECOND_NUMBER_START_PATTERN = /[\\\\/] *x/;\nexport default function parsePreCandidate(candidate) {\n  // Check for extra numbers at the end.\n  // TODO: This is the place to start when trying to support extraction of multiple phone number\n  // from split notations (+41 79 123 45 67 / 68).\n  return trimAfterFirstMatch(SECOND_NUMBER_START_PATTERN, candidate);\n}\n//# sourceMappingURL=parsePreCandidate.js.map","// Matches strings that look like dates using \"/\" as a separator.\n// Examples: 3/10/2011, 31/10/96 or 08/31/95.\nvar SLASH_SEPARATED_DATES = /(?:(?:[0-3]?\\d\\/[01]?\\d)|(?:[01]?\\d\\/[0-3]?\\d))\\/(?:[12]\\d)?\\d{2}/; // Matches timestamps.\n// Examples: \"2012-01-02 08:00\".\n// Note that the reg-ex does not include the\n// trailing \":\\d\\d\" -- that is covered by TIME_STAMPS_SUFFIX.\n\nvar TIME_STAMPS = /[12]\\d{3}[-/]?[01]\\d[-/]?[0-3]\\d +[0-2]\\d$/;\nvar TIME_STAMPS_SUFFIX_LEADING = /^:[0-5]\\d/;\nexport default function isValidPreCandidate(candidate, offset, text) {\n  // Skip a match that is more likely to be a date.\n  if (SLASH_SEPARATED_DATES.test(candidate)) {\n    return false;\n  } // Skip potential time-stamps.\n\n\n  if (TIME_STAMPS.test(candidate)) {\n    var followingText = text.slice(offset + candidate.length);\n\n    if (TIME_STAMPS_SUFFIX_LEADING.test(followingText)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n//# sourceMappingURL=isValidPreCandidate.js.map","// Copy-pasted from `PhoneNumberMatcher.js`.\nimport { PLUS_CHARS } from '../constants';\nimport { limit } from './util';\nimport { isLatinLetter, isInvalidPunctuationSymbol } from './utf-8';\nvar OPENING_PARENS = \"(\\\\[\\uFF08\\uFF3B\";\nvar CLOSING_PARENS = \")\\\\]\\uFF09\\uFF3D\";\nvar NON_PARENS = \"[^\".concat(OPENING_PARENS).concat(CLOSING_PARENS, \"]\");\nexport var LEAD_CLASS = \"[\".concat(OPENING_PARENS).concat(PLUS_CHARS, \"]\"); // Punctuation that may be at the start of a phone number - brackets and plus signs.\n\nvar LEAD_CLASS_LEADING = new RegExp('^' + LEAD_CLASS); // Limit on the number of pairs of brackets in a phone number.\n\nvar BRACKET_PAIR_LIMIT = limit(0, 3);\n/**\r\n * Pattern to check that brackets match. Opening brackets should be closed within a phone number.\r\n * This also checks that there is something inside the brackets. Having no brackets at all is also\r\n * fine.\r\n *\r\n * An opening bracket at the beginning may not be closed, but subsequent ones should be.  It's\r\n * also possible that the leading bracket was dropped, so we shouldn't be surprised if we see a\r\n * closing bracket first. We limit the sets of brackets in a phone number to four.\r\n */\n\nvar MATCHING_BRACKETS_ENTIRE = new RegExp('^' + \"(?:[\" + OPENING_PARENS + \"])?\" + \"(?:\" + NON_PARENS + \"+\" + \"[\" + CLOSING_PARENS + \"])?\" + NON_PARENS + \"+\" + \"(?:[\" + OPENING_PARENS + \"]\" + NON_PARENS + \"+[\" + CLOSING_PARENS + \"])\" + BRACKET_PAIR_LIMIT + NON_PARENS + \"*\" + '$');\n/**\r\n * Matches strings that look like publication pages. Example:\r\n * <pre>Computing Complete Answers to Queries in the Presence of Limited Access Patterns.\r\n * Chen Li. VLDB J. 12(3): 211-227 (2003).</pre>\r\n *\r\n * The string \"211-227 (2003)\" is not a telephone number.\r\n */\n\nvar PUB_PAGES = /\\d{1,5}-+\\d{1,5}\\s{0,4}\\(\\d{1,4}/;\nexport default function isValidCandidate(candidate, offset, text, leniency) {\n  // Check the candidate doesn't contain any formatting\n  // which would indicate that it really isn't a phone number.\n  if (!MATCHING_BRACKETS_ENTIRE.test(candidate) || PUB_PAGES.test(candidate)) {\n    return;\n  } // If leniency is set to VALID or stricter, we also want to skip numbers that are surrounded\n  // by Latin alphabetic characters, to skip cases like abc8005001234 or 8005001234def.\n\n\n  if (leniency !== 'POSSIBLE') {\n    // If the candidate is not at the start of the text,\n    // and does not start with phone-number punctuation,\n    // check the previous character.\n    if (offset > 0 && !LEAD_CLASS_LEADING.test(candidate)) {\n      var previousChar = text[offset - 1]; // We return null if it is a latin letter or an invalid punctuation symbol.\n\n      if (isInvalidPunctuationSymbol(previousChar) || isLatinLetter(previousChar)) {\n        return false;\n      }\n    }\n\n    var lastCharIndex = offset + candidate.length;\n\n    if (lastCharIndex < text.length) {\n      var nextChar = text[lastCharIndex];\n\n      if (isInvalidPunctuationSymbol(nextChar) || isLatinLetter(nextChar)) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n//# sourceMappingURL=isValidCandidate.js.map","function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\r\n * A port of Google's `PhoneNumberMatcher.java`.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberMatcher.java\r\n * Date: 08.03.2018.\r\n */\nimport PhoneNumber from './PhoneNumber';\nimport { MAX_LENGTH_FOR_NSN, MAX_LENGTH_COUNTRY_CODE, VALID_PUNCTUATION } from './constants';\nimport { EXTN_PATTERNS_FOR_MATCHING } from './extension';\nimport RegExpCache from './findNumbers/RegExpCache';\nimport { limit, trimAfterFirstMatch } from './findNumbers/util';\nimport { _pL, _pN, pZ, PZ, pNd } from './findNumbers/utf-8';\nimport Leniency from './findNumbers/Leniency';\nimport parsePreCandidate from './findNumbers/parsePreCandidate';\nimport isValidPreCandidate from './findNumbers/isValidPreCandidate';\nimport isValidCandidate, { LEAD_CLASS } from './findNumbers/isValidCandidate';\nimport { isSupportedCountry } from './metadata';\nimport parseNumber from './parse_';\n/**\r\n * Patterns used to extract phone numbers from a larger phone-number-like pattern. These are\r\n * ordered according to specificity. For example, white-space is last since that is frequently\r\n * used in numbers, not just to separate two numbers. We have separate patterns since we don't\r\n * want to break up the phone-number-like text on more than one different kind of symbol at one\r\n * time, although symbols of the same type (e.g. space) can be safely grouped together.\r\n *\r\n * Note that if there is a match, we will always check any text found up to the first match as\r\n * well.\r\n */\n\nvar INNER_MATCHES = [// Breaks on the slash - e.g. \"651-234-2345/332-445-1234\"\n'\\\\/+(.*)/', // Note that the bracket here is inside the capturing group, since we consider it part of the\n// phone number. Will match a pattern like \"(650) 223 3345 (754) 223 3321\".\n'(\\\\([^(]*)', // Breaks on a hyphen - e.g. \"12345 - 332-445-1234 is my number.\"\n// We require a space on either side of the hyphen for it to be considered a separator.\n\"(?:\".concat(pZ, \"-|-\").concat(pZ, \")\").concat(pZ, \"*(.+)\"), // Various types of wide hyphens. Note we have decided not to enforce a space here, since it's\n// possible that it's supposed to be used to break two numbers without spaces, and we haven't\n// seen many instances of it used within a number.\n\"[\\u2012-\\u2015\\uFF0D]\".concat(pZ, \"*(.+)\"), // Breaks on a full stop - e.g. \"12345. 332-445-1234 is my number.\"\n\"\\\\.+\".concat(pZ, \"*([^.]+)\"), // Breaks on space - e.g. \"3324451234 8002341234\"\n\"\".concat(pZ, \"+(\").concat(PZ, \"+)\")]; // Limit on the number of leading (plus) characters.\n\nvar leadLimit = limit(0, 2); // Limit on the number of consecutive punctuation characters.\n\nvar punctuationLimit = limit(0, 4);\n/* The maximum number of digits allowed in a digit-separated block. As we allow all digits in a\r\n * single block, set high enough to accommodate the entire national number and the international\r\n * country code. */\n\nvar digitBlockLimit = MAX_LENGTH_FOR_NSN + MAX_LENGTH_COUNTRY_CODE; // Limit on the number of blocks separated by punctuation.\n// Uses digitBlockLimit since some formats use spaces to separate each digit.\n\nvar blockLimit = limit(0, digitBlockLimit);\n/* A punctuation sequence allowing white space. */\n\nvar punctuation = \"[\".concat(VALID_PUNCTUATION, \"]\") + punctuationLimit; // A digits block without punctuation.\n\nvar digitSequence = pNd + limit(1, digitBlockLimit);\n/**\r\n * Phone number pattern allowing optional punctuation.\r\n * The phone number pattern used by `find()`, similar to\r\n * VALID_PHONE_NUMBER, but with the following differences:\r\n * <ul>\r\n *   <li>All captures are limited in order to place an upper bound to the text matched by the\r\n *       pattern.\r\n * <ul>\r\n *   <li>Leading punctuation / plus signs are limited.\r\n *   <li>Consecutive occurrences of punctuation are limited.\r\n *   <li>Number of digits is limited.\r\n * </ul>\r\n *   <li>No whitespace is allowed at the start or end.\r\n *   <li>No alpha digits (vanity numbers such as 1-800-SIX-FLAGS) are currently supported.\r\n * </ul>\r\n */\n\nvar PATTERN = '(?:' + LEAD_CLASS + punctuation + ')' + leadLimit + digitSequence + '(?:' + punctuation + digitSequence + ')' + blockLimit + '(?:' + EXTN_PATTERNS_FOR_MATCHING + ')?'; // Regular expression of trailing characters that we want to remove.\n// We remove all characters that are not alpha or numerical characters.\n// The hash character is retained here, as it may signify\n// the previous block was an extension.\n//\n// // Don't know what does '&&' mean here.\n// const UNWANTED_END_CHAR_PATTERN = new RegExp(`[[\\\\P{N}&&\\\\P{L}]&&[^#]]+$`)\n//\n\nvar UNWANTED_END_CHAR_PATTERN = new RegExp(\"[^\".concat(_pN).concat(_pL, \"#]+$\"));\nvar NON_DIGITS_PATTERN = /(\\D+)/;\nvar MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;\n/**\r\n * A stateful class that finds and extracts telephone numbers from {@linkplain CharSequence text}.\r\n * Instances can be created using the {@linkplain PhoneNumberUtil#findNumbers factory methods} in\r\n * {@link PhoneNumberUtil}.\r\n *\r\n * <p>Vanity numbers (phone numbers using alphabetic digits such as <tt>1-800-SIX-FLAGS</tt> are\r\n * not found.\r\n *\r\n * <p>This class is not thread-safe.\r\n */\n\nvar PhoneNumberMatcher =\n/*#__PURE__*/\nfunction () {\n  /** The iteration tristate. */\n\n  /** The next index to start searching at. Undefined in {@link State#DONE}. */\n  // A cache for frequently used country-specific regular expressions. Set to 32 to cover ~2-3\n  // countries being used for the same doc with ~10 patterns for each country. Some pages will have\n  // a lot more countries in use, but typically fewer numbers for each so expanding the cache for\n  // that use-case won't have a lot of benefit.\n\n  /**\r\n   * Creates a new instance. See the factory methods in {@link PhoneNumberUtil} on how to obtain a\r\n   * new instance.\r\n   *\r\n   * @param util  the phone number util to use\r\n   * @param text  the character sequence that we will search, null for no text\r\n   * @param country  the country to assume for phone numbers not written in international format\r\n   *     (with a leading plus, or with the international dialing prefix of the specified region).\r\n   *     May be null or \"ZZ\" if only numbers with a leading plus should be\r\n   *     considered.\r\n   * @param leniency  the leniency to use when evaluating candidate phone numbers\r\n   * @param maxTries  the maximum number of invalid numbers to try before giving up on the text.\r\n   *     This is to cover degenerate cases where the text has a lot of false positives in it. Must\r\n   *     be {@code >= 0}.\r\n   */\n  function PhoneNumberMatcher() {\n    var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var metadata = arguments.length > 2 ? arguments[2] : undefined;\n\n    _classCallCheck(this, PhoneNumberMatcher);\n\n    _defineProperty(this, \"state\", 'NOT_READY');\n\n    _defineProperty(this, \"searchIndex\", 0);\n\n    _defineProperty(this, \"regExpCache\", new RegExpCache(32));\n\n    options = _objectSpread({}, options, {\n      defaultCallingCode: options.defaultCallingCode,\n      defaultCountry: options.defaultCountry && isSupportedCountry(options.defaultCountry, metadata) ? options.defaultCountry : undefined,\n      leniency: options.leniency || options.extended ? 'POSSIBLE' : 'VALID',\n      maxTries: options.maxTries || MAX_SAFE_INTEGER\n    });\n\n    if (!options.leniency) {\n      throw new TypeError('`Leniency` not supplied');\n    }\n\n    if (options.maxTries < 0) {\n      throw new TypeError('`maxTries` not supplied');\n    }\n\n    this.text = text;\n    this.options = options;\n    this.metadata = metadata;\n    /** The degree of validation requested. */\n\n    this.leniency = Leniency[options.leniency];\n\n    if (!this.leniency) {\n      throw new TypeError(\"Unknown leniency: \".concat(options.leniency, \".\"));\n    }\n    /** The maximum number of retries after matching an invalid number. */\n\n\n    this.maxTries = options.maxTries;\n    this.PATTERN = new RegExp(PATTERN, 'ig');\n  }\n  /**\r\n   * Attempts to find the next subsequence in the searched sequence on or after {@code searchIndex}\r\n   * that represents a phone number. Returns the next match, null if none was found.\r\n   *\r\n   * @param index  the search index to start searching at\r\n   * @return  the phone number match found, null if none can be found\r\n   */\n\n\n  _createClass(PhoneNumberMatcher, [{\n    key: \"find\",\n    value: function find() // (index)\n    {\n      // // Reset the regular expression.\n      // this.PATTERN.lastIndex = index\n      var matches;\n\n      while (this.maxTries > 0 && (matches = this.PATTERN.exec(this.text)) !== null) {\n        var candidate = matches[0];\n        var offset = matches.index;\n        candidate = parsePreCandidate(candidate);\n\n        if (isValidPreCandidate(candidate, offset, this.text)) {\n          var match = // Try to come up with a valid match given the entire candidate.\n          this.parseAndVerify(candidate, offset, this.text) // If that failed, try to find an \"inner match\" -\n          // there might be a phone number within this candidate.\n          || this.extractInnerMatch(candidate, offset, this.text);\n\n          if (match) {\n            if (this.options.v2) {\n              var phoneNumber = new PhoneNumber(match.country || match.countryCallingCode, match.phone, this.metadata);\n\n              if (match.ext) {\n                phoneNumber.ext = match.ext;\n              }\n\n              return {\n                startsAt: match.startsAt,\n                endsAt: match.endsAt,\n                number: phoneNumber\n              };\n            }\n\n            return match;\n          }\n        }\n\n        this.maxTries--;\n      }\n    }\n    /**\r\n     * Attempts to extract a match from `candidate`\r\n     * if the whole candidate does not qualify as a match.\r\n     */\n\n  }, {\n    key: \"extractInnerMatch\",\n    value: function extractInnerMatch(candidate, offset, text) {\n      for (var _i = 0, _INNER_MATCHES = INNER_MATCHES; _i < _INNER_MATCHES.length; _i++) {\n        var innerMatchPattern = _INNER_MATCHES[_i];\n        var isFirstMatch = true;\n        var matches = void 0;\n        var possibleInnerMatch = new RegExp(innerMatchPattern, 'g');\n\n        while ((matches = possibleInnerMatch.exec(candidate)) !== null && this.maxTries > 0) {\n          if (isFirstMatch) {\n            // We should handle any group before this one too.\n            var _group = trimAfterFirstMatch(UNWANTED_END_CHAR_PATTERN, candidate.slice(0, matches.index));\n\n            var _match = this.parseAndVerify(_group, offset, text);\n\n            if (_match) {\n              return _match;\n            }\n\n            this.maxTries--;\n            isFirstMatch = false;\n          }\n\n          var group = trimAfterFirstMatch(UNWANTED_END_CHAR_PATTERN, matches[1]); // Java code does `groupMatcher.start(1)` here,\n          // but there's no way in javascript to get a group match start index,\n          // therefore using the overall match start index `matches.index`.\n\n          var match = this.parseAndVerify(group, offset + matches.index, text);\n\n          if (match) {\n            return match;\n          }\n\n          this.maxTries--;\n        }\n      }\n    }\n    /**\r\n     * Parses a phone number from the `candidate` using `parseNumber` and\r\n     * verifies it matches the requested `leniency`. If parsing and verification succeed,\r\n     * a corresponding `PhoneNumberMatch` is returned, otherwise this method returns `null`.\r\n     *\r\n     * @param candidate  the candidate match\r\n     * @param offset  the offset of {@code candidate} within {@link #text}\r\n     * @return  the parsed and validated phone number match, or null\r\n     */\n\n  }, {\n    key: \"parseAndVerify\",\n    value: function parseAndVerify(candidate, offset, text) {\n      if (!isValidCandidate(candidate, offset, text, this.options.leniency)) {\n        return;\n      }\n\n      var number = parseNumber(candidate, {\n        extended: true,\n        defaultCountry: this.options.defaultCountry,\n        defaultCallingCode: this.options.defaultCallingCode\n      }, this.metadata);\n\n      if (!number.possible) {\n        return;\n      }\n\n      if (this.leniency(number, candidate, this.metadata, this.regExpCache)) {\n        // // We used parseAndKeepRawInput to create this number,\n        // // but for now we don't return the extra values parsed.\n        // // TODO: stop clearing all values here and switch all users over\n        // // to using rawInput() rather than the rawString() of PhoneNumberMatch.\n        // number.clearCountryCodeSource()\n        // number.clearRawInput()\n        // number.clearPreferredDomesticCarrierCode()\n        var result = {\n          startsAt: offset,\n          endsAt: offset + candidate.length,\n          phone: number.phone\n        };\n\n        if (number.country && number.country !== '001') {\n          result.country = number.country;\n        } else {\n          result.countryCallingCode = number.countryCallingCode;\n        }\n\n        if (number.ext) {\n          result.ext = number.ext;\n        }\n\n        return result;\n      }\n    }\n  }, {\n    key: \"hasNext\",\n    value: function hasNext() {\n      if (this.state === 'NOT_READY') {\n        this.lastMatch = this.find(); // (this.searchIndex)\n\n        if (this.lastMatch) {\n          // this.searchIndex = this.lastMatch.endsAt\n          this.state = 'READY';\n        } else {\n          this.state = 'DONE';\n        }\n      }\n\n      return this.state === 'READY';\n    }\n  }, {\n    key: \"next\",\n    value: function next() {\n      // Check the state and find the next match as a side-effect if necessary.\n      if (!this.hasNext()) {\n        throw new Error('No next element');\n      } // Don't retain that memory any longer than necessary.\n\n\n      var result = this.lastMatch;\n      this.lastMatch = null;\n      this.state = 'NOT_READY';\n      return result;\n    }\n  }]);\n\n  return PhoneNumberMatcher;\n}();\n\nexport { PhoneNumberMatcher as default };\n//# sourceMappingURL=PhoneNumberMatcher.js.map","// This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\nimport { VALID_DIGITS, PLUS_CHARS, MIN_LENGTH_FOR_NSN, MAX_LENGTH_FOR_NSN, MAX_LENGTH_COUNTRY_CODE } from './constants';\nimport { matchesEntirely } from './util';\nimport ParseError from './ParseError';\nimport Metadata from './metadata';\nimport isViablePhoneNumber from './isViablePhoneNumber';\nimport { extractExtension } from './extension';\nimport parseIncompletePhoneNumber from './parseIncompletePhoneNumber';\nimport getCountryCallingCode from './getCountryCallingCode';\nimport getNumberType, { checkNumberLengthForType } from './getNumberType_';\nimport { isPossibleNumber } from './isPossibleNumber_';\nimport { stripIDDPrefix } from './IDD';\nimport { parseRFC3966 } from './RFC3966';\nimport PhoneNumber from './PhoneNumber'; // We don't allow input strings for parsing to be longer than 250 chars.\n// This prevents malicious input from consuming CPU.\n\nvar MAX_INPUT_STRING_LENGTH = 250; // This consists of the plus symbol, digits, and arabic-indic digits.\n\nvar PHONE_NUMBER_START_PATTERN = new RegExp('[' + PLUS_CHARS + VALID_DIGITS + ']'); // Regular expression of trailing characters that we want to remove.\n\nvar AFTER_PHONE_NUMBER_END_PATTERN = new RegExp('[^' + VALID_DIGITS + ']+$');\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false; // `options`:\n//  {\n//    country:\n//    {\n//      restrict - (a two-letter country code)\n//                 the phone number must be in this country\n//\n//      default - (a two-letter country code)\n//                default country to use for phone number parsing and validation\n//                (if no country code could be derived from the phone number)\n//    }\n//  }\n//\n// Returns `{ country, number }`\n//\n// Example use cases:\n//\n// ```js\n// parse('8 (800) 555-35-35', 'RU')\n// parse('8 (800) 555-35-35', 'RU', metadata)\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } })\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } }, metadata)\n// parse('+7 800 555 35 35')\n// parse('+7 800 555 35 35', metadata)\n// ```\n//\n\nexport default function parse(text, options, metadata) {\n  // If assigning the `{}` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  options = options || {};\n  metadata = new Metadata(metadata); // Validate `defaultCountry`.\n\n  if (options.defaultCountry && !metadata.hasCountry(options.defaultCountry)) {\n    if (options.v2) {\n      throw new ParseError('INVALID_COUNTRY');\n    }\n\n    throw new Error(\"Unknown country: \".concat(options.defaultCountry));\n  } // Parse the phone number.\n\n\n  var _parseInput = parseInput(text, options.v2),\n      formattedPhoneNumber = _parseInput.number,\n      ext = _parseInput.ext; // If the phone number is not viable then return nothing.\n\n\n  if (!formattedPhoneNumber) {\n    if (options.v2) {\n      throw new ParseError('NOT_A_NUMBER');\n    }\n\n    return {};\n  }\n\n  var _parsePhoneNumber = parsePhoneNumber(formattedPhoneNumber, options.defaultCountry, options.defaultCallingCode, metadata),\n      country = _parsePhoneNumber.country,\n      nationalNumber = _parsePhoneNumber.nationalNumber,\n      countryCallingCode = _parsePhoneNumber.countryCallingCode,\n      carrierCode = _parsePhoneNumber.carrierCode;\n\n  if (!metadata.hasSelectedNumberingPlan()) {\n    if (options.v2) {\n      throw new ParseError('INVALID_COUNTRY');\n    }\n\n    return {};\n  } // Validate national (significant) number length.\n\n\n  if (!nationalNumber || nationalNumber.length < MIN_LENGTH_FOR_NSN) {\n    // Won't throw here because the regexp already demands length > 1.\n\n    /* istanbul ignore if */\n    if (options.v2) {\n      throw new ParseError('TOO_SHORT');\n    } // Google's demo just throws an error in this case.\n\n\n    return {};\n  } // Validate national (significant) number length.\n  //\n  // A sidenote:\n  //\n  // They say that sometimes national (significant) numbers\n  // can be longer than `MAX_LENGTH_FOR_NSN` (e.g. in Germany).\n  // https://github.com/googlei18n/libphonenumber/blob/7e1748645552da39c4e1ba731e47969d97bdb539/resources/phonenumber.proto#L36\n  // Such numbers will just be discarded.\n  //\n\n\n  if (nationalNumber.length > MAX_LENGTH_FOR_NSN) {\n    if (options.v2) {\n      throw new ParseError('TOO_LONG');\n    } // Google's demo just throws an error in this case.\n\n\n    return {};\n  }\n\n  if (options.v2) {\n    var phoneNumber = new PhoneNumber(countryCallingCode, nationalNumber, metadata.metadata);\n\n    if (country) {\n      phoneNumber.country = country;\n    }\n\n    if (carrierCode) {\n      phoneNumber.carrierCode = carrierCode;\n    }\n\n    if (ext) {\n      phoneNumber.ext = ext;\n    }\n\n    return phoneNumber;\n  } // Check if national phone number pattern matches the number.\n  // National number pattern is different for each country,\n  // even for those ones which are part of the \"NANPA\" group.\n\n\n  var valid = (options.extended ? metadata.hasSelectedNumberingPlan() : country) ? matchesEntirely(nationalNumber, metadata.nationalNumberPattern()) : false;\n\n  if (!options.extended) {\n    return valid ? result(country, nationalNumber, ext) : {};\n  }\n\n  return {\n    country: country,\n    countryCallingCode: countryCallingCode,\n    carrierCode: carrierCode,\n    valid: valid,\n    possible: valid ? true : options.extended === true && metadata.possibleLengths() && isPossibleNumber(nationalNumber, countryCallingCode !== undefined, metadata) ? true : false,\n    phone: nationalNumber,\n    ext: ext\n  };\n}\n/**\r\n * Extracts a formatted phone number from text.\r\n * Doesn't guarantee that the extracted phone number\r\n * is a valid phone number (for example, doesn't validate its length).\r\n * @param  {string} text\r\n * @param  {boolean} throwOnError — By default, it won't throw if the text is too long.\r\n * @return {string}\r\n * @example\r\n * // Returns \"(213) 373-4253\".\r\n * extractFormattedPhoneNumber(\"Call (213) 373-4253 for assistance.\")\r\n */\n\nexport function extractFormattedPhoneNumber(text, throwOnError) {\n  if (!text) {\n    return;\n  }\n\n  if (text.length > MAX_INPUT_STRING_LENGTH) {\n    if (throwOnError) {\n      throw new ParseError('TOO_LONG');\n    }\n\n    return;\n  } // Attempt to extract a possible number from the string passed in\n\n\n  var startsAt = text.search(PHONE_NUMBER_START_PATTERN);\n\n  if (startsAt < 0) {\n    return;\n  }\n\n  return text // Trim everything to the left of the phone number\n  .slice(startsAt) // Remove trailing non-numerical characters\n  .replace(AFTER_PHONE_NUMBER_END_PATTERN, '');\n}\n/**\r\n * Strips any national prefix (such as 0, 1) present in a\r\n * (possibly incomplete) number provided.\r\n * \"Carrier codes\" are only used  in Colombia and Brazil,\r\n * and only when dialing within those countries from a mobile phone to a fixed line number.\r\n * Sometimes it won't actually strip national prefix\r\n * and will instead prepend some digits to the `number`:\r\n * for example, when number `2345678` is passed with `VI` country selected,\r\n * it will return `{ number: \"3402345678\" }`, because `340` area code is prepended.\r\n * @param {string} number — National number digits.\r\n * @param {object} metadata — Metadata with country selected.\r\n * @return {object} `{ nationalNumber: string, carrierCode: string? }`.\r\n */\n\nexport function stripNationalPrefixAndCarrierCode(number, metadata) {\n  if (number && metadata.nationalPrefixForParsing()) {\n    // See METADATA.md for the description of\n    // `national_prefix_for_parsing` and `national_prefix_transform_rule`.\n    // Attempt to parse the first digits as a national prefix.\n    var prefixPattern = new RegExp('^(?:' + metadata.nationalPrefixForParsing() + ')');\n    var prefixMatch = prefixPattern.exec(number);\n\n    if (prefixMatch) {\n      var nationalNumber;\n      var carrierCode; // If a \"capturing group\" didn't match\n      // then its element in `prefixMatch[]` array will be `undefined`.\n\n      var capturedGroupsCount = prefixMatch.length - 1;\n\n      if (metadata.nationalPrefixTransformRule() && capturedGroupsCount > 0 && prefixMatch[capturedGroupsCount]) {\n        nationalNumber = number.replace(prefixPattern, metadata.nationalPrefixTransformRule()); // Carrier code is the last captured group,\n        // but only when there's more than one captured group.\n\n        if (capturedGroupsCount > 1 && prefixMatch[capturedGroupsCount]) {\n          carrierCode = prefixMatch[1];\n        }\n      } // If it's a simple-enough case then just\n      // strip the national prefix from the number.\n      else {\n          // National prefix is the whole substring matched by\n          // the `national_prefix_for_parsing` regexp.\n          var nationalPrefix = prefixMatch[0];\n          nationalNumber = number.slice(nationalPrefix.length); // Carrier code is the last captured group.\n\n          if (capturedGroupsCount > 0) {\n            carrierCode = prefixMatch[1];\n          }\n        } // We require that the national (significant) number remaining after\n      // stripping the national prefix and carrier code be long enough\n      // to be a possible length for the region. Otherwise, we don't do\n      // the stripping, since the original number could be a valid number.\n      // For example, in some countries (Russia, Belarus) the same digit\n      // could be both a national prefix and a leading digit of a valid\n      // national phone number, like `8` is the national prefix for Russia\n      // and `800 555 35 35` is a valid national (significant) number.\n\n\n      if (matchesEntirely(number, metadata.nationalNumberPattern()) && !matchesEntirely(nationalNumber, metadata.nationalNumberPattern())) {// Don't strip national prefix or carrier code.\n      } else {\n        return {\n          nationalNumber: nationalNumber,\n          carrierCode: carrierCode\n        };\n      }\n    }\n  }\n\n  return {\n    nationalNumber: number\n  };\n}\nexport function findCountryCode(callingCode, nationalPhoneNumber, metadata) {\n  /* istanbul ignore if */\n  if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n    if (metadata.isNonGeographicCallingCode(callingCode)) {\n      return '001';\n    }\n  } // Is always non-empty, because `callingCode` is always valid\n\n\n  var possibleCountries = metadata.getCountryCodesForCallingCode(callingCode);\n\n  if (!possibleCountries) {\n    return;\n  } // If there's just one country corresponding to the country code,\n  // then just return it, without further phone number digits validation.\n\n\n  if (possibleCountries.length === 1) {\n    return possibleCountries[0];\n  }\n\n  return _findCountryCode(possibleCountries, nationalPhoneNumber, metadata.metadata);\n} // Changes `metadata` `country`.\n\nfunction _findCountryCode(possibleCountries, nationalPhoneNumber, metadata) {\n  metadata = new Metadata(metadata);\n\n  for (var _iterator = possibleCountries, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var country = _ref;\n    metadata.country(country); // Leading digits check would be the simplest one\n\n    if (metadata.leadingDigits()) {\n      if (nationalPhoneNumber && nationalPhoneNumber.search(metadata.leadingDigits()) === 0) {\n        return country;\n      }\n    } // Else perform full validation with all of those\n    // fixed-line/mobile/etc regular expressions.\n    else if (getNumberType({\n        phone: nationalPhoneNumber,\n        country: country\n      }, undefined, metadata.metadata)) {\n        return country;\n      }\n  }\n}\n/**\r\n * @param  {string} text - Input.\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\n\n\nfunction parseInput(text, v2) {\n  // Parse RFC 3966 phone number URI.\n  if (text && text.indexOf('tel:') === 0) {\n    return parseRFC3966(text);\n  }\n\n  var number = extractFormattedPhoneNumber(text, v2); // If the phone number is not viable, then abort.\n\n  if (!number || !isViablePhoneNumber(number)) {\n    return {};\n  } // Attempt to parse extension first, since it doesn't require region-specific\n  // data and we want to have the non-normalised number here.\n\n\n  var withExtensionStripped = extractExtension(number);\n\n  if (withExtensionStripped.ext) {\n    return withExtensionStripped;\n  }\n\n  return {\n    number: number\n  };\n}\n/**\r\n * Creates `parse()` result object.\r\n */\n\n\nfunction result(country, nationalNumber, ext) {\n  var result = {\n    country: country,\n    phone: nationalNumber\n  };\n\n  if (ext) {\n    result.ext = ext;\n  }\n\n  return result;\n}\n/**\r\n * Parses a viable phone number.\r\n * @param {string} formattedPhoneNumber — Example: \"(213) 373-4253\".\r\n * @param {string} [defaultCountry]\r\n * @param {string} [defaultCallingCode]\r\n * @param {Metadata} metadata\r\n * @return {object} Returns `{ country: string?, countryCallingCode: string?, nationalNumber: string? }`.\r\n */\n\n\nfunction parsePhoneNumber(formattedPhoneNumber, defaultCountry, defaultCallingCode, metadata) {\n  // Extract calling code from phone number.\n  var _extractCountryCallin = extractCountryCallingCode(parseIncompletePhoneNumber(formattedPhoneNumber), defaultCountry, defaultCallingCode, metadata.metadata),\n      countryCallingCode = _extractCountryCallin.countryCallingCode,\n      number = _extractCountryCallin.number; // Choose a country by `countryCallingCode`.\n\n\n  var country;\n\n  if (countryCallingCode) {\n    metadata.chooseCountryByCountryCallingCode(countryCallingCode);\n  } // If `formattedPhoneNumber` is in \"national\" format\n  // then `number` is defined and `countryCallingCode` isn't.\n  else if (number && (defaultCountry || defaultCallingCode)) {\n      metadata.selectNumberingPlan(defaultCountry, defaultCallingCode);\n\n      if (defaultCountry) {\n        country = defaultCountry;\n      } else {\n        /* istanbul ignore if */\n        if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n          if (metadata.isNonGeographicCallingCode(defaultCallingCode)) {\n            country = '001';\n          }\n        }\n      }\n\n      countryCallingCode = defaultCallingCode || getCountryCallingCode(defaultCountry, metadata.metadata);\n    } else return {};\n\n  if (!number) {\n    return {\n      countryCallingCode: countryCallingCode\n    };\n  }\n\n  var _stripNationalPrefixA = stripNationalPrefixAndCarrierCodeFromCompleteNumber(parseIncompletePhoneNumber(number), metadata),\n      nationalNumber = _stripNationalPrefixA.nationalNumber,\n      carrierCode = _stripNationalPrefixA.carrierCode; // Sometimes there are several countries\n  // corresponding to the same country phone code\n  // (e.g. NANPA countries all having `1` country phone code).\n  // Therefore, to reliably determine the exact country,\n  // national (significant) number should have been parsed first.\n  //\n  // When `metadata.json` is generated, all \"ambiguous\" country phone codes\n  // get their countries populated with the full set of\n  // \"phone number type\" regular expressions.\n  //\n\n\n  var exactCountry = findCountryCode(countryCallingCode, nationalNumber, metadata);\n\n  if (exactCountry) {\n    country = exactCountry;\n    /* istanbul ignore if */\n\n    if (exactCountry === '001') {// Can't happen with `USE_NON_GEOGRAPHIC_COUNTRY_CODE` being `false`.\n      // If `USE_NON_GEOGRAPHIC_COUNTRY_CODE` is set to `true` for some reason,\n      // then remove the \"istanbul ignore if\".\n    } else {\n      metadata.country(country);\n    }\n  }\n\n  return {\n    country: country,\n    countryCallingCode: countryCallingCode,\n    nationalNumber: nationalNumber,\n    carrierCode: carrierCode\n  };\n}\n/**\r\n * Strips national prefix and carrier code from a complete phone number.\r\n * The difference from the non-\"FromCompleteNumber\" function is that\r\n * it won't extract national prefix if the resultant number is too short\r\n * to be a complete number for the selected phone numbering plan.\r\n * @param  {string} number — Complete phone number digits.\r\n * @param  {Metadata} metadata — Metadata with a phone numbering plan selected.\r\n * @return {object} `{ nationalNumber: string, carrierCode: string? }`.\r\n */\n\n\nexport function stripNationalPrefixAndCarrierCodeFromCompleteNumber(number, metadata) {\n  // Parsing national prefixes and carrier codes\n  // is only required for local phone numbers\n  // but some people don't understand that\n  // and sometimes write international phone numbers\n  // with national prefixes (or maybe even carrier codes).\n  // http://ucken.blogspot.ru/2016/03/trunk-prefixes-in-skype4b.html\n  // Google's original library forgives such mistakes\n  // and so does this library, because it has been requested:\n  // https://github.com/catamphetamine/libphonenumber-js/issues/127\n  var _stripNationalPrefixA2 = stripNationalPrefixAndCarrierCode(parseIncompletePhoneNumber(number), metadata),\n      nationalNumber = _stripNationalPrefixA2.nationalNumber,\n      carrierCode = _stripNationalPrefixA2.carrierCode; // If a national prefix has been extracted, check to see\n  // if the resultant number isn't too short.\n\n\n  if (nationalNumber.length !== number.length + (carrierCode ? carrierCode.length : 0)) {\n    // If not using legacy generated metadata (before version `1.0.18`)\n    // then it has \"possible lengths\", so use those to validate the number length.\n    if (metadata.possibleLengths()) {\n      // \"We require that the NSN remaining after stripping the national prefix and\n      // carrier code be long enough to be a possible length for the region.\n      // Otherwise, we don't do the stripping, since the original number could be\n      // a valid short number.\"\n      // https://github.com/google/libphonenumber/blob/876268eb1ad6cdc1b7b5bef17fc5e43052702d57/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L3236-L3250\n      switch (checkNumberLengthForType(nationalNumber, undefined, metadata)) {\n        case 'TOO_SHORT':\n        case 'INVALID_LENGTH':\n          // case 'IS_POSSIBLE_LOCAL_ONLY':\n          // Don't strip the national prefix.\n          return {\n            nationalNumber: number\n          };\n      }\n    }\n  }\n\n  return {\n    nationalNumber: nationalNumber,\n    carrierCode: carrierCode\n  };\n}\n/**\r\n * Converts a phone number digits (possibly with a `+`)\r\n * into a calling code and the rest phone number digits.\r\n * The \"rest phone number digits\" could include\r\n * a national prefix, carrier code, and national\r\n * (significant) number.\r\n * @param  {string} number — Phone number digits (possibly with a `+`).\r\n * @param  {string} [country] — Default country.\r\n * @param  {string} [callingCode] — Default calling code (some phone numbering plans are non-geographic).\r\n * @param  {object} metadata\r\n * @return {object} `{ countryCallingCode: string?, number: string }`\r\n * @example\r\n * // Returns `{ countryCallingCode: \"1\", number: \"2133734253\" }`.\r\n * extractCountryCallingCode('2133734253', 'US', null, metadata)\r\n * extractCountryCallingCode('2133734253', null, '1', metadata)\r\n * extractCountryCallingCode('+12133734253', null, null, metadata)\r\n * extractCountryCallingCode('+12133734253', 'RU', null, metadata)\r\n */\n\nexport function extractCountryCallingCode(number, country, callingCode, metadata) {\n  if (!number) {\n    return {};\n  } // If this is not an international phone number,\n  // then either extract an \"IDD\" prefix, or extract a\n  // country calling code from a number by autocorrecting it\n  // by prepending a leading `+` in cases when it starts\n  // with the country calling code.\n  // https://wikitravel.org/en/International_dialling_prefix\n  // https://github.com/catamphetamine/libphonenumber-js/issues/376\n\n\n  if (number[0] !== '+') {\n    // Convert an \"out-of-country\" dialing phone number\n    // to a proper international phone number.\n    var numberWithoutIDD = stripIDDPrefix(number, country, callingCode, metadata); // If an IDD prefix was stripped then\n    // convert the number to international one\n    // for subsequent parsing.\n\n    if (numberWithoutIDD && numberWithoutIDD !== number) {\n      number = '+' + numberWithoutIDD;\n    } else {\n      // Check to see if the number starts with the country calling code\n      // for the default country. If so, we remove the country calling code,\n      // and do some checks on the validity of the number before and after.\n      // https://github.com/catamphetamine/libphonenumber-js/issues/376\n      if (country || callingCode) {\n        var _extractCountryCallin2 = extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(number, country, callingCode, metadata),\n            countryCallingCode = _extractCountryCallin2.countryCallingCode,\n            shorterNumber = _extractCountryCallin2.number;\n\n        if (countryCallingCode) {\n          return {\n            countryCallingCode: countryCallingCode,\n            number: shorterNumber\n          };\n        }\n      }\n\n      return {\n        number: number\n      };\n    }\n  } // Fast abortion: country codes do not begin with a '0'\n\n\n  if (number[1] === '0') {\n    return {};\n  }\n\n  metadata = new Metadata(metadata); // The thing with country phone codes\n  // is that they are orthogonal to each other\n  // i.e. there's no such country phone code A\n  // for which country phone code B exists\n  // where B starts with A.\n  // Therefore, while scanning digits,\n  // if a valid country code is found,\n  // that means that it is the country code.\n  //\n\n  var i = 2;\n\n  while (i - 1 <= MAX_LENGTH_COUNTRY_CODE && i <= number.length) {\n    var _countryCallingCode = number.slice(1, i);\n\n    if (metadata.hasCallingCode(_countryCallingCode)) {\n      metadata.selectNumberingPlan(undefined, _countryCallingCode);\n      return {\n        countryCallingCode: _countryCallingCode,\n        number: number.slice(i)\n      };\n    }\n\n    i++;\n  }\n\n  return {};\n}\n/**\r\n * Sometimes some people incorrectly input international phone numbers\r\n * without the leading `+`. This function corrects such input.\r\n * @param  {string} number — Phone number digits.\r\n * @param  {string?} country\r\n * @param  {string?} callingCode\r\n * @param  {object} metadata\r\n * @return {object} `{ countryCallingCode: string?, number: string }`.\r\n */\n\nexport function extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(number, country, callingCode, metadata) {\n  var countryCallingCode = country ? getCountryCallingCode(country, metadata) : callingCode;\n\n  if (number.indexOf(countryCallingCode) === 0) {\n    metadata = new Metadata(metadata);\n    metadata.selectNumberingPlan(country, callingCode);\n    var possibleShorterNumber = number.slice(countryCallingCode.length);\n\n    var _stripNationalPrefixA3 = stripNationalPrefixAndCarrierCode(possibleShorterNumber, metadata),\n        possibleShorterNationalNumber = _stripNationalPrefixA3.nationalNumber;\n\n    var _stripNationalPrefixA4 = stripNationalPrefixAndCarrierCode(number, metadata),\n        nationalNumber = _stripNationalPrefixA4.nationalNumber; // If the number was not valid before but is valid now,\n    // or if it was too long before, we consider the number\n    // with the country calling code stripped to be a better result\n    // and keep that instead.\n    // For example, in Germany (+49), `49` is a valid area code,\n    // so if a number starts with `49`, it could be both a valid\n    // national German number or an international number without\n    // a leading `+`.\n\n\n    if (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern()) && matchesEntirely(possibleShorterNationalNumber, metadata.nationalNumberPattern()) || checkNumberLengthForType(nationalNumber, undefined, metadata) === 'TOO_LONG') {\n      return {\n        countryCallingCode: countryCallingCode,\n        number: possibleShorterNumber\n      };\n    }\n  }\n\n  return {\n    number: number\n  };\n}\n//# sourceMappingURL=parse_.js.map","import { VALID_DIGITS } from './constants'; // The RFC 3966 format for extensions.\n\nvar RFC3966_EXTN_PREFIX = ';ext='; // Pattern to capture digits used in an extension.\n// Places a maximum length of '7' for an extension.\n\nvar CAPTURING_EXTN_DIGITS = '([' + VALID_DIGITS + ']{1,7})';\n/**\r\n * Regexp of all possible ways to write extensions, for use when parsing. This\r\n * will be run as a case-insensitive regexp match. Wide character versions are\r\n * also provided after each ASCII version. There are three regular expressions\r\n * here. The first covers RFC 3966 format, where the extension is added using\r\n * ';ext='. The second more generic one starts with optional white space and\r\n * ends with an optional full stop (.), followed by zero or more spaces/tabs\r\n * /commas and then the numbers themselves. The other one covers the special\r\n * case of American numbers where the extension is written with a hash at the\r\n * end, such as '- 503#'. Note that the only capturing groups should be around\r\n * the digits that you want to capture as part of the extension, or else parsing\r\n * will fail! We allow two options for representing the accented o - the\r\n * character itself, and one in the unicode decomposed form with the combining\r\n * acute accent.\r\n */\n\nfunction create_extension_pattern(purpose) {\n  // One-character symbols that can be used to indicate an extension.\n  var single_extension_characters = \"x\\uFF58#\\uFF03~\\uFF5E\";\n\n  switch (purpose) {\n    // For parsing, we are slightly more lenient in our interpretation than for matching. Here we\n    // allow \"comma\" and \"semicolon\" as possible extension indicators. When matching, these are\n    case 'parsing':\n      single_extension_characters = ',;' + single_extension_characters;\n  }\n\n  return RFC3966_EXTN_PREFIX + CAPTURING_EXTN_DIGITS + '|' + \"[ \\xA0\\\\t,]*\" + \"(?:e?xt(?:ensi(?:o\\u0301?|\\xF3))?n?|\\uFF45?\\uFF58\\uFF54\\uFF4E?|\" + // \"доб.\"\n  \"\\u0434\\u043E\\u0431|\" + '[' + single_extension_characters + \"]|int|anexo|\\uFF49\\uFF4E\\uFF54)\" + \"[:\\\\.\\uFF0E]?[ \\xA0\\\\t,-]*\" + CAPTURING_EXTN_DIGITS + '#?|' + '[- ]+([' + VALID_DIGITS + ']{1,5})#';\n}\n/**\r\n * Regexp of all possible ways to write extensions, for use when parsing. This\r\n * will be run as a case-insensitive regexp match. Wide character versions are\r\n * also provided after each ASCII version. There are three regular expressions\r\n * here. The first covers RFC 3966 format, where the extension is added using\r\n * ';ext='. The second more generic one starts with optional white space and\r\n * ends with an optional full stop (.), followed by zero or more spaces/tabs\r\n * /commas and then the numbers themselves. The other one covers the special\r\n * case of American numbers where the extension is written with a hash at the\r\n * end, such as '- 503#'. Note that the only capturing groups should be around\r\n * the digits that you want to capture as part of the extension, or else parsing\r\n * will fail! We allow two options for representing the accented o - the\r\n * character itself, and one in the unicode decomposed form with the combining\r\n * acute accent.\r\n */\n\n\nexport var EXTN_PATTERNS_FOR_PARSING = create_extension_pattern('parsing');\nexport var EXTN_PATTERNS_FOR_MATCHING = create_extension_pattern('matching'); // Regexp of all known extension prefixes used by different regions followed by\n// 1 or more valid digits, for use when parsing.\n\nvar EXTN_PATTERN = new RegExp('(?:' + EXTN_PATTERNS_FOR_PARSING + ')$', 'i'); // Strips any extension (as in, the part of the number dialled after the call is\n// connected, usually indicated with extn, ext, x or similar) from the end of\n// the number, and returns it.\n\nexport function extractExtension(number) {\n  var start = number.search(EXTN_PATTERN);\n\n  if (start < 0) {\n    return {};\n  } // If we find a potential extension, and the number preceding this is a viable\n  // number, we assume it is an extension.\n\n\n  var number_without_extension = number.slice(0, start);\n  var matches = number.match(EXTN_PATTERN);\n  var i = 1;\n\n  while (i < matches.length) {\n    if (matches[i] != null && matches[i].length > 0) {\n      return {\n        number: number_without_extension,\n        ext: matches[i]\n      };\n    }\n\n    i++;\n  }\n}\n//# sourceMappingURL=extension.js.map","import Metadata from './metadata';\nimport { VALID_DIGITS } from './constants';\nvar CAPTURING_DIGIT_PATTERN = new RegExp('([' + VALID_DIGITS + '])');\n/**\r\n * Pattern that makes it easy to distinguish whether a region has a single\r\n * international dialing prefix or not. If a region has a single international\r\n * prefix (e.g. 011 in USA), it will be represented as a string that contains\r\n * a sequence of ASCII digits, and possibly a tilde, which signals waiting for\r\n * the tone. If there are multiple available international prefixes in a\r\n * region, they will be represented as a regex string that always contains one\r\n * or more characters that are not ASCII digits or a tilde.\r\n */\n\nvar SINGLE_IDD_PREFIX = /^[\\d]+(?:[~\\u2053\\u223C\\uFF5E][\\d]+)?$/; // For regions that have multiple IDD prefixes\n// a preferred IDD prefix is returned.\n\nexport function getIDDPrefix(country, callingCode, metadata) {\n  var countryMetadata = new Metadata(metadata);\n  countryMetadata.selectNumberingPlan(country, callingCode);\n\n  if (SINGLE_IDD_PREFIX.test(countryMetadata.IDDPrefix())) {\n    return countryMetadata.IDDPrefix();\n  }\n\n  return countryMetadata.defaultIDDPrefix();\n}\nexport function stripIDDPrefix(number, country, callingCode, metadata) {\n  if (!country) {\n    return;\n  } // Check if the number is IDD-prefixed.\n\n\n  var countryMetadata = new Metadata(metadata);\n  countryMetadata.selectNumberingPlan(country, callingCode);\n  var IDDPrefixPattern = new RegExp(countryMetadata.IDDPrefix());\n\n  if (number.search(IDDPrefixPattern) !== 0) {\n    return;\n  } // Strip IDD prefix.\n\n\n  number = number.slice(number.match(IDDPrefixPattern)[0].length); // Some kind of a weird edge case.\n  // No explanation from Google given.\n\n  var matchedGroups = number.match(CAPTURING_DIGIT_PATTERN);\n  /* istanbul ignore next */\n\n  if (matchedGroups && matchedGroups[1] != null && matchedGroups[1].length > 0) {\n    if (matchedGroups[1] === '0') {\n      return;\n    }\n  }\n\n  return number;\n}\n//# sourceMappingURL=IDD.js.map","function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { normalizeArguments } from './parsePhoneNumber';\nimport PhoneNumberMatcher from './PhoneNumberMatcher';\n/**\r\n * @return ES6 `for ... of` iterator.\r\n */\n\nexport default function searchNumbers() {\n  var _normalizeArguments = normalizeArguments(arguments),\n      text = _normalizeArguments.text,\n      options = _normalizeArguments.options,\n      metadata = _normalizeArguments.metadata;\n\n  var matcher = new PhoneNumberMatcher(text, options, metadata);\n  return _defineProperty({}, Symbol.iterator, function () {\n    return {\n      next: function next() {\n        if (matcher.hasNext()) {\n          return {\n            done: false,\n            value: matcher.next()\n          };\n        }\n\n        return {\n          done: true\n        };\n      }\n    };\n  });\n}\n//# sourceMappingURL=searchNumbers.js.map","function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport findNumbers from './findNumbers';\nexport default function findPhoneNumbersInText(text, defaultCountry, options, metadata) {\n  var args = getArguments(defaultCountry, options, metadata);\n  return findNumbers(text, args.options, args.metadata);\n}\nexport function getArguments(defaultCountry, options, metadata) {\n  if (metadata) {\n    if (defaultCountry) {\n      options = _objectSpread({}, options, {\n        defaultCountry: defaultCountry\n      });\n    }\n  } else {\n    if (options) {\n      metadata = options;\n\n      if (defaultCountry) {\n        if (is_object(defaultCountry)) {\n          options = defaultCountry;\n        } else {\n          options = {\n            defaultCountry: defaultCountry\n          };\n        }\n      } else {\n        options = undefined;\n      }\n    } else {\n      metadata = defaultCountry;\n      options = undefined;\n    }\n  }\n\n  return {\n    options: _objectSpread({}, options, {\n      v2: true\n    }),\n    metadata: metadata\n  };\n} // Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\nvar is_object = function is_object(_) {\n  return _typeof(_) === 'object';\n};\n//# sourceMappingURL=findPhoneNumbersInText.js.map","function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// This is an enhanced port of Google Android `libphonenumber`'s\n// `asyoutypeformatter.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/blob/8d21a365061de2ba0675c878a710a7b24f74d2ae/javascript/i18n/phonenumbers/asyoutypeformatter.js\n//\n// Simplified: does not differentiate between \"local-only\" numbers\n// and \"internationally dialable\" numbers.\n// For example, doesn't include changes like this:\n// https://github.com/googlei18n/libphonenumber/commit/865da605da12b01053c4f053310bac7c5fbb7935\nimport Metadata from './metadata';\nimport PhoneNumber from './PhoneNumber';\nimport { VALID_DIGITS, VALID_PUNCTUATION, PLUS_CHARS } from './constants';\nimport { matchesEntirely } from './util';\nimport { extractCountryCallingCode as _extractCountryCallingCode, findCountryCode, stripNationalPrefixAndCarrierCode, stripNationalPrefixAndCarrierCodeFromCompleteNumber, extractCountryCallingCodeFromInternationalNumberWithoutPlusSign } from './parse_';\nimport { FIRST_GROUP_PATTERN, formatNationalNumberUsingFormat, applyInternationalSeparatorStyle } from './format_';\nimport { stripIDDPrefix } from './IDD';\nimport { checkNumberLengthForType } from './getNumberType_';\nimport parseDigits from './parseDigits'; // Used in phone number format template creation.\n// Could be any digit, I guess.\n\nvar DUMMY_DIGIT = '9'; // I don't know why is it exactly `15`\n\nvar LONGEST_NATIONAL_PHONE_NUMBER_LENGTH = 15; // Create a phone number consisting only of the digit 9 that matches the\n// `number_pattern` by applying the pattern to the \"longest phone number\" string.\n\nvar LONGEST_DUMMY_PHONE_NUMBER = repeat(DUMMY_DIGIT, LONGEST_NATIONAL_PHONE_NUMBER_LENGTH); // The digits that have not been entered yet will be represented by a \\u2008,\n// the punctuation space.\n\nexport var DIGIT_PLACEHOLDER = 'x'; // '\\u2008' (punctuation space)\n\nvar DIGIT_PLACEHOLDER_MATCHER = new RegExp(DIGIT_PLACEHOLDER); // A set of characters that, if found in a national prefix formatting rules, are an indicator to\n// us that we should separate the national prefix from the number when formatting.\n\nvar NATIONAL_PREFIX_SEPARATORS_PATTERN = /[- ]/; // Deprecated: Google has removed some formatting pattern related code from their repo.\n// https://github.com/googlei18n/libphonenumber/commit/a395b4fef3caf57c4bc5f082e1152a4d2bd0ba4c\n// \"We no longer have numbers in formatting matching patterns, only \\d.\"\n// Because this library supports generating custom metadata\n// some users may still be using old metadata so the relevant\n// code seems to stay until some next major version update.\n\nvar SUPPORT_LEGACY_FORMATTING_PATTERNS = true; // A pattern that is used to match character classes in regular expressions.\n// An example of a character class is \"[1-4]\".\n\nvar CREATE_CHARACTER_CLASS_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && function () {\n  return /\\[([^\\[\\]])*\\]/g;\n}; // Any digit in a regular expression that actually denotes a digit. For\n// example, in the regular expression \"80[0-2]\\d{6,10}\", the first 2 digits\n// (8 and 0) are standalone digits, but the rest are not.\n// Two look-aheads are needed because the number following \\\\d could be a\n// two-digit number, since the phone number can be as long as 15 digits.\n\n\nvar CREATE_STANDALONE_DIGIT_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && function () {\n  return /\\d(?=[^,}][^,}])/g;\n}; // A pattern that is used to determine if a `format` is eligible\n// to be used by the \"as you type formatter\".\n// It is eligible when the `format` contains groups of the dollar sign\n// followed by a single digit, separated by valid phone number punctuation.\n// This prevents invalid punctuation (such as the star sign in Israeli star numbers)\n// getting into the output of the \"as you type formatter\".\n\n\nvar ELIGIBLE_FORMAT_PATTERN = new RegExp('^' + '[' + VALID_PUNCTUATION + ']*' + '(\\\\$\\\\d[' + VALID_PUNCTUATION + ']*)+' + '$'); // This is the minimum length of the leading digits of a phone number\n// to guarantee the first \"leading digits pattern\" for a phone number format\n// to be preemptive.\n\nvar MIN_LEADING_DIGITS_LENGTH = 3;\nvar VALID_FORMATTED_PHONE_NUMBER_PART = '[' + VALID_PUNCTUATION + VALID_DIGITS + ']+';\nvar VALID_FORMATTED_PHONE_NUMBER_PART_PATTERN = new RegExp('^' + VALID_FORMATTED_PHONE_NUMBER_PART + '$', 'i');\nvar VALID_PHONE_NUMBER = '(?:' + '[' + PLUS_CHARS + ']' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']*' + '|' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']+' + ')';\nvar AFTER_PHONE_NUMBER_DIGITS_END_PATTERN = new RegExp('[^' + VALID_PUNCTUATION + VALID_DIGITS + ']+' + '.*' + '$');\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;\n\nvar AsYouType =\n/*#__PURE__*/\nfunction () {\n  // Not setting `options` to a constructor argument\n  // not to break backwards compatibility\n  // for older versions of the library.\n\n  /**\r\n   * @param {(string|object)?} [optionsOrDefaultCountry] - The default country used for parsing non-international phone numbers. Can also be an `options` object.\r\n   * @param {Object} metadata\r\n   */\n  function AsYouType(optionsOrDefaultCountry, metadata) {\n    _classCallCheck(this, AsYouType);\n\n    _defineProperty(this, \"options\", {});\n\n    this.metadata = new Metadata(metadata); // Set `defaultCountry` and `defaultCallingCode` options.\n\n    var defaultCountry;\n    var defaultCallingCode; // Turns out `null` also has type \"object\". Weird.\n\n    if (optionsOrDefaultCountry) {\n      if (_typeof(optionsOrDefaultCountry) === 'object') {\n        defaultCountry = optionsOrDefaultCountry.defaultCountry;\n        defaultCallingCode = optionsOrDefaultCountry.defaultCallingCode;\n      } else {\n        defaultCountry = optionsOrDefaultCountry;\n      }\n    }\n\n    if (defaultCountry && this.metadata.hasCountry(defaultCountry)) {\n      this.defaultCountry = defaultCountry;\n    }\n\n    if (defaultCallingCode) {\n      /* istanbul ignore if */\n      if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n        if (this.metadata.isNonGeographicCallingCode(defaultCallingCode)) {\n          this.defaultCountry = '001';\n        }\n      }\n\n      this.defaultCallingCode = defaultCallingCode;\n    } // Reset.\n\n\n    this.reset();\n  }\n\n  _createClass(AsYouType, [{\n    key: \"reset\",\n    value: function reset() {\n      this.formattedOutput = '';\n      this.international = undefined;\n      this.internationalPrefix = undefined;\n      this.countryCallingCode = undefined;\n      this.digits = '';\n      this.nationalNumberDigits = '';\n      this.nationalPrefix = '';\n      this.carrierCode = '';\n      this.setCountry(this.defaultCountry, this.defaultCallingCode);\n      return this;\n    }\n  }, {\n    key: \"setCountry\",\n    value: function setCountry(country, callingCode) {\n      this.country = country;\n      this.metadata.selectNumberingPlan(country, callingCode);\n\n      if (this.metadata.hasSelectedNumberingPlan()) {\n        this.initializePhoneNumberFormatsForCountry();\n      } else {\n        this.matchingFormats = [];\n      }\n\n      this.resetFormat();\n    }\n  }, {\n    key: \"resetFormat\",\n    value: function resetFormat() {\n      this.chosenFormat = undefined;\n      this.template = undefined;\n      this.populatedNationalNumberTemplate = undefined;\n      this.populatedNationalNumberTemplatePosition = -1;\n    }\n    /**\r\n     * Inputs \"next\" phone number characters.\r\n     * @param  {string} text\r\n     * @return {string} Formatted phone number characters that have been input so far.\r\n     */\n\n  }, {\n    key: \"input\",\n    value: function input(text) {\n      var formattedDigits = this.extractFormattedDigits(text); // If the extracted phone number part\n      // can possibly be a part of some valid phone number\n      // then parse phone number characters from a formatted phone number.\n\n      if (VALID_FORMATTED_PHONE_NUMBER_PART_PATTERN.test(formattedDigits)) {\n        this.formattedOutput = this.getFullNumber(this.inputDigits(parseDigits(formattedDigits)) || this.getNonFormattedNationalNumber());\n      }\n\n      return this.formattedOutput;\n    }\n    /**\r\n     * Extracts formatted phone number digits from text (if there're any).\r\n     * @param  {string} text\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"extractFormattedDigits\",\n    value: function extractFormattedDigits(text) {\n      // Extract a formatted phone number part from text.\n      var extractedNumber = extractFormattedPhoneNumber(text) || ''; // Trim a `+`.\n\n      if (extractedNumber[0] === '+') {\n        // Trim the `+`.\n        extractedNumber = extractedNumber.slice('+'.length);\n\n        if (this.digits) {// If an out of position `+` is detected\n          // (or a second `+`) then just ignore it.\n        } else {\n          this.formattedOutput = '+';\n          this.startInternationalNumber();\n        }\n      }\n\n      return extractedNumber;\n    }\n  }, {\n    key: \"startInternationalNumber\",\n    value: function startInternationalNumber() {\n      // Prepend the `+` to parsed input.\n      this.international = true; // If a default country was set then reset it\n      // because an explicitly international phone\n      // number is being entered.\n\n      this.setCountry();\n    }\n    /**\r\n     * Inputs \"next\" phone number digits.\r\n     * @param  {string} digits\r\n     * @return {string} [formattedNumber] Formatted national phone number (if it can be formatted at this stage). Returning `undefined` means \"don't format the national phone number at this stage\".\r\n     */\n\n  }, {\n    key: \"inputDigits\",\n    value: function inputDigits(nextDigits) {\n      // Some users input their phone number in \"out-of-country\"\n      // dialing format instead of using the leading `+`.\n      // https://github.com/catamphetamine/libphonenumber-js/issues/185\n      // Detect such numbers.\n      if (!this.digits) {\n        var numberWithoutIDD = stripIDDPrefix(nextDigits, this.defaultCountry, this.defaultCallingCode, this.metadata.metadata);\n\n        if (numberWithoutIDD && numberWithoutIDD !== nextDigits) {\n          // If an IDD prefix was stripped then\n          // convert the number to international one\n          // for subsequent parsing.\n          this.internationalPrefix = nextDigits.slice(0, nextDigits.length - numberWithoutIDD.length);\n          nextDigits = numberWithoutIDD;\n          this.startInternationalNumber();\n        }\n      } // Append phone number digits.\n\n\n      this.digits += nextDigits; // Try to format the parsed input\n\n      if (this.isInternational()) {\n        if (this.countryCallingCode) {\n          this.nationalNumberDigits += nextDigits; // `this.country` could be `undefined`, for example, when there is\n          // ambiguity in a form of several different countries,\n          // each corresponding to the same country phone code\n          // (e.g. NANPA: USA, Canada, etc), and there's not enough digits\n          // to reliably determine the country the phone number belongs to.\n          // Therefore, in cases of such ambiguity, each time something is input,\n          // try to determine the country (if it hasn't been determined yet).\n\n          if (!this.country || this.isCountryCallingCodeAmbiguous()) {\n            this.determineTheCountry();\n          }\n        } else {\n          // Extract country calling code from the digits entered so far.\n          // There must be some digits in order to extract anything from them.\n          //\n          // If one looks at country phone codes\n          // then they can notice that no one country phone code\n          // is ever a (leftmost) substring of another country phone code.\n          // So if a valid country code is extracted so far\n          // then it means that this is the country code.\n          //\n          // If no country phone code could be extracted so far,\n          // then don't format the phone number.\n          //\n          if (!this.extractCountryCallingCode()) {\n            // Don't format the phone number.\n            return;\n          } // Possibly extract a national prefix.\n          // Some people incorrectly input national prefix\n          // in an international phone number.\n          // For example, some people write British phone numbers as `+44(0)...`.\n          // Also, mobile phone numbers in Mexico are supposed to be dialled\n          // internationally using a `15` national prefix.\n          //\n          // https://www.mexperience.com/dialing-cell-phones-in-mexico/\n          //\n          // \"Dialing a Mexican cell phone from abroad\n          // When you are calling a cell phone number in Mexico from outside Mexico,\n          // it’s necessary to dial an additional “1” after Mexico’s country code\n          // (which is “52”) and before the area code.\n          // You also ignore the 045, and simply dial the area code and the\n          // cell phone’s number.\n          //\n          // If you don’t add the “1”, you’ll receive a recorded announcement\n          // asking you to redial using it.\n          //\n          // For example, if you are calling from the USA to a cell phone\n          // in Mexico City, you would dial +52 – 1 – 55 – 1234 5678.\n          // (Note that this is different to calling a land line in Mexico City\n          // from abroad, where the number dialed would be +52 – 55 – 1234 5678)\".\n          //\n\n\n          this.nationalNumberDigits = this.digits.slice(this.countryCallingCode.length); // this.extractNationalPrefix()\n          //\n          // Determine the country from country calling code and national number.\n\n          this.determineTheCountry();\n        }\n      } else {\n        this.nationalNumberDigits += nextDigits; // If `defaultCallingCode` is set,\n        // see if the `country` could be derived.\n\n        if (!this.country) {\n          this.determineTheCountry();\n        } // Some national prefixes are substrings of other national prefixes\n        // (for the same country), therefore try to extract national prefix each time\n        // because a longer national prefix might be available at some point in time.\n\n\n        var previousNationalPrefix = this.nationalPrefix;\n        this.nationalNumberDigits = this.nationalPrefix + this.nationalNumberDigits; // Re-extract national prefix.\n\n        this.extractNationalPrefix(); // If another national prefix has been extracted.\n\n        if (this.nationalPrefix !== previousNationalPrefix) {\n          // National number has changed\n          // (due to another national prefix been extracted)\n          // therefore national number has changed\n          // therefore reset all previous formatting data.\n          // (and leading digits matching state)\n          this.initializePhoneNumberFormatsForCountry();\n          this.resetFormat();\n        }\n      }\n\n      if (this.nationalNumberDigits) {\n        // Match the available formats by the currently available leading digits.\n        this.matchFormats(this.nationalNumberDigits);\n      } // Format the phone number (given the next digits)\n\n\n      return this.formatNationalNumberWithNextDigits(nextDigits);\n    }\n  }, {\n    key: \"formatNationalNumberWithNextDigits\",\n    value: function formatNationalNumberWithNextDigits(nextDigits) {\n      // See if the phone number digits can be formatted as a complete phone number.\n      // If not, use the results from `formatNextNationalNumberDigits()`,\n      // which formats based on the chosen formatting pattern.\n      // Attempting to format complete phone number first is how it's done\n      // in Google's `libphonenumber`.\n      var formattedNumber = this.attemptToFormatCompletePhoneNumber(); // Just because a phone number doesn't have a suitable format\n      // that doesn't mean that the phone number is invalid,\n      // because phone number formats only format phone numbers,\n      // they don't validate them and some (rare) phone numbers\n      // are meant to stay non-formatted.\n\n      if (formattedNumber) {\n        return formattedNumber;\n      } // Format the next phone number digits\n      // using the previously chosen phone number format.\n      //\n      // This is done here because if `attemptToFormatCompletePhoneNumber`\n      // was placed before this call then the `template`\n      // wouldn't reflect the situation correctly (and would therefore be inconsistent)\n      //\n\n\n      var previouslyChosenFormat = this.chosenFormat; // Choose a format from the list of matching ones.\n\n      var newlyChosenFormat = this.chooseFormat();\n\n      if (newlyChosenFormat) {\n        if (newlyChosenFormat === previouslyChosenFormat) {\n          // If could format the next (current) digit\n          // using the previously chosen phone number format\n          // then return the formatted number so far.\n          //\n          // If no new phone number format could be chosen,\n          // and couldn't format the supplied national number\n          // using the previously chosen phone number pattern,\n          // then return `undefined`.\n          //\n          return this.formatNextNationalNumberDigits(nextDigits);\n        } else {\n          // If a more appropriate phone number format\n          // has been chosen for these \"leading digits\",\n          // then format the national phone number (so far)\n          // using the newly selected format.\n          //\n          // Will return `undefined` if it couldn't format\n          // the supplied national number\n          // using the selected phone number pattern.\n          //\n          return this.reformatNationalNumber();\n        }\n      }\n    }\n  }, {\n    key: \"chooseFormat\",\n    value: function chooseFormat() {\n      // When there are multiple available formats, the formatter uses the first\n      // format where a formatting template could be created.\n      for (var _iterator = this.matchingFormats, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n\n        var format = _ref;\n\n        // If this format is currently being used\n        // and is still possible, then stick to it.\n        if (this.chosenFormat === format) {\n          break;\n        }\n\n        if (!this.createFormattingTemplate(format)) {\n          continue;\n        }\n\n        this.chosenFormat = format; // With a new formatting template, the matched position\n        // using the old template needs to be reset.\n\n        this.populatedNationalNumberTemplatePosition = -1;\n        break;\n      }\n\n      if (!this.chosenFormat) {\n        // No format matches the national phone number entered.\n        this.resetFormat();\n      }\n\n      return this.chosenFormat;\n    } // Formats each digit of the national phone number (so far)\n    // using the selected format.\n\n  }, {\n    key: \"reformatNationalNumber\",\n    value: function reformatNationalNumber() {\n      return this.formatNextNationalNumberDigits(this.nationalPrefix + this.nationalNumberDigits);\n    }\n  }, {\n    key: \"initializePhoneNumberFormatsForCountry\",\n    value: function initializePhoneNumberFormatsForCountry() {\n      // Get all \"eligible\" phone number formats for this country\n      this.matchingFormats = this.metadata.formats().filter(function (format) {\n        // Compared to `libphonenumber`'s code, the two \"Discard a few formats\n        // that we know are not relevant based on the presence of the national prefix\"\n        // checks have changed: the first one has been moved to `.matchFormats()`,\n        // and the second one doesn't apply to this library because it doesn't deal with\n        // \"incomplete\" phone numbers (for example, phone numbers, entered without \"area code\").\n        return ELIGIBLE_FORMAT_PATTERN.test(format.internationalFormat());\n      });\n    }\n  }, {\n    key: \"matchFormats\",\n    value: function matchFormats(leadingDigits) {\n      var _this = this;\n\n      // \"leading digits\" pattern list starts with a\n      // \"leading digits\" pattern fitting a maximum of 3 leading digits.\n      // So, after a user inputs 3 digits of a national (significant) phone number\n      // this national (significant) number can already be formatted.\n      // The next \"leading digits\" pattern is for 4 leading digits max,\n      // and the \"leading digits\" pattern after it is for 5 leading digits max, etc.\n      // This implementation is different from Google's\n      // in that it searches for a fitting format\n      // even if the user has entered less than\n      // `MIN_LEADING_DIGITS_LENGTH` digits of a national number.\n      // Because some leading digit patterns already match for a single first digit.\n      var leadingDigitsPatternIndex = leadingDigits.length - MIN_LEADING_DIGITS_LENGTH;\n\n      if (leadingDigitsPatternIndex < 0) {\n        leadingDigitsPatternIndex = 0;\n      }\n\n      this.matchingFormats = this.matchingFormats.filter(function (format) {\n        // If national prefix is mandatory for this phone number format\n        // and the user didn't input the national prefix\n        // then this phone number format isn't suitable.\n        if (!_this.isInternational() && !_this.nationalPrefix && format.nationalPrefixIsMandatoryWhenFormattingInNationalFormat()) {\n          return false;\n        }\n\n        var leadingDigitsPatternsCount = format.leadingDigitsPatterns().length; // If this format is not restricted to a certain\n        // leading digits pattern then it fits.\n\n        if (leadingDigitsPatternsCount === 0) {\n          return true;\n        } // Start excluding any non-matching formats only when the\n        // national number entered so far is at least 3 digits long,\n        // otherwise format matching would give false negatives.\n        // For example, when the digits entered so far are `2`\n        // and the leading digits pattern is `21` –\n        // it's quite obvious in this case that the format could be the one\n        // but due to the absence of further digits it would give false negative.\n\n\n        if (leadingDigits.length < MIN_LEADING_DIGITS_LENGTH) {\n          return true;\n        } // If at least `MIN_LEADING_DIGITS_LENGTH` digits of a national number are available\n        // then format matching starts narrowing down the list of possible formats\n        // (only previously matched formats are considered for next digits).\n\n\n        leadingDigitsPatternIndex = Math.min(leadingDigitsPatternIndex, leadingDigitsPatternsCount - 1);\n        var leadingDigitsPattern = format.leadingDigitsPatterns()[leadingDigitsPatternIndex]; // Brackets are required for `^` to be applied to\n        // all or-ed (`|`) parts, not just the first one.\n\n        return new RegExp(\"^(\".concat(leadingDigitsPattern, \")\")).test(leadingDigits);\n      }); // If there was a phone number format chosen\n      // and it no longer holds given the new leading digits then reset it.\n      // The test for this `if` condition is marked as:\n      // \"Reset a chosen format when it no longer holds given the new leading digits\".\n      // To construct a valid test case for this one can find a country\n      // in `PhoneNumberMetadata.xml` yielding one format for 3 `<leadingDigits>`\n      // and yielding another format for 4 `<leadingDigits>` (Australia in this case).\n\n      if (this.chosenFormat && this.matchingFormats.indexOf(this.chosenFormat) === -1) {\n        this.resetFormat();\n      }\n    }\n  }, {\n    key: \"getSeparatorAfterNationalPrefix\",\n    value: function getSeparatorAfterNationalPrefix(format) {\n      if (this.metadata.countryCallingCode() === '1') {\n        return ' ';\n      }\n\n      if (format && format.nationalPrefixFormattingRule() && NATIONAL_PREFIX_SEPARATORS_PATTERN.test(format.nationalPrefixFormattingRule())) {\n        return ' ';\n      }\n\n      return '';\n    } // This is in accordance to how Google's `libphonenumber` does it.\n    // \"Check to see if there is an exact pattern match for these digits.\n    // If so, we should use this instead of any other formatting template\n    // whose `leadingDigitsPattern` also matches the input.\"\n\n  }, {\n    key: \"attemptToFormatCompletePhoneNumber\",\n    value: function attemptToFormatCompletePhoneNumber() {\n      for (var _iterator2 = this.matchingFormats, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n        var _ref2;\n\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) break;\n          _ref2 = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) break;\n          _ref2 = _i2.value;\n        }\n\n        var format = _ref2;\n        var matcher = new RegExp(\"^(?:\".concat(format.pattern(), \")$\"));\n\n        if (!matcher.test(this.nationalNumberDigits)) {\n          continue;\n        } // Here, national number is formatted without \"national prefix\n        // formatting rule\", because otherwise there'd be a bug\n        // when \"area code\" is \"duplicated\" during input:\n        // https://github.com/catamphetamine/libphonenumber-js/issues/318\n\n\n        var formattedNationalNumber = formatNationalNumberUsingFormat(this.nationalNumberDigits, format, this.isInternational(), false, // Don't prepend national prefix (it will be prepended manually).\n        this.metadata); // Check if this `format` preserves all digits.\n        // This is how it's done in Google's `libphonenumber`.\n        // Also, it fixes the bug when \"area code\" is \"duplicated\" during input:\n        // https://github.com/catamphetamine/libphonenumber-js/issues/318\n        //\n        // \"Check that we didn't remove nor add any extra digits when we matched\n        // this formatting pattern. This usually happens after we entered the last\n        // digit during AYTF. Eg: In case of MX, we swallow mobile token (1) when\n        // formatted but AYTF should retain all the number entered and not change\n        // in order to match a format (of same leading digits and length) display\n        // in that way.\"\n        // \"If it's the same (i.e entered number and format is same), then it's\n        // safe to return this in formatted number as nothing is lost / added.\"\n        // Otherwise, don't use this format.\n        // https://github.com/google/libphonenumber/commit/3e7c1f04f5e7200f87fb131e6f85c6e99d60f510#diff-9149457fa9f5d608a11bb975c6ef4bc5\n        // https://github.com/google/libphonenumber/commit/3ac88c7106e7dcb553bcc794b15f19185928a1c6#diff-2dcb77e833422ee304da348b905cde0b\n        //\n\n        if (parseDigits(formattedNationalNumber) !== this.nationalNumberDigits) {\n          continue;\n        } // Prepend national prefix (if any).\n\n\n        if (this.nationalPrefix) {\n          // Here, national number is formatted with \"national prefix\n          // formatting rule\". The reason is that \"national prefix\n          // formatting rule\" often adds parentheses, and while Google's\n          // `libphonenumber` dismisses those preferring simply prepending\n          // national prefix followed by a \" \" character, this library\n          // looks if the national prefix could be formatted better.\n          var formattedNationalNumberWithNationalPrefix = formatNationalNumberUsingFormat(this.nationalNumberDigits, format, this.isInternational(), true, // Prepend national prefix.\n          this.metadata);\n\n          if (parseDigits(formattedNationalNumberWithNationalPrefix) === this.nationalPrefix + this.nationalNumberDigits) {\n            formattedNationalNumber = formattedNationalNumberWithNationalPrefix;\n          } else {\n            formattedNationalNumber = this.nationalPrefix + this.getSeparatorAfterNationalPrefix(format) + formattedNationalNumber;\n          }\n        } // formats national number (probably) without national prefix.\n        // Formatting a national number with national prefix could result in\n        // bugs when \"area code\" is \"duplicated\" during input:\n        // https://github.com/catamphetamine/libphonenumber-js/issues/318\n        // The \"are all digits preserved\" check fixes that type of bug.\n        // To leave the formatter in a consistent state\n\n\n        this.resetFormat();\n        this.chosenFormat = format; // Set `this.template` and `this.populatedNationalNumberTemplate`.\n\n        /* istanbul ignore else */\n\n        if (this.createFormattingTemplate(format)) {\n          // Populate `this.populatedNationalNumberTemplate` with phone number digits.\n          this.reformatNationalNumber();\n        } else {\n          // If the formatting template couldn't be created for a format,\n          // create it manually from the formatted phone number.\n          // This case doesn't ever happen with the current metadata.\n          this.template = this.getFullNumber(formattedNationalNumber).replace(/[\\d\\+]/g, DIGIT_PLACEHOLDER);\n          this.populatedNationalNumberTemplate = formattedNationalNumber;\n          this.populatedNationalNumberTemplatePosition = this.populatedNationalNumberTemplate.length - 1;\n        }\n\n        return formattedNationalNumber;\n      }\n    }\n  }, {\n    key: \"getInternationalPrefix\",\n    value: function getInternationalPrefix(options) {\n      return this.internationalPrefix ? options && options.spacing === false ? this.internationalPrefix : this.internationalPrefix + ' ' : '+';\n    } // Prepends `+CountryCode ` in case of an international phone number\n\n  }, {\n    key: \"getFullNumber\",\n    value: function getFullNumber(formattedNationalNumber) {\n      if (this.isInternational()) {\n        var prefix = this.getInternationalPrefix();\n\n        if (!this.countryCallingCode) {\n          return \"\".concat(prefix).concat(this.digits);\n        }\n\n        if (!formattedNationalNumber) {\n          return \"\".concat(prefix).concat(this.countryCallingCode);\n        }\n\n        return \"\".concat(prefix).concat(this.countryCallingCode, \" \").concat(formattedNationalNumber);\n      }\n\n      return formattedNationalNumber;\n    }\n  }, {\n    key: \"getNonFormattedNationalNumber\",\n    value: function getNonFormattedNationalNumber() {\n      return this.nationalPrefix + (this.nationalPrefix && this.nationalNumberDigits && this.getSeparatorAfterNationalPrefix()) + this.nationalNumberDigits;\n    } // Extracts the country calling code from the beginning\n    // of the entered `national_number` (so far),\n    // and places the remaining input into the `national_number`.\n\n  }, {\n    key: \"extractCountryCallingCode\",\n    value: function extractCountryCallingCode() {\n      var _extractCountryCallin = _extractCountryCallingCode('+' + this.digits, this.defaultCountry, this.defaultCallingCode, this.metadata.metadata),\n          countryCallingCode = _extractCountryCallin.countryCallingCode,\n          number = _extractCountryCallin.number;\n\n      if (!countryCallingCode) {\n        return;\n      }\n\n      this.nationalNumberDigits = number;\n      this.countryCallingCode = countryCallingCode;\n      this.metadata.chooseCountryByCountryCallingCode(countryCallingCode);\n      this.initializePhoneNumberFormatsForCountry();\n      this.resetFormat();\n      return this.metadata.hasSelectedNumberingPlan();\n    }\n  }, {\n    key: \"extractNationalPrefix\",\n    value: function extractNationalPrefix() {\n      this.nationalPrefix = '';\n\n      if (!this.metadata.hasSelectedNumberingPlan()) {\n        return;\n      } // Only strip national prefixes for non-international phone numbers\n      // because national prefixes can't be present in international phone numbers.\n      // While `parseNumber()` is forgiving is such cases, `AsYouType` is not.\n\n\n      var _stripNationalPrefixA = stripNationalPrefixAndCarrierCode(this.nationalNumberDigits, this.metadata),\n          nationalNumber = _stripNationalPrefixA.nationalNumber,\n          carrierCode = _stripNationalPrefixA.carrierCode; // Sometimes `stripNationalPrefixAndCarrierCode()` won't actually\n      // strip national prefix and will instead prepend some digits to the `number`:\n      // for example, when number `2345678` is passed with `VI` country selected,\n      // it will return `{ number: \"3402345678\" }`, because `340` area code is prepended.\n      // So check if the `nationalNumber` is actually at the end of `this.nationalNumberDigits`.\n\n\n      if (nationalNumber) {\n        var index = this.nationalNumberDigits.indexOf(nationalNumber);\n\n        if (index < 0 || index !== this.nationalNumberDigits.length - nationalNumber.length) {\n          return;\n        }\n      }\n\n      if (carrierCode) {\n        this.carrierCode = carrierCode;\n      }\n\n      this.nationalPrefix = this.nationalNumberDigits.slice(0, this.nationalNumberDigits.length - nationalNumber.length);\n      this.nationalNumberDigits = nationalNumber;\n      return this.nationalPrefix;\n    } // isPossibleNumber(number) {\n    // \tswitch (checkNumberLengthForType(number, undefined, this.metadata)) {\n    // \t\tcase 'IS_POSSIBLE':\n    // \t\t\treturn true\n    // \t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\n    // \t\t// \treturn !this.isInternational()\n    // \t\tdefault:\n    // \t\t\treturn false\n    // \t}\n    // }\n\n  }, {\n    key: \"isCountryCallingCodeAmbiguous\",\n    value: function isCountryCallingCodeAmbiguous() {\n      var countryCodes = this.metadata.getCountryCodesForCallingCode(this.countryCallingCode);\n      return countryCodes && countryCodes.length > 1;\n    }\n  }, {\n    key: \"createFormattingTemplate\",\n    value: function createFormattingTemplate(format) {\n      // The formatter doesn't format numbers when numberPattern contains '|', e.g.\n      // (20|3)\\d{4}. In those cases we quickly return.\n      // (Though there's no such format in current metadata)\n\n      /* istanbul ignore if */\n      if (SUPPORT_LEGACY_FORMATTING_PATTERNS && format.pattern().indexOf('|') >= 0) {\n        return;\n      } // Get formatting template for this phone number format\n\n\n      var template = this.getTemplateForNumberFormatPattern(format, this.nationalPrefix); // If the national number entered is too long\n      // for any phone number format, then abort.\n\n      if (!template) {\n        return;\n      }\n\n      this.template = template;\n      this.populatedNationalNumberTemplate = template; // For convenience, the public `.template` property\n      // contains the whole international number\n      // if the phone number being input is international:\n      // 'x' for the '+' sign, 'x'es for the country phone code,\n      // a spacebar and then the template for the formatted national number.\n\n      if (this.isInternational()) {\n        this.template = this.getInternationalPrefix().replace(/[\\d\\+]/g, DIGIT_PLACEHOLDER) + repeat(DIGIT_PLACEHOLDER, this.countryCallingCode.length) + ' ' + template;\n      }\n\n      return this.template;\n    }\n    /**\r\n     * Generates formatting template for a national phone number,\r\n     * optionally containing a national prefix, for a format.\r\n     * @param  {Format} format\r\n     * @param  {string} nationalPrefix\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"getTemplateForNumberFormatPattern\",\n    value: function getTemplateForNumberFormatPattern(format, nationalPrefix) {\n      var pattern = format.pattern();\n      /* istanbul ignore else */\n\n      if (SUPPORT_LEGACY_FORMATTING_PATTERNS) {\n        pattern = pattern // Replace anything in the form of [..] with \\d\n        .replace(CREATE_CHARACTER_CLASS_PATTERN(), '\\\\d') // Replace any standalone digit (not the one in `{}`) with \\d\n        .replace(CREATE_STANDALONE_DIGIT_PATTERN(), '\\\\d');\n      } // Generate a dummy national number (consisting of `9`s)\n      // that fits this format's `pattern`.\n      //\n      // This match will always succeed,\n      // because the \"longest dummy phone number\"\n      // has enough length to accomodate any possible\n      // national phone number format pattern.\n      //\n\n\n      var digits = LONGEST_DUMMY_PHONE_NUMBER.match(pattern)[0]; // If the national number entered is too long\n      // for any phone number format, then abort.\n\n      if (this.nationalNumberDigits.length > digits.length) {\n        return;\n      } // Get a formatting template which can be used to efficiently format\n      // a partial number where digits are added one by one.\n      // Below `strictPattern` is used for the\n      // regular expression (with `^` and `$`).\n      // This wasn't originally in Google's `libphonenumber`\n      // and I guess they don't really need it\n      // because they're not using \"templates\" to format phone numbers\n      // but I added `strictPattern` after encountering\n      // South Korean phone number formatting bug.\n      //\n      // Non-strict regular expression bug demonstration:\n      //\n      // this.nationalNumberDigits : `111111111` (9 digits)\n      //\n      // pattern : (\\d{2})(\\d{3,4})(\\d{4})\n      // format : `$1 $2 $3`\n      // digits : `9999999999` (10 digits)\n      //\n      // '9999999999'.replace(new RegExp(/(\\d{2})(\\d{3,4})(\\d{4})/g), '$1 $2 $3') = \"99 9999 9999\"\n      //\n      // template : xx xxxx xxxx\n      //\n      // But the correct template in this case is `xx xxx xxxx`.\n      // The template was generated incorrectly because of the\n      // `{3,4}` variability in the `pattern`.\n      //\n      // The fix is, if `this.nationalNumberDigits` has already sufficient length\n      // to satisfy the `pattern` completely then `this.nationalNumberDigits`\n      // is used instead of `digits`.\n\n\n      var strictPattern = new RegExp('^' + pattern + '$');\n      var nationalNumberDummyDigits = this.nationalNumberDigits.replace(/\\d/g, DUMMY_DIGIT); // If `this.nationalNumberDigits` has already sufficient length\n      // to satisfy the `pattern` completely then use it\n      // instead of `digits`.\n\n      if (strictPattern.test(nationalNumberDummyDigits)) {\n        digits = nationalNumberDummyDigits;\n      }\n\n      var numberFormat = this.getFormatFormat(format);\n      var includesNationalPrefix;\n\n      if (nationalPrefix) {\n        if (format.nationalPrefixFormattingRule()) {\n          var numberFormatWithNationalPrefix = numberFormat.replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule());\n\n          if (parseDigits(numberFormatWithNationalPrefix) === nationalPrefix + parseDigits(numberFormat)) {\n            numberFormat = numberFormatWithNationalPrefix;\n            includesNationalPrefix = true;\n            var i = nationalPrefix.length;\n\n            while (i > 0) {\n              numberFormat = numberFormat.replace(/\\d/, DIGIT_PLACEHOLDER);\n              i--;\n            }\n          }\n        }\n      } // Generate formatting template for this phone number format.\n\n\n      var template = digits // Format the dummy phone number according to the format.\n      .replace(new RegExp(pattern), numberFormat) // Replace each dummy digit with a DIGIT_PLACEHOLDER.\n      .replace(new RegExp(DUMMY_DIGIT, 'g'), DIGIT_PLACEHOLDER);\n\n      if (nationalPrefix) {\n        if (!includesNationalPrefix) {\n          // Prepend national prefix to the template manually.\n          template = repeat(DIGIT_PLACEHOLDER, nationalPrefix.length) + this.getSeparatorAfterNationalPrefix(format) + template;\n        }\n      }\n\n      return template;\n    }\n  }, {\n    key: \"formatNextNationalNumberDigits\",\n    value: function formatNextNationalNumberDigits(digits) {\n      // Using `.split('')` to iterate through a string here\n      // to avoid requiring `Symbol.iterator` polyfill.\n      // `.split('')` is generally not safe for Unicode,\n      // but in this particular case for `digits` it is safe.\n      // for (const digit of digits)\n      for (var _iterator3 = digits.split(''), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n        var _ref3;\n\n        if (_isArray3) {\n          if (_i3 >= _iterator3.length) break;\n          _ref3 = _iterator3[_i3++];\n        } else {\n          _i3 = _iterator3.next();\n          if (_i3.done) break;\n          _ref3 = _i3.value;\n        }\n\n        var digit = _ref3;\n\n        // If there is room for more digits in current `template`,\n        // then set the next digit in the `template`,\n        // and return the formatted digits so far.\n        // If more digits are entered than the current format could handle.\n        if (this.populatedNationalNumberTemplate.slice(this.populatedNationalNumberTemplatePosition + 1).search(DIGIT_PLACEHOLDER_MATCHER) < 0) {\n          // Reset the format.\n          this.resetFormat();\n          return;\n        }\n\n        this.populatedNationalNumberTemplatePosition = this.populatedNationalNumberTemplate.search(DIGIT_PLACEHOLDER_MATCHER);\n        this.populatedNationalNumberTemplate = this.populatedNationalNumberTemplate.replace(DIGIT_PLACEHOLDER_MATCHER, digit);\n      } // Return the formatted phone number so far.\n\n\n      return cutAndStripNonPairedParens(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition + 1); // The old way which was good for `input-format` but is not so good\n      // for `react-phone-number-input`'s default input (`InputBasic`).\n      // return closeNonPairedParens(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition + 1)\n      // \t.replace(new RegExp(DIGIT_PLACEHOLDER, 'g'), ' ')\n    }\n  }, {\n    key: \"isInternational\",\n    value: function isInternational() {\n      return this.international;\n    }\n  }, {\n    key: \"getFormatFormat\",\n    value: function getFormatFormat(format) {\n      if (this.isInternational()) {\n        return applyInternationalSeparatorStyle(format.internationalFormat());\n      }\n\n      return format.format();\n    } // Determines the country of the phone number\n    // entered so far based on the country phone code\n    // and the national phone number.\n\n  }, {\n    key: \"determineTheCountry\",\n    value: function determineTheCountry() {\n      this.country = findCountryCode(this.isInternational() ? this.countryCallingCode : this.defaultCallingCode, this.nationalNumberDigits, this.metadata);\n    }\n    /**\r\n     * Returns an instance of `PhoneNumber` class.\r\n     * Will return `undefined` if no national (significant) number\r\n     * digits have been entered so far, or if no `defaultCountry` has been\r\n     * set and the user enters a phone number not in international format.\r\n     */\n\n  }, {\n    key: \"getNumber\",\n    value: function getNumber() {\n      if (this.isInternational()) {\n        if (!this.countryCallingCode) {\n          return;\n        }\n      } else {\n        if (!this.country && !this.defaultCallingCode) {\n          return;\n        }\n      }\n\n      if (!this.nationalNumberDigits) {\n        return undefined;\n      }\n\n      var countryCode = this.country;\n      /* istanbul ignore if */\n\n      if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n        if (this.country === '001') {\n          countryCode = undefined;\n        }\n      }\n\n      var callingCode = this.countryCallingCode || this.defaultCallingCode;\n      var nationalNumber = this.nationalNumberDigits;\n      var carrierCode = this.carrierCode; // When an international number without a leading `+` has been autocorrected,\n      // extract country calling code, because normally it's only extracted\n      // for international numbers with a leading `+`.\n      // Could also just use `parsePhoneNumberFromString()` here\n      // instead of hacking around this single case.\n\n      if (!this.isInternational() && this.nationalNumberDigits === this.digits) {\n        var _extractCountryCallin2 = extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(this.digits, countryCode, callingCode, this.metadata.metadata),\n            countryCallingCode = _extractCountryCallin2.countryCallingCode,\n            number = _extractCountryCallin2.number;\n\n        if (countryCallingCode) {\n          var _stripNationalPrefixA2 = stripNationalPrefixAndCarrierCodeFromCompleteNumber(number, this.metadata),\n              shorterNationalNumber = _stripNationalPrefixA2.nationalNumber,\n              newCarrierCode = _stripNationalPrefixA2.carrierCode;\n\n          nationalNumber = shorterNationalNumber;\n          carrierCode = newCarrierCode;\n        }\n      }\n\n      var phoneNumber = new PhoneNumber(countryCode || callingCode, nationalNumber, this.metadata.metadata);\n\n      if (carrierCode) {\n        phoneNumber.carrierCode = carrierCode;\n      } // Phone number extensions are not supported by \"As You Type\" formatter.\n\n\n      return phoneNumber;\n    }\n    /**\r\n     * @deprecated\r\n     * This method is used in `react-phone-number-input/source/input-control.js`\r\n     * in versions before `3.0.16`.\r\n     */\n\n  }, {\n    key: \"getNationalNumber\",\n    value: function getNationalNumber() {\n      return this.nationalNumberDigits;\n    }\n  }, {\n    key: \"getNonFormattedTemplate\",\n    value: function getNonFormattedTemplate() {\n      return this.getFullNumber(this.getNonFormattedNationalNumber()).replace(/[\\+\\d]/g, DIGIT_PLACEHOLDER);\n    }\n    /**\r\n     * Returns formatted phone number template.\r\n     * @return {string} [template]\r\n     */\n\n  }, {\n    key: \"getTemplate\",\n    value: function getTemplate() {\n      if (!this.template) {\n        return this.getNonFormattedTemplate();\n      }\n\n      var index = -1;\n      var i = 0;\n\n      while (i < (this.isInternational() ? this.getInternationalPrefix({\n        spacing: false\n      }).length : 0) + this.digits.length) {\n        index = this.template.indexOf(DIGIT_PLACEHOLDER, index + 1);\n        i++;\n      }\n\n      return cutAndStripNonPairedParens(this.template, index + 1);\n    }\n  }]);\n\n  return AsYouType;\n}();\n\nexport { AsYouType as default };\nexport function stripNonPairedParens(string) {\n  var dangling_braces = [];\n  var i = 0;\n\n  while (i < string.length) {\n    if (string[i] === '(') {\n      dangling_braces.push(i);\n    } else if (string[i] === ')') {\n      dangling_braces.pop();\n    }\n\n    i++;\n  }\n\n  var start = 0;\n  var cleared_string = '';\n  dangling_braces.push(string.length);\n\n  for (var _i4 = 0, _dangling_braces = dangling_braces; _i4 < _dangling_braces.length; _i4++) {\n    var index = _dangling_braces[_i4];\n    cleared_string += string.slice(start, index);\n    start = index + 1;\n  }\n\n  return cleared_string;\n}\nexport function cutAndStripNonPairedParens(string, cutBeforeIndex) {\n  if (string[cutBeforeIndex] === ')') {\n    cutBeforeIndex++;\n  }\n\n  return stripNonPairedParens(string.slice(0, cutBeforeIndex));\n}\nexport function closeNonPairedParens(template, cut_before) {\n  var retained_template = template.slice(0, cut_before);\n  var opening_braces = countOccurences('(', retained_template);\n  var closing_braces = countOccurences(')', retained_template);\n  var dangling_braces = opening_braces - closing_braces;\n\n  while (dangling_braces > 0 && cut_before < template.length) {\n    if (template[cut_before] === ')') {\n      dangling_braces--;\n    }\n\n    cut_before++;\n  }\n\n  return template.slice(0, cut_before);\n} // Counts all occurences of a symbol in a string.\n// Unicode-unsafe (because using `.split()`).\n\nexport function countOccurences(symbol, string) {\n  var count = 0; // Using `.split('')` to iterate through a string here\n  // to avoid requiring `Symbol.iterator` polyfill.\n  // `.split('')` is generally not safe for Unicode,\n  // but in this particular case for counting brackets it is safe.\n  // for (const character of string)\n\n  for (var _iterator4 = string.split(''), _isArray4 = Array.isArray(_iterator4), _i5 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {\n    var _ref4;\n\n    if (_isArray4) {\n      if (_i5 >= _iterator4.length) break;\n      _ref4 = _iterator4[_i5++];\n    } else {\n      _i5 = _iterator4.next();\n      if (_i5.done) break;\n      _ref4 = _i5.value;\n    }\n\n    var character = _ref4;\n\n    if (character === symbol) {\n      count++;\n    }\n  }\n\n  return count;\n} // Repeats a string (or a symbol) N times.\n// http://stackoverflow.com/questions/202605/repeat-string-javascript\n\nexport function repeat(string, times) {\n  if (times < 1) {\n    return '';\n  }\n\n  var result = '';\n\n  while (times > 1) {\n    if (times & 1) {\n      result += string;\n    }\n\n    times >>= 1;\n    string += string;\n  }\n\n  return result + string;\n}\n/**\r\n * Extracts formatted phone number from text (if there's any).\r\n * @param  {string} text\r\n * @return {string} [formattedPhoneNumber]\r\n */\n\nfunction extractFormattedPhoneNumber(text) {\n  // Attempt to extract a possible number from the string passed in.\n  var startsAt = text.search(VALID_PHONE_NUMBER);\n\n  if (startsAt < 0) {\n    return;\n  } // Trim everything to the left of the phone number.\n\n\n  text = text.slice(startsAt); // Trim the `+`.\n\n  var hasPlus;\n\n  if (text[0] === '+') {\n    hasPlus = true;\n    text = text.slice('+'.length);\n  } // Trim everything to the right of the phone number.\n\n\n  text = text.replace(AFTER_PHONE_NUMBER_DIGITS_END_PATTERN, ''); // Re-add the previously trimmed `+`.\n\n  if (hasPlus) {\n    text = '+' + text;\n  }\n\n  return text;\n}\n//# sourceMappingURL=AsYouType.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.count_occurences = count_occurences;\n// Counts all occurences of a symbol in a string\nfunction count_occurences(symbol, string) {\n\tvar count = 0;\n\t// Using `.split('')` here instead of normal `for ... of`\n\t// because the importing application doesn't neccessarily include an ES6 polyfill.\n\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\n\t// (the ones consisting of four bytes)\n\t// but template placeholder characters don't fall into that range\n\t// so skipping such miscellaneous \"exotic\" characters\n\t// won't matter here for just counting placeholder character occurrences.\n\tfor (var _iterator = string.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar character = _ref;\n\n\t\tif (character === symbol) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n//# sourceMappingURL=helpers.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nexports.default = function (template) {\n\tvar placeholder = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'x';\n\tvar should_close_braces = arguments[2];\n\n\tif (!template) {\n\t\treturn function (value) {\n\t\t\treturn { text: value };\n\t\t};\n\t}\n\n\tvar characters_in_template = (0, _helpers.count_occurences)(placeholder, template);\n\n\treturn function (value) {\n\t\tif (!value) {\n\t\t\treturn { text: '', template: template };\n\t\t}\n\n\t\tvar value_character_index = 0;\n\t\tvar filled_in_template = '';\n\n\t\t// Using `.split('')` here instead of normal `for ... of`\n\t\t// because the importing application doesn't neccessarily include an ES6 polyfill.\n\t\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\n\t\t// (the ones consisting of four bytes)\n\t\t// but template placeholder characters don't fall into that range\n\t\t// and appending UTF-8 characters to a string in parts still works.\n\t\tfor (var _iterator = template.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\t\tvar _ref;\n\n\t\t\tif (_isArray) {\n\t\t\t\tif (_i >= _iterator.length) break;\n\t\t\t\t_ref = _iterator[_i++];\n\t\t\t} else {\n\t\t\t\t_i = _iterator.next();\n\t\t\t\tif (_i.done) break;\n\t\t\t\t_ref = _i.value;\n\t\t\t}\n\n\t\t\tvar character = _ref;\n\n\t\t\tif (character !== placeholder) {\n\t\t\t\tfilled_in_template += character;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tfilled_in_template += value[value_character_index];\n\t\t\tvalue_character_index++;\n\n\t\t\t// If the last available value character has been filled in,\n\t\t\t// then return the filled in template\n\t\t\t// (either trim the right part or retain it,\n\t\t\t//  if no more character placeholders in there)\n\t\t\tif (value_character_index === value.length) {\n\t\t\t\t// If there are more character placeholders\n\t\t\t\t// in the right part of the template\n\t\t\t\t// then simply trim it.\n\t\t\t\tif (value.length < characters_in_template) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (should_close_braces) {\n\t\t\tfilled_in_template = (0, _closeBraces2.default)(filled_in_template, template);\n\t\t}\n\n\t\treturn { text: filled_in_template, template: template };\n\t};\n};\n\nvar _helpers = require('./helpers');\n\nvar _closeBraces = require('./close braces');\n\nvar _closeBraces2 = _interopRequireDefault(_closeBraces);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n//# sourceMappingURL=template formatter.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = format;\n\nvar _templateFormatter = require('./template formatter');\n\nvar _templateFormatter2 = _interopRequireDefault(_templateFormatter);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Formats `value` value preserving `caret` at the same character.\n//\n// `{ value, caret }` attribute is the result of `parse()` function call.\n//\n// Returns `{ text, caret }` where the new `caret` is the caret position\n// inside `text` text corresponding to the original `caret` position inside `value`.\n//\n// `formatter(value)` is a function returning `{ text, template }`.\n//\n// `text` is the `value` value formatted using `template`.\n// It may either cut off the non-filled right part of the `template`\n// or it may fill the non-filled character placeholders\n// in the right part of the `template` with `spacer`\n// which is a space (' ') character by default.\n//\n// `template` is the template used to format the `value`.\n// It can be either a full-length template or a partial template.\n//\n// `formatter` can also be a string — a `template`\n// where character placeholders are denoted by 'x'es.\n// In this case `formatter` function is automatically created.\n//\n// Example:\n//\n// `value` is '880',\n// `caret` is `2` (before the first `0`)\n//\n// `formatter` is `'880' =>\n//   { text: '8 (80 )', template: 'x (xxx) xxx-xx-xx' }`\n//\n// The result is `{ text: '8 (80 )', caret: 4 }`.\n//\nfunction format(value, caret, formatter) {\n\tif (typeof formatter === 'string') {\n\t\tformatter = (0, _templateFormatter2.default)(formatter);\n\t}\n\n\tvar _ref = formatter(value) || {},\n\t    text = _ref.text,\n\t    template = _ref.template;\n\n\tif (text === undefined) {\n\t\ttext = value;\n\t}\n\n\tif (template) {\n\t\tif (caret === undefined) {\n\t\t\tcaret = text.length;\n\t\t} else {\n\t\t\tvar index = 0;\n\t\t\tvar found = false;\n\n\t\t\tvar possibly_last_input_character_index = -1;\n\n\t\t\twhile (index < text.length && index < template.length) {\n\t\t\t\t// Character placeholder found\n\t\t\t\tif (text[index] !== template[index]) {\n\t\t\t\t\tif (caret === 0) {\n\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\tcaret = index;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tpossibly_last_input_character_index = index;\n\n\t\t\t\t\tcaret--;\n\t\t\t\t}\n\n\t\t\t\tindex++;\n\t\t\t}\n\n\t\t\t// If the caret was positioned after last input character,\n\t\t\t// then the text caret index is just after the last input character.\n\t\t\tif (!found) {\n\t\t\t\tcaret = possibly_last_input_character_index + 1;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { text: text, caret: caret };\n}\n//# sourceMappingURL=format.js.map","import PhoneNumberMatcher from './PhoneNumberMatcher';\nexport default function findNumbers(text, options, metadata) {\n  var matcher = new PhoneNumberMatcher(text, options, metadata);\n  var results = [];\n\n  while (matcher.hasNext()) {\n    results.push(matcher.next());\n  }\n\n  return results;\n}\n//# sourceMappingURL=findNumbers_.js.map","import _findNumbers from './findNumbers_';\nimport { normalizeArguments } from './parsePhoneNumber';\nexport default function findNumbers() {\n  var _normalizeArguments = normalizeArguments(arguments),\n      text = _normalizeArguments.text,\n      options = _normalizeArguments.options,\n      metadata = _normalizeArguments.metadata;\n\n  return _findNumbers(text, options, metadata);\n}\n//# sourceMappingURL=findNumbers.js.map","function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport parseNumber from './parse_';\nexport default function parsePhoneNumber(text, options, metadata) {\n  return parseNumber(text, _objectSpread({}, options, {\n    v2: true\n  }), metadata);\n}\n//# sourceMappingURL=parsePhoneNumber_.js.map","import Metadata from './metadata';\nimport { checkNumberLengthForType } from './getNumberType_';\nexport default function isPossiblePhoneNumber(input, options, metadata) {\n  /* istanbul ignore if */\n  if (options === undefined) {\n    options = {};\n  }\n\n  metadata = new Metadata(metadata);\n\n  if (options.v2) {\n    if (!input.countryCallingCode) {\n      throw new Error('Invalid phone number object passed');\n    }\n\n    metadata.chooseCountryByCountryCallingCode(input.countryCallingCode);\n  } else {\n    if (!input.phone) {\n      return false;\n    }\n\n    if (input.country) {\n      if (!metadata.hasCountry(input.country)) {\n        throw new Error(\"Unknown country: \".concat(input.country));\n      }\n\n      metadata.country(input.country);\n    } else {\n      if (!input.countryCallingCode) {\n        throw new Error('Invalid phone number object passed');\n      }\n\n      metadata.chooseCountryByCountryCallingCode(input.countryCallingCode);\n    }\n  }\n\n  if (metadata.possibleLengths()) {\n    return isPossibleNumber(input.phone || input.nationalNumber, undefined, metadata);\n  } else {\n    // There was a bug between `1.7.35` and `1.7.37` where \"possible_lengths\"\n    // were missing for \"non-geographical\" numbering plans.\n    // Just assume the number is possible in such cases:\n    // it's unlikely that anyone generated their custom metadata\n    // in that short period of time (one day).\n    // This code can be removed in some future major version update.\n    if (input.countryCallingCode && metadata.isNonGeographicCallingCode(input.countryCallingCode)) {\n      // \"Non-geographic entities\" did't have `possibleLengths`\n      // due to a bug in metadata generation process.\n      return true;\n    } else {\n      throw new Error('Missing \"possibleLengths\" in metadata. Perhaps the metadata has been generated before v1.0.18.');\n    }\n  }\n}\nexport function isPossibleNumber(nationalNumber, isInternational, metadata) {\n  switch (checkNumberLengthForType(nationalNumber, undefined, metadata)) {\n    case 'IS_POSSIBLE':\n      return true;\n    // case 'IS_POSSIBLE_LOCAL_ONLY':\n    // \treturn !isInternational\n\n    default:\n      return false;\n  }\n}\n//# sourceMappingURL=isPossibleNumber_.js.map","import Metadata from './metadata';\nimport { matchesEntirely } from './util';\nimport getNumberType from './getNumberType_';\n/**\r\n * Checks if a given phone number is valid.\r\n *\r\n * If the `number` is a string, it will be parsed to an object,\r\n * but only if it contains only valid phone number characters (including punctuation).\r\n * If the `number` is an object, it is used as is.\r\n *\r\n * The optional `defaultCountry` argument is the default country.\r\n * I.e. it does not restrict to just that country,\r\n * e.g. in those cases where several countries share\r\n * the same phone numbering rules (NANPA, Britain, etc).\r\n * For example, even though the number `07624 369230`\r\n * belongs to the Isle of Man (\"IM\" country code)\r\n * calling `isValidNumber('07624369230', 'GB', metadata)`\r\n * still returns `true` because the country is not restricted to `GB`,\r\n * it's just that `GB` is the default one for the phone numbering rules.\r\n * For restricting the country see `isValidNumberForRegion()`\r\n * though restricting a country might not be a good idea.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n *\r\n * Examples:\r\n *\r\n * ```js\r\n * isValidNumber('+78005553535', metadata)\r\n * isValidNumber('8005553535', 'RU', metadata)\r\n * isValidNumber('88005553535', 'RU', metadata)\r\n * isValidNumber({ phone: '8005553535', country: 'RU' }, metadata)\r\n * ```\r\n */\n\nexport default function isValidNumber(input, options, metadata) {\n  // If assigning the `{}` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  options = options || {};\n  metadata = new Metadata(metadata); // This is just to support `isValidNumber({})`\n  // for cases when `parseNumber()` returns `{}`.\n\n  if (!input.country) {\n    return false;\n  }\n\n  metadata.selectNumberingPlan(input.country, input.countryCallingCode); // By default, countries only have type regexps when it's required for\n  // distinguishing different countries having the same `countryCallingCode`.\n\n  if (metadata.hasTypes()) {\n    return getNumberType(input, options, metadata.metadata) !== undefined;\n  } // If there are no type regexps for this country in metadata then use\n  // `nationalNumberPattern` as a \"better than nothing\" replacement.\n\n\n  var national_number = options.v2 ? input.nationalNumber : input.phone;\n  return matchesEntirely(national_number, metadata.nationalNumberPattern());\n}\n//# sourceMappingURL=validate_.js.map","function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\nimport { VALID_PUNCTUATION } from './constants';\nimport { matchesEntirely } from './util';\nimport Metadata from './metadata';\nimport { getIDDPrefix } from './IDD';\nimport { formatRFC3966 } from './RFC3966';\nvar DEFAULT_OPTIONS = {\n  formatExtension: function formatExtension(formattedNumber, extension, metadata) {\n    return \"\".concat(formattedNumber).concat(metadata.ext()).concat(extension);\n  } // Formats a phone number\n  //\n  // Example use cases:\n  //\n  // ```js\n  // formatNumber('8005553535', 'RU', 'INTERNATIONAL')\n  // formatNumber('8005553535', 'RU', 'INTERNATIONAL', metadata)\n  // formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL')\n  // formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL', metadata)\n  // formatNumber('+78005553535', 'NATIONAL')\n  // formatNumber('+78005553535', 'NATIONAL', metadata)\n  // ```\n  //\n\n};\nexport default function formatNumber(input, format, options, metadata) {\n  // Apply default options.\n  if (options) {\n    options = _objectSpread({}, DEFAULT_OPTIONS, options);\n  } else {\n    options = DEFAULT_OPTIONS;\n  }\n\n  metadata = new Metadata(metadata);\n\n  if (input.country && input.country !== '001') {\n    // Validate `input.country`.\n    if (!metadata.hasCountry(input.country)) {\n      throw new Error(\"Unknown country: \".concat(input.country));\n    }\n\n    metadata.country(input.country);\n  } else if (input.countryCallingCode) {\n    metadata.chooseCountryByCountryCallingCode(input.countryCallingCode);\n  } else return input.phone || '';\n\n  var countryCallingCode = metadata.countryCallingCode();\n  var nationalNumber = options.v2 ? input.nationalNumber : input.phone; // This variable should have been declared inside `case`s\n  // but Babel has a bug and it says \"duplicate variable declaration\".\n\n  var number;\n\n  switch (format) {\n    case 'NATIONAL':\n      // Legacy argument support.\n      // (`{ country: ..., phone: '' }`)\n      if (!nationalNumber) {\n        return '';\n      }\n\n      number = formatNationalNumber(nationalNumber, 'NATIONAL', metadata, options);\n      return addExtension(number, input.ext, metadata, options.formatExtension);\n\n    case 'INTERNATIONAL':\n      // Legacy argument support.\n      // (`{ country: ..., phone: '' }`)\n      if (!nationalNumber) {\n        return \"+\".concat(countryCallingCode);\n      }\n\n      number = formatNationalNumber(nationalNumber, 'INTERNATIONAL', metadata, options);\n      number = \"+\".concat(countryCallingCode, \" \").concat(number);\n      return addExtension(number, input.ext, metadata, options.formatExtension);\n\n    case 'E.164':\n      // `E.164` doesn't define \"phone number extensions\".\n      return \"+\".concat(countryCallingCode).concat(nationalNumber);\n\n    case 'RFC3966':\n      return formatRFC3966({\n        number: \"+\".concat(countryCallingCode).concat(nationalNumber),\n        ext: input.ext\n      });\n\n    case 'IDD':\n      if (!options.fromCountry) {\n        return; // throw new Error('`fromCountry` option not passed for IDD-prefixed formatting.')\n      }\n\n      var IDDPrefix = getIDDPrefix(options.fromCountry, undefined, metadata.metadata);\n\n      if (!IDDPrefix) {\n        return;\n      }\n\n      if (options.humanReadable) {\n        var formattedForSameCountryCallingCode = countryCallingCode && formatIDDSameCountryCallingCodeNumber(nationalNumber, metadata.countryCallingCode(), options.fromCountry, metadata, options);\n\n        if (formattedForSameCountryCallingCode) {\n          number = formattedForSameCountryCallingCode;\n        } else {\n          number = \"\".concat(IDDPrefix, \" \").concat(countryCallingCode, \" \").concat(formatNationalNumber(nationalNumber, 'INTERNATIONAL', metadata, options));\n        }\n\n        return addExtension(number, input.ext, metadata, options.formatExtension);\n      }\n\n      return \"\".concat(IDDPrefix).concat(countryCallingCode).concat(nationalNumber);\n\n    default:\n      throw new Error(\"Unknown \\\"format\\\" argument passed to \\\"formatNumber()\\\": \\\"\".concat(format, \"\\\"\"));\n  }\n} // This was originally set to $1 but there are some countries for which the\n// first group is not used in the national pattern (e.g. Argentina) so the $1\n// group does not match correctly.  Therefore, we use \\d, so that the first\n// group actually used in the pattern will be matched.\n\nexport var FIRST_GROUP_PATTERN = /(\\$\\d)/;\nexport function formatNationalNumberUsingFormat(number, format, useInternationalSeparator, useNationalPrefixFormattingRule, metadata) {\n  var formattedNumber = number.replace(new RegExp(format.pattern()), useInternationalSeparator ? format.internationalFormat() : useNationalPrefixFormattingRule && format.nationalPrefixFormattingRule() ? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule()) : format.format());\n\n  if (useInternationalSeparator) {\n    return applyInternationalSeparatorStyle(formattedNumber);\n  }\n\n  return formattedNumber;\n}\n\nfunction formatNationalNumber(number, formatAs, metadata, options) {\n  var format = chooseFormatForNumber(metadata.formats(), number);\n\n  if (!format) {\n    return number;\n  }\n\n  return formatNationalNumberUsingFormat(number, format, formatAs === 'INTERNATIONAL', format.nationalPrefixIsOptionalWhenFormattingInNationalFormat() && options.nationalPrefix === false ? false : true, metadata);\n}\n\nfunction chooseFormatForNumber(availableFormats, nationalNnumber) {\n  for (var _iterator = availableFormats, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var format = _ref;\n\n    // Validate leading digits\n    if (format.leadingDigitsPatterns().length > 0) {\n      // The last leading_digits_pattern is used here, as it is the most detailed\n      var lastLeadingDigitsPattern = format.leadingDigitsPatterns()[format.leadingDigitsPatterns().length - 1]; // If leading digits don't match then move on to the next phone number format\n\n      if (nationalNnumber.search(lastLeadingDigitsPattern) !== 0) {\n        continue;\n      }\n    } // Check that the national number matches the phone number format regular expression\n\n\n    if (matchesEntirely(nationalNnumber, format.pattern())) {\n      return format;\n    }\n  }\n} // Removes brackets and replaces dashes with spaces.\n//\n// E.g. \"(999) 111-22-33\" -> \"999 111 22 33\"\n//\n// For some reason Google's metadata contains `<intlFormat/>`s with brackets and dashes.\n// Meanwhile, there's no single opinion about using punctuation in international phone numbers.\n//\n// For example, Google's `<intlFormat/>` for USA is `+1 213-373-4253`.\n// And here's a quote from WikiPedia's \"North American Numbering Plan\" page:\n// https://en.wikipedia.org/wiki/North_American_Numbering_Plan\n//\n// \"The country calling code for all countries participating in the NANP is 1.\n// In international format, an NANP number should be listed as +1 301 555 01 00,\n// where 301 is an area code (Maryland).\"\n//\n// I personally prefer the international format without any punctuation.\n// For example, brackets are remnants of the old age, meaning that the\n// phone number part in brackets (so called \"area code\") can be omitted\n// if dialing within the same \"area\".\n// And hyphens were clearly introduced for splitting local numbers into memorizable groups.\n// For example, remembering \"5553535\" is difficult but \"555-35-35\" is much simpler.\n// Imagine a man taking a bus from home to work and seeing an ad with a phone number.\n// He has a couple of seconds to memorize that number until it passes by.\n// If it were spaces instead of hyphens the man wouldn't necessarily get it,\n// but with hyphens instead of spaces the grouping is more explicit.\n// I personally think that hyphens introduce visual clutter,\n// so I prefer replacing them with spaces in international numbers.\n// In the modern age all output is done on displays where spaces are clearly distinguishable\n// so hyphens can be safely replaced with spaces without losing any legibility.\n//\n\n\nexport function applyInternationalSeparatorStyle(local) {\n  return local.replace(new RegExp(\"[\".concat(VALID_PUNCTUATION, \"]+\"), 'g'), ' ').trim();\n}\n\nfunction addExtension(formattedNumber, ext, metadata, formatExtension) {\n  return ext ? formatExtension(formattedNumber, ext, metadata) : formattedNumber;\n}\n\nfunction formatIDDSameCountryCallingCodeNumber(number, toCountryCallingCode, fromCountry, toCountryMetadata, options) {\n  var fromCountryMetadata = new Metadata(toCountryMetadata.metadata);\n  fromCountryMetadata.country(fromCountry); // If calling within the same country calling code.\n\n  if (toCountryCallingCode === fromCountryMetadata.countryCallingCode()) {\n    // For NANPA regions, return the national format for these regions\n    // but prefix it with the country calling code.\n    if (toCountryCallingCode === '1') {\n      return toCountryCallingCode + ' ' + formatNationalNumber(number, 'NATIONAL', toCountryMetadata, options);\n    } // If regions share a country calling code, the country calling code need\n    // not be dialled. This also applies when dialling within a region, so this\n    // if clause covers both these cases. Technically this is the case for\n    // dialling from La Reunion to other overseas departments of France (French\n    // Guiana, Martinique, Guadeloupe), but not vice versa - so we don't cover\n    // this edge case for now and for those cases return the version including\n    // country calling code. Details here:\n    // http://www.petitfute.com/voyage/225-info-pratiques-reunion\n    //\n\n\n    return formatNationalNumber(number, 'NATIONAL', toCountryMetadata, options);\n  }\n}\n//# sourceMappingURL=format_.js.map","import { MIN_LENGTH_FOR_NSN, VALID_DIGITS, VALID_PUNCTUATION, PLUS_CHARS } from './constants';\nimport { EXTN_PATTERNS_FOR_PARSING } from './extension'; //  Regular expression of viable phone numbers. This is location independent.\n//  Checks we have at least three leading digits, and only valid punctuation,\n//  alpha characters and digits in the phone number. Does not include extension\n//  data. The symbol 'x' is allowed here as valid punctuation since it is often\n//  used as a placeholder for carrier codes, for example in Brazilian phone\n//  numbers. We also allow multiple '+' characters at the start.\n//\n//  Corresponds to the following:\n//  [digits]{minLengthNsn}|\n//  plus_sign*\n//  (([punctuation]|[star])*[digits]){3,}([punctuation]|[star]|[digits]|[alpha])*\n//\n//  The first reg-ex is to allow short numbers (two digits long) to be parsed if\n//  they are entered as \"15\" etc, but only if there is no punctuation in them.\n//  The second expression restricts the number of digits to three or more, but\n//  then allows them to be in international form, and to have alpha-characters\n//  and punctuation. We split up the two reg-exes here and combine them when\n//  creating the reg-ex VALID_PHONE_NUMBER_PATTERN itself so we can prefix it\n//  with ^ and append $ to each branch.\n//\n//  \"Note VALID_PUNCTUATION starts with a -,\n//   so must be the first in the range\" (c) Google devs.\n//  (wtf did they mean by saying that; probably nothing)\n//\n\nvar MIN_LENGTH_PHONE_NUMBER_PATTERN = '[' + VALID_DIGITS + ']{' + MIN_LENGTH_FOR_NSN + '}'; //\n// And this is the second reg-exp:\n// (see MIN_LENGTH_PHONE_NUMBER_PATTERN for a full description of this reg-exp)\n//\n\nvar VALID_PHONE_NUMBER = '[' + PLUS_CHARS + ']{0,1}' + '(?:' + '[' + VALID_PUNCTUATION + ']*' + '[' + VALID_DIGITS + ']' + '){3,}' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']*'; // The combined regular expression for valid phone numbers:\n//\n\nvar VALID_PHONE_NUMBER_PATTERN = new RegExp( // Either a short two-digit-only phone number\n'^' + MIN_LENGTH_PHONE_NUMBER_PATTERN + '$' + '|' + // Or a longer fully parsed phone number (min 3 characters)\n'^' + VALID_PHONE_NUMBER + // Phone number extensions\n'(?:' + EXTN_PATTERNS_FOR_PARSING + ')?' + '$', 'i'); // Checks to see if the string of characters could possibly be a phone number at\n// all. At the moment, checks to see that the string begins with at least 2\n// digits, ignoring any punctuation commonly found in phone numbers. This method\n// does not require the number to be normalized in advance - but does assume\n// that leading non-number symbols have been removed, such as by the method\n// `extract_possible_number`.\n//\n\nexport default function isViablePhoneNumber(number) {\n  return number.length >= MIN_LENGTH_FOR_NSN && VALID_PHONE_NUMBER_PATTERN.test(number);\n}\n//# sourceMappingURL=isViablePhoneNumber.js.map","import searchNumbers from './searchNumbers';\nimport { getArguments } from './findPhoneNumbersInText';\nexport default function searchPhoneNumbersInText(text, defaultCountry, options, metadata) {\n  var args = getArguments(defaultCountry, options, metadata);\n  return searchNumbers(text, args.options, args.metadata);\n}\n//# sourceMappingURL=searchPhoneNumbersInText.js.map","import Metadata from './metadata';\nexport default function getCountries(metadata) {\n  return new Metadata(metadata).getCountries();\n}\n//# sourceMappingURL=getCountries.js.map","import PhoneNumber from './PhoneNumber';\nexport default function getExampleNumber(country, examples, metadata) {\n  if (examples[country]) {\n    return new PhoneNumber(country, examples[country], metadata);\n  }\n}\n//# sourceMappingURL=getExampleNumber.js.map","import AsYouType from './AsYouType';\n/**\r\n * Formats a (possibly incomplete) phone number.\r\n * The phone number can be either in E.164 format\r\n * or in a form of national number digits.\r\n * @param {string} value - A possibly incomplete phone number. Either in E.164 format or in a form of national number digits.\r\n * @param {string?} country - Two-letter (\"ISO 3166-1 alpha-2\") country code.\r\n * @return {string} Formatted (possibly incomplete) phone number.\r\n */\n\nexport default function formatIncompletePhoneNumber(value, country, metadata) {\n  if (!metadata) {\n    metadata = country;\n    country = undefined;\n  }\n\n  return new AsYouType(country, metadata).input(value);\n}\n//# sourceMappingURL=formatIncompletePhoneNumber.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.labels = exports.metadata = undefined;\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar metadata = exports.metadata = _propTypes2.default.shape({\n\tcountry_calling_codes: _propTypes2.default.object.isRequired,\n\tcountries: _propTypes2.default.object.isRequired\n});\n\nvar labels = exports.labels = _propTypes2.default.objectOf(_propTypes2.default.string);\n//# sourceMappingURL=PropTypes.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nexports.default = function (template, placeholder, parse) {\n\tif (typeof placeholder === 'function') {\n\t\tparse = placeholder;\n\t\tplaceholder = 'x';\n\t}\n\n\tvar max_characters = (0, _helpers.count_occurences)(placeholder, template);\n\n\treturn function (character, value) {\n\t\tif (value.length < max_characters) {\n\t\t\treturn parse(character, value);\n\t\t}\n\t};\n};\n\nvar _helpers = require('./helpers');\n//# sourceMappingURL=template parser.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _class, _temp2;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _parse2 = require('./parse');\n\nvar _parse3 = _interopRequireDefault(_parse2);\n\nvar _inputControl = require('./input control');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n// Usage:\n//\n// <ReactInput\n// \tvalue={this.state.phone}\n// \tonChange={phone => this.setState({ phone })}\n// \tparse={character => character}\n// \tformat={value => ({ text: value, template: 'xxxxxxxx' })}/>\n//\nvar ReactInput = (_temp2 = _class = function (_React$Component) {\n\t_inherits(ReactInput, _React$Component);\n\n\tfunction ReactInput() {\n\t\tvar _ref;\n\n\t\tvar _temp, _this, _ret;\n\n\t\t_classCallCheck(this, ReactInput);\n\n\t\tfor (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t\t\targs[_key] = arguments[_key];\n\t\t}\n\n\t\treturn _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ReactInput.__proto__ || Object.getPrototypeOf(ReactInput)).call.apply(_ref, [this].concat(args))), _this), _this.storeInstance = function (instance) {\n\t\t\t_this.input = instance;\n\t\t}, _this.getInputElement = function () {\n\t\t\treturn _this.input;\n\t\t}, _this.onChange = function (event) {\n\t\t\tvar _this$props = _this.props,\n\t\t\t    parse = _this$props.parse,\n\t\t\t    format = _this$props.format;\n\n\n\t\t\treturn (0, _inputControl.onChange)(event, _this.getInputElement(), parse, format, _this.props.onChange);\n\t\t}, _this.onPaste = function (event) {\n\t\t\tvar _this$props2 = _this.props,\n\t\t\t    parse = _this$props2.parse,\n\t\t\t    format = _this$props2.format;\n\n\n\t\t\treturn (0, _inputControl.onPaste)(event, _this.getInputElement(), parse, format, _this.props.onChange);\n\t\t}, _this.onCut = function (event) {\n\t\t\tvar _this$props3 = _this.props,\n\t\t\t    parse = _this$props3.parse,\n\t\t\t    format = _this$props3.format;\n\n\n\t\t\treturn (0, _inputControl.onCut)(event, _this.getInputElement(), parse, format, _this.props.onChange);\n\t\t}, _this.onBlur = function (event) {\n\t\t\tvar _this$props4 = _this.props,\n\t\t\t    parse = _this$props4.parse,\n\t\t\t    onBlur = _this$props4.onBlur;\n\n\t\t\t// This `onBlur` interceptor is a workaround for `redux-form`,\n\t\t\t// so that it gets the right (parsed, not the formatted one)\n\t\t\t// `event.target.value` in its `onBlur` handler.\n\n\t\t\tif (onBlur) {\n\t\t\t\tvar _event = _extends({}, event, {\n\t\t\t\t\ttarget: _extends({}, event.target, {\n\t\t\t\t\t\tvalue: (0, _parse3.default)(_this.getInputElement().value, undefined, parse).value\n\t\t\t\t\t})\n\n\t\t\t\t\t// For `redux-form` event detection.\n\t\t\t\t\t// https://github.com/erikras/redux-form/blob/v5/src/events/isEvent.js\n\t\t\t\t});_event.stopPropagation = event.stopPropagation;\n\t\t\t\t_event.preventDefault = event.preventDefault;\n\n\t\t\t\tonBlur(_event);\n\t\t\t}\n\t\t}, _this.onKeyDown = function (event) {\n\t\t\tvar _this$props5 = _this.props,\n\t\t\t    parse = _this$props5.parse,\n\t\t\t    format = _this$props5.format;\n\n\n\t\t\tif (_this.props.onKeyDown) {\n\t\t\t\t_this.props.onKeyDown(event);\n\t\t\t}\n\n\t\t\treturn (0, _inputControl.onKeyDown)(event, _this.getInputElement(), parse, format, _this.props.onChange);\n\t\t}, _temp), _possibleConstructorReturn(_this, _ret);\n\t}\n\n\t_createClass(ReactInput, [{\n\t\tkey: 'render',\n\t\tvalue: function render() {\n\t\t\tvar _props = this.props,\n\t\t\t    value = _props.value,\n\t\t\t    parse = _props.parse,\n\t\t\t    format = _props.format,\n\t\t\t    inputComponent = _props.inputComponent,\n\t\t\t    rest = _objectWithoutProperties(_props, ['value', 'parse', 'format', 'inputComponent']);\n\n\t\t\t// Non-string `inputComponent`s would work in this case\n\t\t\t// but it would also introduce a caret reset bug:\n\t\t\t// the caret position would reset on each input.\n\t\t\t// The origins of this bug are unknown, they may be\n\t\t\t// somehow related to the `ref` property\n\t\t\t// being intercepted by React here.\n\n\n\t\t\treturn _react2.default.createElement(inputComponent, _extends({}, rest, {\n\t\t\t\tref: this.storeInstance,\n\t\t\t\tvalue: format(isEmpty(value) ? '' : value).text,\n\t\t\t\tonKeyDown: this.onKeyDown,\n\t\t\t\tonChange: this.onChange,\n\t\t\t\tonPaste: this.onPaste,\n\t\t\t\tonCut: this.onCut,\n\t\t\t\tonBlur: this.onBlur\n\t\t\t}));\n\t\t}\n\n\t\t/**\r\n   * Returns `<input/>` DOM Element.\r\n   * @return {DOMElement}\r\n   */\n\n\n\t\t// This handler is a workaround for `redux-form`.\n\n\t}, {\n\t\tkey: 'focus',\n\n\n\t\t/**\r\n   * Focuses the `<input/>`.\r\n   * Can be called manually.\r\n   */\n\t\tvalue: function focus() {\n\t\t\tthis.getInputElement().focus();\n\t\t}\n\t}]);\n\n\treturn ReactInput;\n}(_react2.default.Component), _class.propTypes = {\n\t// Parses a single characher of `<input/>` text.\n\tparse: _propTypes2.default.func.isRequired,\n\n\t// Formats `value` into `<input/>` text.\n\tformat: _propTypes2.default.func.isRequired,\n\n\t// Renders `<input/>` by default.\n\tinputComponent: _propTypes2.default.elementType.isRequired,\n\n\t// `<input/>` `type` attribute.\n\ttype: _propTypes2.default.string.isRequired,\n\n\t// Is parsed from <input/> text.\n\tvalue: _propTypes2.default.string,\n\n\t// This handler is called each time `<input/>` text is changed.\n\tonChange: _propTypes2.default.func.isRequired,\n\n\t// This `onBlur` interceptor is a workaround for `redux-form`,\n\t// so that it gets the parsed `value` in its `onBlur` handler,\n\t// not the formatted text.\n\tonBlur: _propTypes2.default.func,\n\n\t// Passthrough\n\tonKeyDown: _propTypes2.default.func\n}, _class.defaultProps = {\n\t// Renders `<input/>` by default.\n\tinputComponent: 'input',\n\n\t// `<input/>` `type` attribute.\n\ttype: 'text'\n}, _temp2);\nexports.default = ReactInput;\n\n\nfunction isEmpty(value) {\n\treturn value === undefined || value === null;\n}\n//# sourceMappingURL=ReactInput.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nexports.default = function (character, value) {\n\treturn DIGITS[character];\n};\n\n// Copied from `libphonenumber-js`:\n// https://github.com/catamphetamine/libphonenumber-js/blob/master/source/parse.js\n//\n// These mappings map a character (key) to a specific digit that should\n// replace it for normalization purposes. Non-European digits that\n// may be used in phone numbers are mapped to a European equivalent.\n//\n// E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\n//\nvar DIGITS = exports.DIGITS = {\n\t'0': '0',\n\t'1': '1',\n\t'2': '2',\n\t'3': '3',\n\t'4': '4',\n\t'5': '5',\n\t'6': '6',\n\t'7': '7',\n\t'8': '8',\n\t'9': '9',\n\t'\\uFF10': '0', // Fullwidth digit 0\n\t'\\uFF11': '1', // Fullwidth digit 1\n\t'\\uFF12': '2', // Fullwidth digit 2\n\t'\\uFF13': '3', // Fullwidth digit 3\n\t'\\uFF14': '4', // Fullwidth digit 4\n\t'\\uFF15': '5', // Fullwidth digit 5\n\t'\\uFF16': '6', // Fullwidth digit 6\n\t'\\uFF17': '7', // Fullwidth digit 7\n\t'\\uFF18': '8', // Fullwidth digit 8\n\t'\\uFF19': '9', // Fullwidth digit 9\n\t'\\u0660': '0', // Arabic-indic digit 0\n\t'\\u0661': '1', // Arabic-indic digit 1\n\t'\\u0662': '2', // Arabic-indic digit 2\n\t'\\u0663': '3', // Arabic-indic digit 3\n\t'\\u0664': '4', // Arabic-indic digit 4\n\t'\\u0665': '5', // Arabic-indic digit 5\n\t'\\u0666': '6', // Arabic-indic digit 6\n\t'\\u0667': '7', // Arabic-indic digit 7\n\t'\\u0668': '8', // Arabic-indic digit 8\n\t'\\u0669': '9', // Arabic-indic digit 9\n\t'\\u06F0': '0', // Eastern-Arabic digit 0\n\t'\\u06F1': '1', // Eastern-Arabic digit 1\n\t'\\u06F2': '2', // Eastern-Arabic digit 2\n\t'\\u06F3': '3', // Eastern-Arabic digit 3\n\t'\\u06F4': '4', // Eastern-Arabic digit 4\n\t'\\u06F5': '5', // Eastern-Arabic digit 5\n\t'\\u06F6': '6', // Eastern-Arabic digit 6\n\t'\\u06F7': '7', // Eastern-Arabic digit 7\n\t'\\u06F8': '8', // Eastern-Arabic digit 8\n\t'\\u06F9': '9' // Eastern-Arabic digit 9\n};\n//# sourceMappingURL=parse digit.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.getCountryCodes = getCountryCodes;\nexports.getCountryCodeForFlag = getCountryCodeForFlag;\n// See the table of officially assigned ISO 3166-1 alpha-2 country codes:\n// https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Current_codes\nvar SKIP_COUNTRIES = exports.SKIP_COUNTRIES = [\n// \"001\" means \"Non-Geographical Entity\" (\"No country\", \"International\").\n'001'];\n\nfunction getCountryCodes(labels) {\n\t// Includes all country codes (excluding \"ZZ\" for \"International\").\n\t//\n\t// From ISO 3166-1:2006(E/F):\n\t//\n\t// 8.1.3   User-assigned code elements\n\t//\n\t// If users need code elements to represent country names not included\n\t// in this part of ISO 3166, the series of letters AA, QM to QZ, XA\n\t// to XZ, and ZZ, and the series AAA to AAZ, QMA to QZZ, XAA to XZZ,\n\t// and ZZA to ZZZ respectively, and the series of numbers 900 to 999\n\t// are available. These users should inform the ISO 3166/MA of such use.\n\t//\n\treturn Object.keys(labels).filter(function (key) {\n\t\treturn key.length === 2 && key.toUpperCase() === key && key !== 'ZZ' && SKIP_COUNTRIES.indexOf(key) < 0;\n\t});\n}\n\nfunction getCountryCodeForFlag(country) {\n\tswitch (country) {\n\t\t// \"Ascension Island\".\n\t\t// The flag is missing for it:\n\t\t// https://lipis.github.io/flag-icon-css/flags/4x3/ac.svg\n\t\t// GitHub issue:\n\t\t// https://github.com/lipis/flag-icon-css/issues/537\n\t\t// Using \"SH\" flag as a temporary substitute\n\t\t// because previously \"AC\" and \"TA\" were parts of \"SH\".\n\t\tcase 'AC':\n\t\t\treturn 'SH';\n\n\t\t// \"Tristan da Cunha\".\n\t\t// The flag is missing for it:\n\t\t// https://lipis.github.io/flag-icon-css/flags/4x3/ta.svg\n\t\t// GitHub issue:\n\t\t// https://github.com/lipis/flag-icon-css/issues/537\n\t\t// Using \"SH\" flag as a temporary substitute\n\t\t// because previously \"AC\" and \"TA\" were parts of \"SH\".\n\t\tcase 'TA':\n\t\t\treturn 'SH';\n\n\t\tdefault:\n\t\t\treturn country;\n\t}\n}\n//# sourceMappingURL=countries.js.map","function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport parsePhoneNumber from './parsePhoneNumber_';\nimport ParseError from './ParseError';\nimport { isSupportedCountry } from './metadata';\nexport default function parsePhoneNumberFromString(text, options, metadata) {\n  // Validate `defaultCountry`.\n  if (options && options.defaultCountry && !isSupportedCountry(options.defaultCountry, metadata)) {\n    options = _objectSpread({}, options, {\n      defaultCountry: undefined\n    });\n  } // Parse phone number.\n\n\n  try {\n    return parsePhoneNumber(text, options, metadata);\n  } catch (error) {\n    /* istanbul ignore else */\n    if (error instanceof ParseError) {//\n    } else {\n      throw error;\n    }\n  }\n}\n//# sourceMappingURL=parsePhoneNumberFromString_.js.map","import { normalizeArguments } from './parsePhoneNumber';\nimport parsePhoneNumberFromString_ from './parsePhoneNumberFromString_';\nexport default function parsePhoneNumberFromString() {\n  var _normalizeArguments = normalizeArguments(arguments),\n      text = _normalizeArguments.text,\n      options = _normalizeArguments.options,\n      metadata = _normalizeArguments.metadata;\n\n  return parsePhoneNumberFromString_(text, options, metadata);\n}\n//# sourceMappingURL=parsePhoneNumberFromString.js.map","// Deprecated.\r\n// Use the default export instead.\r\n\r\nvar PhoneInput = require('./commonjs/PhoneInputNativeDefaultMetadata').default\r\n\r\nexports = module.exports = PhoneInput\r\nexports['default']       = PhoneInput","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _metadataMin = require('libphonenumber-js/metadata.min.json');\n\nvar _metadataMin2 = _interopRequireDefault(_metadataMin);\n\nvar _PhoneInputNativeDefaults = require('./PhoneInputNativeDefaults');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Deprecated.\n// This is a file used in legacy `/index.js` export entry.\n// In some next major version this file will be removed\n// and `/index.js` will be redirected to `/min/index.js`.\n\nexports.default = (0, _PhoneInputNativeDefaults.createPhoneInput)(_metadataMin2.default);\n//# sourceMappingURL=PhoneInputNativeDefaultMetadata.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nexports.createPhoneInput = createPhoneInput;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _en = require('../locale/en.json');\n\nvar _en2 = _interopRequireDefault(_en);\n\nvar _InternationalIcon = require('./InternationalIcon');\n\nvar _InternationalIcon2 = _interopRequireDefault(_InternationalIcon);\n\nvar _PropTypes = require('./PropTypes');\n\nvar _PhoneInputNative = require('./PhoneInputNative');\n\nvar _PhoneInputNative2 = _interopRequireDefault(_PhoneInputNative);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction createPhoneInput(defaultMetadata) {\n\tvar _class, _temp2;\n\n\treturn _temp2 = _class = function (_Component) {\n\t\t_inherits(PhoneInputNativeDefaults, _Component);\n\n\t\tfunction PhoneInputNativeDefaults() {\n\t\t\tvar _ref;\n\n\t\t\tvar _temp, _this, _ret;\n\n\t\t\t_classCallCheck(this, PhoneInputNativeDefaults);\n\n\t\t\tfor (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t\t\t\targs[_key] = arguments[_key];\n\t\t\t}\n\n\t\t\treturn _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = PhoneInputNativeDefaults.__proto__ || Object.getPrototypeOf(PhoneInputNativeDefaults)).call.apply(_ref, [this].concat(args))), _this), _this.storeInputRef = function (ref) {\n\t\t\t\treturn _this.input = ref;\n\t\t\t}, _this.render = function () {\n\t\t\t\treturn _react2.default.createElement(_PhoneInputNative2.default, _extends({ ref: _this.storeInputRef }, _this.props));\n\t\t\t}, _this.focus = function () {\n\t\t\t\treturn _this.input.focus();\n\t\t\t}, _temp), _possibleConstructorReturn(_this, _ret);\n\t\t}\n\n\t\treturn PhoneInputNativeDefaults;\n\t}(_react.Component), _class.propTypes = {\n\t\tmetadata: _PropTypes.metadata.isRequired,\n\t\tlabels: _PropTypes.labels.isRequired,\n\t\tinternationalIcon: _propTypes2.default.elementType.isRequired\n\t}, _class.defaultProps = {\n\t\tmetadata: defaultMetadata,\n\t\tlabels: _en2.default,\n\t\tinternationalIcon: _InternationalIcon2.default\n\t}, _temp2;\n}\n\nexports.default = createPhoneInput();\n//# sourceMappingURL=PhoneInputNativeDefaults.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = InternationalIcon;\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction InternationalIcon() {\n\treturn _react2.default.createElement(\n\t\t\"svg\",\n\t\t{ xmlns: \"http://www.w3.org/2000/svg\", viewBox: \"0 0 50 50\" },\n\t\t_react2.default.createElement(\"path\", { stroke: \"currentColor\", fill: \"none\", strokeWidth: \"1.5\", strokeLinecap: \"round\", d: \"M8.45,13A21.44,21.44,0,1,1,37.08,41.56\" }),\n\t\t_react2.default.createElement(\"path\", { stroke: \"currentColor\", fill: \"none\", strokeWidth: \"1.5\", strokeLinecap: \"round\", d: \"M19.36,35.47a36.9,36.9,0,0,1-2.28-13.24C17.08,10.39,21.88.85,27.8.85s10.72,9.54,10.72,21.38c0,6.48-1.44,12.28-3.71,16.21\" }),\n\t\t_react2.default.createElement(\"path\", { stroke: \"currentColor\", fill: \"none\", strokeWidth: \"1.5\", strokeLinecap: \"round\", d: \"M17.41,33.4A39,39,0,0,1,27.8,32.06c6.62,0,12.55,1.5,16.48,3.86\" }),\n\t\t_react2.default.createElement(\"path\", { stroke: \"currentColor\", fill: \"none\", strokeWidth: \"1.5\", strokeLinecap: \"round\", d: \"M44.29,8.53c-3.93,2.37-9.86,3.88-16.49,3.88S15.25,10.9,11.31,8.54\" }),\n\t\t_react2.default.createElement(\"line\", { stroke: \"currentColor\", fill: \"none\", strokeWidth: \"1.5\", strokeLinecap: \"round\", x1: \"27.8\", y1: \"0.85\", x2: \"27.8\", y2: \"34.61\" }),\n\t\t_react2.default.createElement(\"line\", { stroke: \"currentColor\", fill: \"none\", strokeWidth: \"1.5\", strokeLinecap: \"round\", x1: \"15.2\", y1: \"22.23\", x2: \"49.15\", y2: \"22.23\" }),\n\t\t_react2.default.createElement(\"path\", { stroke: \"transparent\", fill: \"currentColor\", d: \"M9.42,26.64c2.22-2.22,4.15-3.59.22-8.49S3.08,17,.93,19.17c-2.49,2.48-.13,11.74,9,20.89s18.41,11.5,20.89,9c2.15-2.15,5.91-4.77,1-8.71s-6.27-2-8.49.22c-1.55,1.55-5.48-1.69-8.86-5.08S7.87,28.19,9.42,26.64Z\" })\n\t);\n}\n//# sourceMappingURL=InternationalIcon.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _class, _temp2;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _PhoneInput = require('./PhoneInput');\n\nvar _PhoneInput2 = _interopRequireDefault(_PhoneInput);\n\nvar _CountrySelectNative = require('./CountrySelectNative');\n\nvar _CountrySelectNative2 = _interopRequireDefault(_CountrySelectNative);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar PhoneInputNative = (_temp2 = _class = function (_Component) {\n\t_inherits(PhoneInputNative, _Component);\n\n\tfunction PhoneInputNative() {\n\t\tvar _ref;\n\n\t\tvar _temp, _this, _ret;\n\n\t\t_classCallCheck(this, PhoneInputNative);\n\n\t\tfor (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t\t\targs[_key] = arguments[_key];\n\t\t}\n\n\t\treturn _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = PhoneInputNative.__proto__ || Object.getPrototypeOf(PhoneInputNative)).call.apply(_ref, [this].concat(args))), _this), _this.storeInputRef = function (ref) {\n\t\t\treturn _this.input = ref;\n\t\t}, _this.focus = function () {\n\t\t\treturn _this.input.focus();\n\t\t}, _temp), _possibleConstructorReturn(_this, _ret);\n\t}\n\n\t// These two country-select-related properties are\n\t// implemented as `defaultProps` instead of passing them\n\t// directly to the `<PhoneInput/>` because `<PhoneInputNative/>`\n\t// is the default export of this library and therefore people pass\n\t// `countrySelectComponent` property to this `<PhoneInputNative/>` component\n\t// and when they don't see any changes they might get confused.\n\t// https://github.com/catamphetamine/react-phone-number-input/issues/229\n\n\n\t_createClass(PhoneInputNative, [{\n\t\tkey: 'render',\n\t\tvalue: function render() {\n\t\t\treturn _react2.default.createElement(_PhoneInput2.default, _extends({ ref: this.storeInputRef }, this.props));\n\t\t}\n\n\t\t// Proxy `.focus()` method.\n\n\t}]);\n\n\treturn PhoneInputNative;\n}(_react.Component), _class.propTypes = {\n\t// (optional)\n\t// Replaces the default country select arrow.\n\tcountrySelectArrowComponent: _propTypes2.default.elementType }, _class.defaultProps = {\n\tcountrySelectComponent: _CountrySelectNative2.default,\n\tcountrySelectProperties: COUNTRY_SELECT_PROPERTIES\n}, _temp2);\nexports.default = PhoneInputNative;\n\n\nvar COUNTRY_SELECT_PROPERTIES = {\n\tcountrySelectArrowComponent: 'selectArrowComponent'\n};\n//# sourceMappingURL=PhoneInputNative.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _class, _class2, _temp, _initialiseProps;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _reactLifecyclesCompat = require('react-lifecycles-compat');\n\nvar _core = require('libphonenumber-js/core');\n\nvar _InputSmart = require('./InputSmart');\n\nvar _InputSmart2 = _interopRequireDefault(_InputSmart);\n\nvar _InputBasic = require('./InputBasic');\n\nvar _InputBasic2 = _interopRequireDefault(_InputBasic);\n\nvar _Flag = require('./Flag');\n\nvar _Flag2 = _interopRequireDefault(_Flag);\n\nvar _PropTypes = require('./PropTypes');\n\nvar _inputControl = require('./input-control');\n\nvar _countries2 = require('./countries');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n// `PureComponent` is only available in React >= 15.3.0.\nvar PureComponent = _react2.default.PureComponent || _react2.default.Component;\n\nvar PhoneNumberInput = (0, _reactLifecyclesCompat.polyfill)(_class = (_temp = _class2 = function (_PureComponent) {\n\t_inherits(PhoneNumberInput, _PureComponent);\n\n\tfunction PhoneNumberInput(props) {\n\t\t_classCallCheck(this, PhoneNumberInput);\n\n\t\tvar _this = _possibleConstructorReturn(this, (PhoneNumberInput.__proto__ || Object.getPrototypeOf(PhoneNumberInput)).call(this, props));\n\n\t\t_initialiseProps.call(_this);\n\n\t\tvar _this$props = _this.props,\n\t\t    value = _this$props.value,\n\t\t    labels = _this$props.labels,\n\t\t    international = _this$props.international,\n\t\t    metadata = _this$props.metadata;\n\t\tvar _this$props2 = _this.props,\n\t\t    country = _this$props2.country,\n\t\t    countries = _this$props2.countries,\n\t\t    countryOptions = _this$props2.countryOptions;\n\n\t\t// Validate `country`.\n\n\t\tif (country) {\n\t\t\tif (!_this.isCountrySupportedWithError(country)) {\n\t\t\t\tcountry = undefined;\n\t\t\t}\n\t\t}\n\n\t\t// Validate `countries`.\n\t\tcountries = filterCountries(countries, metadata);\n\n\t\t// Validate `countryOptions`.\n\t\tcountryOptions = filterCountryOptions(countryOptions, metadata);\n\n\t\tvar phoneNumber = (0, _inputControl.parsePhoneNumber)(value, metadata);\n\n\t\tvar pre_selected_country = (0, _inputControl.getPreSelectedCountry)(phoneNumber, country, countries || (0, _countries2.getCountryCodes)(labels).filter(function (_) {\n\t\t\treturn _ === 'ZZ' || metadata.countries[_];\n\t\t}), international, metadata);\n\n\t\t_this.state = {\n\t\t\t// Workaround for `this.props` inside `getDerivedStateFromProps()`.\n\t\t\tprops: _this.props,\n\n\t\t\t// The country selected.\n\t\t\tcountry: pre_selected_country,\n\n\t\t\t// `countries` are stored in `this.state` because they're filtered.\n\t\t\t// For example, a developer might theoretically pass some unsupported\n\t\t\t// countries as part of the `countries` property, and because of that\n\t\t\t// the component uses `this.state.countries` (which are filtered)\n\t\t\t// instead of `this.props.countries`\n\t\t\t// (which could potentially contain unsupported countries).\n\t\t\tcountries: countries,\n\n\t\t\t// Generate country `<select/>` options.\n\t\t\tcountry_select_options: generateCountrySelectOptions(countries, countryOptions, _this.props),\n\n\t\t\t// `parsed_input` state property holds non-formatted user's input.\n\t\t\t// The reason is that there's no way of finding out\n\t\t\t// in which form should `value` be displayed: international or national.\n\t\t\t// E.g. if `value` is `+78005553535` then it could be input\n\t\t\t// by a user both as `8 (800) 555-35-35` and `+7 800 555 35 35`.\n\t\t\t// Hence storing just `value`is not sufficient for correct formatting.\n\t\t\t// E.g. if a user entered `8 (800) 555-35-35`\n\t\t\t// then value is `+78005553535` and `parsed_input` is `88005553535`\n\t\t\t// and if a user entered `+7 800 555 35 35`\n\t\t\t// then value is `+78005553535` and `parsed_input` is `+78005553535`.\n\t\t\tparsed_input: generateParsedInput(value, phoneNumber, _this.props),\n\n\t\t\t// `value` property is duplicated in state.\n\t\t\t// The reason is that `getDerivedStateFromProps()`\n\t\t\t// needs this `value` to compare to the new `value` property\n\t\t\t// to find out if `parsed_input` needs updating:\n\t\t\t// If the `value` property was changed externally\n\t\t\t// then it won't be equal to `state.value`\n\t\t\t// in which case `parsed_input` and `country` should be updated.\n\t\t\tvalue: value\n\t\t};\n\t\treturn _this;\n\t}\n\n\t_createClass(PhoneNumberInput, [{\n\t\tkey: 'componentDidMount',\n\t\tvalue: function componentDidMount() {\n\t\t\tvar onCountryChange = this.props.onCountryChange;\n\t\t\tvar country = this.props.country;\n\t\t\tvar selectedCountry = this.state.country;\n\n\n\t\t\tif (onCountryChange) {\n\t\t\t\tif (!country || !this.isCountrySupportedWithError(country)) {\n\t\t\t\t\tcountry = undefined;\n\t\t\t\t}\n\t\t\t\tif (selectedCountry !== country) {\n\t\t\t\t\tonCountryChange(selectedCountry);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'componentDidUpdate',\n\t\tvalue: function componentDidUpdate(prevProps, prevState) {\n\t\t\tvar _props = this.props,\n\t\t\t    onCountryChange = _props.onCountryChange,\n\t\t\t    onChange = _props.onChange,\n\t\t\t    reset = _props.reset;\n\t\t\t// Call `onCountryChange` when user selects another country.\n\n\t\t\tif (onCountryChange && this.state.country !== prevState.country) {\n\t\t\t\tonCountryChange(this.state.country);\n\t\t\t}\n\t\t\t// Some users requested a way to reset the component\n\t\t\t// (both number `<input/>` and country `<select/>`).\n\t\t\t// Whenever `reset` property changes both number `<input/>`\n\t\t\t// and country `<select/>` are reset.\n\t\t\t// It's not implemented as some instance `.reset()` method\n\t\t\t// because `ref` will likely be forwarded to `<input/>`\n\t\t\t// in some next major version.\n\t\t\t// https://github.com/catamphetamine/react-phone-number-input/issues/300\n\t\t\tif (reset !== prevProps.reset) {\n\t\t\t\tonChange();\n\t\t\t\tif (onCountryChange) {\n\t\t\t\t\tonCountryChange(this.state.country);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// A shorthand for not passing `metadata` as a second argument.\n\n\n\t\t// Country `<select/>` `onChange` handler.\n\n\n\t\t// Phone number `<input/>` `onKeyDown` handler.\n\n\n\t\t/**\r\n   * `<input/>` `onChange()` handler.\r\n   * Updates `value` property accordingly (so that they are kept in sync).\r\n   * @param {string?} input — Either a parsed phone number or an empty string. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n   */\n\n\n\t\t// Toggles the `--focus` CSS class.\n\n\n\t\t// Toggles the `--focus` CSS class.\n\n\n\t\t// This `onBlur` interceptor is a workaround for `redux-form`\n\t\t// so that it gets the up-to-date `value` in its `onBlur` handler.\n\t\t// Without this fix it just gets the actual (raw) input field textual value.\n\t\t// E.g. `+7 800 555 35 35` instead of `+78005553535`.\n\t\t//\n\t\t// A developer is not supposed to pass this `onBlur` property manually.\n\t\t// Instead, `redux-form` passes `onBlur` to this component automatically\n\t\t// and this component patches that `onBlur` handler (a hacky way but works).\n\t\t//\n\n\n\t\t// When country `<select/>` is toggled.\n\n\n\t\t// Can be called externally.\n\n\t}, {\n\t\tkey: 'render',\n\t\tvalue: function render() {\n\t\t\tvar _props2 = this.props,\n\t\t\t    name = _props2.name,\n\t\t\t    disabled = _props2.disabled,\n\t\t\t    disablePhoneInput = _props2.disablePhoneInput,\n\t\t\t    autoComplete = _props2.autoComplete,\n\t\t\t    countrySelectTabIndex = _props2.countrySelectTabIndex,\n\t\t\t    showCountrySelect = _props2.showCountrySelect,\n\t\t\t    style = _props2.style,\n\t\t\t    className = _props2.className,\n\t\t\t    inputClassName = _props2.inputClassName,\n\t\t\t    getInputClassName = _props2.getInputClassName,\n\t\t\t    countrySelectAriaLabel = _props2.countrySelectAriaLabel,\n\t\t\t    countrySelectProperties = _props2.countrySelectProperties,\n\t\t\t    error = _props2.error,\n\t\t\t    indicateInvalid = _props2.indicateInvalid,\n\t\t\t    CountrySelectComponent = _props2.countrySelectComponent,\n\t\t\t    countrySelectProps = _props2.countrySelectProps,\n\t\t\t    inputStyleReset = _props2.inputStyleReset,\n\t\t\t    _InputComponent = _props2.inputComponent,\n\t\t\t    inputComponent = _props2.numberInputComponent,\n\t\t\t    numberInputProps = _props2.numberInputProps,\n\t\t\t    smartCaret = _props2.smartCaret,\n\t\t\t    ext = _props2.ext,\n\t\t\t    _ = _props2.country,\n\t\t\t    countries = _props2.countries,\n\t\t\t    countryOptions = _props2.countryOptions,\n\t\t\t    labels = _props2.labels,\n\t\t\t    flags = _props2.flags,\n\t\t\t    flagComponent = _props2.flagComponent,\n\t\t\t    flagsPath = _props2.flagsPath,\n\t\t\t    international = _props2.international,\n\t\t\t    internationalIcon = _props2.internationalIcon,\n\t\t\t    displayInitialValueAsLocalNumber = _props2.displayInitialValueAsLocalNumber,\n\t\t\t    onCountryChange = _props2.onCountryChange,\n\t\t\t    limitMaxLength = _props2.limitMaxLength,\n\t\t\t    metadata = _props2.metadata,\n\t\t\t    reset = _props2.reset,\n\t\t\t    phoneNumberInputProps = _objectWithoutProperties(_props2, ['name', 'disabled', 'disablePhoneInput', 'autoComplete', 'countrySelectTabIndex', 'showCountrySelect', 'style', 'className', 'inputClassName', 'getInputClassName', 'countrySelectAriaLabel', 'countrySelectProperties', 'error', 'indicateInvalid', 'countrySelectComponent', 'countrySelectProps', 'inputStyleReset', 'inputComponent', 'numberInputComponent', 'numberInputProps', 'smartCaret', 'ext', 'country', 'countries', 'countryOptions', 'labels', 'flags', 'flagComponent', 'flagsPath', 'international', 'internationalIcon', 'displayInitialValueAsLocalNumber', 'onCountryChange', 'limitMaxLength', 'metadata', 'reset']);\n\n\t\t\tvar _state = this.state,\n\t\t\t    country = _state.country,\n\t\t\t    hidePhoneInputField = _state.hidePhoneInputField,\n\t\t\t    country_select_options = _state.country_select_options,\n\t\t\t    parsed_input = _state.parsed_input,\n\t\t\t    isFocused = _state.isFocused;\n\n\n\t\t\tvar InputComponent = _InputComponent || (smartCaret ? _InputSmart2.default : _InputBasic2.default);\n\n\t\t\t// Extract `countrySelectProperties` from `this.props`\n\t\t\t// also removing them from `phoneNumberInputProps`.\n\t\t\tvar _countrySelectProps = {};\n\t\t\tif (countrySelectProperties) {\n\t\t\t\tfor (var key in countrySelectProperties) {\n\t\t\t\t\tif (this.props.hasOwnProperty(key)) {\n\t\t\t\t\t\t_countrySelectProps[countrySelectProperties[key]] = this.props[key];\n\t\t\t\t\t\tdelete phoneNumberInputProps[key];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Could use something like `aria-label={labels.phone}` on the `<InputComponent/>`,\n\t\t\t// however, some users may have already been using this component with one of:\n\t\t\t// * `<label/>` container\n\t\t\t// * `aria-labelledby`\n\t\t\t// * `id` and `<label for/>`\n\t\t\t// https://developers.google.com/web/fundamentals/accessibility/semantics-aria/aria-labels-and-relationships\n\t\t\t// Maybe in some future major version update.\n\n\t\t\treturn _react2.default.createElement(\n\t\t\t\t'div',\n\t\t\t\t{\n\t\t\t\t\tstyle: style,\n\t\t\t\t\tclassName: (0, _classnames2.default)('react-phone-number-input', {\n\t\t\t\t\t\t'react-phone-number-input--focus': isFocused,\n\t\t\t\t\t\t'react-phone-number-input--invalid': error && indicateInvalid\n\t\t\t\t\t}, className) },\n\t\t\t\t_react2.default.createElement(\n\t\t\t\t\t'div',\n\t\t\t\t\t{ className: 'react-phone-number-input__row' },\n\t\t\t\t\tshowCountrySelect && _react2.default.createElement(CountrySelectComponent, _extends({}, _countrySelectProps, {\n\t\t\t\t\t\tref: this.storeCountrySelectInstance,\n\t\t\t\t\t\tname: name ? name + '__country' : undefined,\n\t\t\t\t\t\t'aria-label': countrySelectAriaLabel || labels.country,\n\t\t\t\t\t\ttabIndex: countrySelectTabIndex\n\t\t\t\t\t}, countrySelectProps, {\n\t\t\t\t\t\tvalue: country,\n\t\t\t\t\t\toptions: country_select_options,\n\t\t\t\t\t\tonChange: this.onCountryChange,\n\t\t\t\t\t\tonFocus: this._onFocus,\n\t\t\t\t\t\tonBlur: this._onBlur,\n\t\t\t\t\t\tdisabled: disabled,\n\t\t\t\t\t\thidePhoneInputField: this.hidePhoneInputField,\n\t\t\t\t\t\tfocusPhoneInputField: this.focus,\n\t\t\t\t\t\tclassName: 'react-phone-number-input__country' })),\n\t\t\t\t\t!hidePhoneInputField && _react2.default.createElement(InputComponent, _extends({\n\t\t\t\t\t\ttype: 'tel',\n\t\t\t\t\t\tautoComplete: autoComplete\n\t\t\t\t\t}, numberInputProps, phoneNumberInputProps, {\n\t\t\t\t\t\tref: this.storePhoneNumberInputInstance,\n\t\t\t\t\t\tname: name,\n\t\t\t\t\t\tmetadata: metadata,\n\t\t\t\t\t\tcountry: country,\n\t\t\t\t\t\tvalue: parsed_input || '',\n\t\t\t\t\t\tonChange: this.onChange,\n\t\t\t\t\t\tonFocus: this.onFocus,\n\t\t\t\t\t\tonBlur: this.onBlur,\n\t\t\t\t\t\tonKeyDown: this.onPhoneNumberKeyDown,\n\t\t\t\t\t\tdisabled: disabled || disablePhoneInput,\n\t\t\t\t\t\tinputComponent: inputComponent,\n\t\t\t\t\t\tclassName: (0, _classnames2.default)('react-phone-number-input__input', 'react-phone-number-input__phone', {\n\t\t\t\t\t\t\t'react-phone-number-input__input--style': !inputStyleReset,\n\t\t\t\t\t\t\t'react-phone-number-input__input--disabled': disabled || disablePhoneInput,\n\t\t\t\t\t\t\t'react-phone-number-input__input--style--disabled': (disabled || disablePhoneInput) && !inputStyleReset,\n\t\t\t\t\t\t\t'react-phone-number-input__input--invalid': error && indicateInvalid,\n\t\t\t\t\t\t\t'react-phone-number-input__input--style--invalid': error && indicateInvalid && !inputStyleReset\n\t\t\t\t\t\t}, inputClassName, getInputClassName && getInputClassName({\n\t\t\t\t\t\t\tdisabled: disabled || disablePhoneInput,\n\t\t\t\t\t\t\tinvalid: error && indicateInvalid\n\t\t\t\t\t\t})) })),\n\t\t\t\t\text && !hidePhoneInputField && _react2.default.createElement(\n\t\t\t\t\t\t'label',\n\t\t\t\t\t\t{ className: 'react-phone-number-input__ext' },\n\t\t\t\t\t\tlabels.ext,\n\t\t\t\t\t\t_react2.default.cloneElement(ext, {\n\t\t\t\t\t\t\tonChange: ext.props.onChange ? function (event) {\n\t\t\t\t\t\t\t\treturn ext.props.onChange(parseExtDigits(event));\n\t\t\t\t\t\t\t} : undefined,\n\t\t\t\t\t\t\tonFocus: this._onFocus,\n\t\t\t\t\t\t\tonBlur: this._onBlur,\n\t\t\t\t\t\t\tclassName: (0, _classnames2.default)('react-phone-number-input__input', 'react-phone-number-input__ext-input', {\n\t\t\t\t\t\t\t\t'react-phone-number-input__input--disabled': disabled || disablePhoneInput\n\t\t\t\t\t\t\t}, inputClassName, getInputClassName && getInputClassName({\n\t\t\t\t\t\t\t\tdisabled: disabled || disablePhoneInput\n\t\t\t\t\t\t\t}), ext.props.className)\n\t\t\t\t\t\t})\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t\terror && indicateInvalid && _react2.default.createElement(\n\t\t\t\t\t'div',\n\t\t\t\t\t{ className: 'react-phone-number-input__error' },\n\t\t\t\t\terror\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t}], [{\n\t\tkey: 'getDerivedStateFromProps',\n\n\n\t\t// `state` holds previous props as `props`, and also:\n\t\t// * `country` — The currently selected country, e.g. `\"RU\"`.\n\t\t// * `value` — The currently entered phone number (E.164), e.g. `+78005553535`.\n\t\t// * `parsed_input` — The parsed `<input/>` value, e.g. `8005553535`.\n\t\t// (and a couple of other less significant properties)\n\t\tvalue: function getDerivedStateFromProps(props, state) {\n\t\t\tvar country = state.country,\n\t\t\t    hasUserSelectedACountry = state.hasUserSelectedACountry,\n\t\t\t    value = state.value,\n\t\t\t    _state$props = state.props,\n\t\t\t    old_default_country = _state$props.country,\n\t\t\t    old_value = _state$props.value,\n\t\t\t    old_reset = _state$props.reset;\n\t\t\tvar metadata = props.metadata,\n\t\t\t    countries = props.countries,\n\t\t\t    new_default_country = props.country,\n\t\t\t    new_value = props.value,\n\t\t\t    new_reset = props.reset;\n\n\n\t\t\tvar new_state = {\n\t\t\t\t// Emulate `prevProps` via `state.props`.\n\t\t\t\tprops: props,\n\t\t\t\t// If the user has already manually selected a country\n\t\t\t\t// then don't override that already selected country\n\t\t\t\t// if the default `country` property changes.\n\t\t\t\t// That's what `hasUserSelectedACountry` flag is for.\n\t\t\t\thasUserSelectedACountry: hasUserSelectedACountry\n\n\t\t\t\t// If `countries` or `labels` or `international` changed\n\t\t\t\t// then re-generate country `<select/>` options.\n\t\t\t};if (props.countries !== state.props.countries || props.labels !== state.props.labels || props.international !== state.props.international) {\n\t\t\t\t// Re-generate country select options.\n\t\t\t\tnew_state.country_select_options = generateCountrySelectOptions(filterCountries(props.countries, metadata), filterCountryOptions(props.countryOptions, metadata), props);\n\t\t\t}\n\n\t\t\t// Some users requested a way to reset the component\n\t\t\t// (both number `<input/>` and country `<select/>`).\n\t\t\t// Whenever `reset` property changes both number `<input/>`\n\t\t\t// and country `<select/>` are reset.\n\t\t\t// It's not implemented as some instance `.reset()` method\n\t\t\t// because `ref` will likely be forwarded to `<input/>`.\n\t\t\t// https://github.com/catamphetamine/react-phone-number-input/issues/300\n\t\t\tif (new_reset !== old_reset) {\n\t\t\t\treturn _extends({}, new_state, {\n\t\t\t\t\tparsed_input: undefined,\n\t\t\t\t\tvalue: undefined,\n\t\t\t\t\tcountry: new_default_country\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// If the default country changed.\n\t\t\t// (e.g. in case of ajax GeoIP detection after page loaded)\n\t\t\t// then select it but only if the user hasn't already manually\n\t\t\t// selected a country and no phone number has been entered so far.\n\t\t\t// Because if the user has already started inputting a phone number\n\t\t\t// then he's okay with no country being selected at all (\"International\")\n\t\t\t// and doesn't want to be disturbed, doesn't want his input to be screwed, etc.\n\t\t\tif (new_default_country !== old_default_country && !hasUserSelectedACountry && !value && !new_value) {\n\t\t\t\treturn _extends({}, new_state, {\n\t\t\t\t\tcountry: isCountrySupportedWithError(new_default_country, metadata) ? new_default_country : old_default_country\n\t\t\t\t\t// `value` is `undefined`.\n\t\t\t\t\t// `parsed_input` is `undefined` because `value` is `undefined`.\n\t\t\t\t});\n\t\t\t}\n\t\t\t// If a new `value` is set externally.\n\t\t\t// (e.g. as a result of an ajax API request\n\t\t\t//  to get user's phone after page loaded)\n\t\t\t// The first part — `new_value !== old_value` —\n\t\t\t// is basically `props.value !== prevProps.value`\n\t\t\t// so it means \"if value property was changed externally\".\n\t\t\t// The second part — `new_value !== value` —\n\t\t\t// is for ignoring the `getDerivedStateFromProps()` call\n\t\t\t// which happens in `this.onChange()` right after `this.setState()`.\n\t\t\t// If this `getDerivedStateFromProps()` call isn't ignored\n\t\t\t// then the country flag would reset on each input.\n\t\t\telse if (new_value !== old_value && new_value !== value) {\n\t\t\t\t\tvar phoneNumber = (0, _inputControl.parsePhoneNumber)(new_value, metadata);\n\t\t\t\t\tvar parsedCountry = void 0;\n\t\t\t\t\tif (phoneNumber) {\n\t\t\t\t\t\tvar _countries = filterCountries(props.countries, metadata);\n\t\t\t\t\t\tif (!_countries || _countries.indexOf(phoneNumber.country) >= 0) {\n\t\t\t\t\t\t\tparsedCountry = phoneNumber.country;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn _extends({}, new_state, {\n\t\t\t\t\t\tparsed_input: generateParsedInput(new_value, phoneNumber, props),\n\t\t\t\t\t\tvalue: new_value,\n\t\t\t\t\t\tcountry: new_value ? parsedCountry : country\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t// `country` didn't change.\n\t\t\t// `value` didn't change.\n\t\t\t// `parsed_input` didn't change, because `value` didn't change.\n\t\t\t//\n\t\t\t// Maybe `new_state.country_select_options` changed.\n\t\t\t// In any case, update `prevProps`.\n\t\t\treturn new_state;\n\t\t}\n\t}]);\n\n\treturn PhoneNumberInput;\n}(PureComponent), _class2.propTypes = {\n\t/**\r\n  * Phone number in `E.164` format.\r\n  *\r\n  * Example:\r\n  *\r\n  * `\"+12223333333\"`\r\n  */\n\tvalue: _propTypes2.default.string,\n\n\t/**\r\n  * Updates the `value` as the user inputs the phone number.\r\n  */\n\tonChange: _propTypes2.default.func.isRequired,\n\n\t/**\r\n  * Toggles the `--focus` CSS class.\r\n  * @ignore\r\n  */\n\tonFocus: _propTypes2.default.func,\n\n\t/**\r\n  * `onBlur` is usually passed by `redux-form`.\r\n  * @ignore\r\n  */\n\tonBlur: _propTypes2.default.func,\n\n\t/**\r\n  * `onKeyDown` handler (e.g. to handle Enter key press).\r\n  * @ignore\r\n  */\n\tonKeyDown: _propTypes2.default.func,\n\n\t/**\r\n  * Disables both the phone number `<input/>`\r\n  * and the country `<select/>`.\r\n  */\n\t// (is `false` by default)\n\tdisabled: _propTypes2.default.bool.isRequired,\n\n\t/**\r\n  * Sets `autoComplete` property for phone number `<input/>`.\r\n  *\r\n  * Web browser's \"autocomplete\" feature\r\n  * remembers the phone number being input\r\n  * and can also autofill the `<input/>`\r\n  * with previously remembered phone numbers.\r\n  *\r\n  * https://developers.google.com/web/updates/2015/06/checkout-faster-with-autofill\r\n  *\r\n  * For example, can be used to turn it off:\r\n  *\r\n  * \"So when should you use `autocomplete=\"off\"`?\r\n  *  One example is when you've implemented your own version\r\n  *  of autocomplete for search. Another example is any form field\r\n  *  where users will input and submit different kinds of information\r\n  *  where it would not be useful to have the browser remember\r\n  *  what was submitted previously\".\r\n  */\n\t// (is `\"tel\"` by default)\n\tautoComplete: _propTypes2.default.string.isRequired,\n\n\t/**\r\n  * Set to `true` to show the initial `value` in\r\n  * \"national\" format rather than \"international\".\r\n  *\r\n  * For example, if this flag is set to `true`\r\n  * and the initial `value=\"+12133734253\"` is passed\r\n  * then the `<input/>` value will be `\"(213) 373-4253\"`.\r\n  *\r\n  * By default, this flag is set to `false`,\r\n  * meaning that if the initial `value=\"+12133734253\"` is passed\r\n  * then the `<input/>` value will be `\"+1 213 373 4253\"`.\r\n  *\r\n  * The reason for such default behaviour is that\r\n  * the newer generation grows up when there are no stationary phones\r\n  * and therefore everyone inputs phone numbers in international format\r\n  * in their smartphones so people gradually get more accustomed to\r\n  * writing phone numbers in international format rather than in local format.\r\n  * Future people won't be using \"national\" format, only \"international\".\r\n  */\n\t// (is `false` by default)\n\tdisplayInitialValueAsLocalNumber: _propTypes2.default.bool.isRequired,\n\n\t/**\r\n  * The country to be selected by default.\r\n  * For example, can be set after a GeoIP lookup.\r\n  *\r\n  * Example: `\"US\"`.\r\n  */\n\t// A two-letter country code (\"ISO 3166-1 alpha-2\").\n\tcountry: _propTypes2.default.string,\n\n\t/**\r\n  * If specified, only these countries will be available for selection.\r\n  *\r\n  * Example:\r\n  *\r\n  * `[\"RU\", \"UA\", \"KZ\"]`\r\n  */\n\tcountries: _propTypes2.default.arrayOf(_propTypes2.default.string),\n\n\t/**\r\n  * Custom country `<select/>` option names.\r\n  * Also some labels like \"ext\" and country `<select/>` `aria-label`.\r\n  *\r\n  * Example:\r\n  *\r\n  * `{ \"ZZ\": \"Международный\", RU: \"Россия\", US: \"США\", ... }`\r\n  *\r\n  * See the `locales` directory for examples.\r\n  */\n\tlabels: _PropTypes.labels.isRequired,\n\n\t/**\r\n  * The base URL path for country flag icons.\r\n  * By default it loads country flag icons from\r\n  * `flag-icon-css` repo github pages website.\r\n  * I imagine someone might want to download\r\n  * those country flag icons and host them\r\n  * on their own servers instead.\r\n  * Warning: in future new countries can be added\r\n  * to the country select which would result in\r\n  * \"Image not found\" errors when using custom `flagsPath`\r\n  * due to the custom-hosted flags bundle being outdated\r\n  * and missing the new flags.\r\n  * So if using custom `flagsPath` always check `CHANGELOG.md`\r\n  * for new country announcements before updating this library.\r\n  */\n\tflagsPath: _propTypes2.default.string.isRequired,\n\n\t/**\r\n  * Custom country flag icon components.\r\n  * These flags replace the default ones.\r\n  *\r\n  * The shape is an object where keys are country codes\r\n  * and values are flag icon components.\r\n  * Flag icon components receive the same properties\r\n  * as `flagComponent` (see below).\r\n  *\r\n  * Example:\r\n  *\r\n  * `{ \"RU\": () => <img src=\"...\"/> }`\r\n  *\r\n  * Can be used to replace the default flags\r\n  * with custom ones for certain (or all) countries.\r\n  *\r\n  * Can also be used to bundle `<svg/>` flags instead of `<img/>`s:\r\n  *\r\n  * By default flag icons are inserted as `<img/>`s\r\n  * with their `src` pointed to `flag-icon-css` repo github pages website.\r\n  *\r\n  * There might be some cases\r\n  * (e.g. a standalone \"native\" app, or an \"intranet\" web application)\r\n  * when including the full set of `<svg/>` country flags (3 megabytes)\r\n  * is more appropriate than downloading them individually at runtime only if needed.\r\n  *\r\n  * Example:\r\n  *\r\n  * `// Uses <svg/> flags (3 megabytes):`\r\n  *\r\n  * `import flags from 'react-phone-number-input/flags'`\r\n  *\r\n  * `import PhoneInput from 'react-phone-number-input'`\r\n  *\r\n  * `<PhoneInput flags={flags} .../>`\r\n  */\n\tflags: _propTypes2.default.objectOf(_propTypes2.default.elementType),\n\n\t/**\r\n  * Country flag icon component.\r\n  *\r\n  * Takes properties:\r\n  *\r\n  * * country : string — The country code.\r\n  * * flagsPath : string — The `flagsPath` property (see above).\r\n  * * flags : object — The `flags` property (see above).\r\n  */\n\tflagComponent: _propTypes2.default.elementType.isRequired,\n\n\t/**\r\n  * Set to `false` to drop the \"International\" option from country `<select/>`.\r\n  */\n\tinternational: _propTypes2.default.bool.isRequired,\n\n\t/**\r\n  * Custom \"International\" country `<select/>` option icon.\r\n  */\n\tinternationalIcon: _propTypes2.default.elementType.isRequired,\n\n\t/**\r\n  * Set to `false` to hide country `<select/>`.\r\n  */\n\t// (is `true` by default)\n\tshowCountrySelect: _propTypes2.default.bool.isRequired,\n\n\t/**\r\n  * HTML `tabindex` attribute for country `<select/>`.\r\n  */\n\tcountrySelectTabIndex: _propTypes2.default.number,\n\n\t/**\r\n  * HTML `aria-label` attribute for country `<select/>`.\r\n  * The default is `.country` of the `labels` property\r\n  * which is `\"Country\"` for the default `labels`.\r\n  */\n\tcountrySelectAriaLabel: _propTypes2.default.string,\n\n\t/**\r\n  * Can be used to place some countries on top of the list of country `<select/>` options.\r\n  *\r\n  * * `\"|\"` — inserts a separator.\r\n  * * `\"...\"` — means \"the rest of the countries\" (can be omitted).\r\n  *\r\n  * Example:\r\n  *\r\n  * `[\"US\", \"CA\", \"AU\", \"|\", \"...\"]`\r\n  */\n\tcountryOptions: _propTypes2.default.arrayOf(_propTypes2.default.string),\n\n\t/**\r\n  * Some users requested a way to reset the component:\r\n  * both number `<input/>` and country `<select/>`.\r\n  * Whenever `reset` property changes both number `<input/>`\r\n  * and country `<select/>` are reset.\r\n  * It's not implemented as some instance `.reset()` method\r\n  * because `ref` will likely be forwarded to `<input/>`.\r\n  */\n\t// https://github.com/catamphetamine/react-phone-number-input/issues/300\n\treset: _propTypes2.default.any,\n\n\t/**\r\n  * `<Phone/>` component CSS style object.\r\n  */\n\tstyle: _propTypes2.default.object,\n\n\t/**\r\n  * `<Phone/>` component CSS class.\r\n  */\n\tclassName: _propTypes2.default.string,\n\n\t/**\r\n  * Phone number `<input/>` CSS class.\r\n  */\n\tinputClassName: _propTypes2.default.string,\n\n\t/**\r\n  * By default, there's some styling applied to the `<input/>` (for historical reasons). To prevent applying that styling to the `<input/>`, pass `inputStyleReset` property to the component.\r\n  */\n\tinputStyleReset: _propTypes2.default.bool,\n\n\t/**\r\n  * Returns phone number `<input/>` CSS class string.\r\n  * Receives an object of shape `{ disabled : boolean?, invalid : boolean? }`.\r\n  * @ignore\r\n  */\n\tgetInputClassName: _propTypes2.default.func,\n\n\t/**\r\n  * Country `<select/>` component.\r\n  *\r\n  * Receives properties:\r\n  *\r\n  * * `name : string?` — HTML `name` attribute.\r\n  * * `value : string?` — The currently selected country code.\r\n  * * `onChange(value : string?)` — Updates the `value`.\r\n  * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n  * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n  * * `options : object[]` — The list of all selectable countries (including \"International\") each being an object of shape `{ value : string?, label : string, icon : React.Component }`.\r\n  * * `disabled : boolean?` — HTML `disabled` attribute.\r\n  * * `tabIndex : (number|string)?` — HTML `tabIndex` attribute.\r\n  * * `className : string` — CSS class name.\r\n  */\n\t//\n\t// (deprecated)\n\t// * `hidePhoneInputField(hide : boolean)` — Can be called to show/hide phone input field. Takes `hide : boolean` argument. E.g. `react-responsive-ui` `<Select/>` uses this to hide phone number input when country select is expanded.\n\t// * `focusPhoneInputField()` — Can be called to manually focus phone input field. E.g. `react-responsive-ui` `<Select/>` uses this to focus phone number input after country selection in a timeout (after the phone input field is no longer hidden).\n\t//\n\tcountrySelectComponent: _propTypes2.default.elementType.isRequired,\n\n\t/**\r\n  * Country `<select/>` arrow component. Renders a CSS triangle by default.\r\n  */\n\tcountrySelectArrowComponent: _propTypes2.default.elementType,\n\n\t/**\r\n  * Country `<select/>` component props.\r\n  */\n\tcountrySelectProps: _propTypes2.default.object,\n\n\t/**\r\n  * Phone number `<input/>` component.\r\n  *\r\n  * Receives properties:\r\n  *\r\n  * * `value: string` — The formatted `value`.\r\n  * * `onChange(event: Event)` — Updates the formatted `value` from `event.target.value`.\r\n  * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n  * * `onBlur(event: Event)` — Is used to toggle the `--focus` CSS class.\r\n  * * Other properties like `type=\"tel\"` or `autoComplete=\"tel\"` that should be passed through to the DOM `<input/>`.\r\n  *\r\n  * Must also either use `React.forwardRef()` to \"forward\" `ref` to the `<input/>` or implement `.focus()` method.\r\n  */\n\tnumberInputComponent: _propTypes2.default.elementType.isRequired,\n\n\t/**\r\n  * Phone number `<input/>` component props.\r\n  */\n\tnumberInputProps: _propTypes2.default.object,\n\n\t/**\r\n  * Phone number `<input/>` component (a higher-order one).\r\n  *\r\n  * Receives properties:\r\n  *\r\n  * * `value : string` — The parsed phone number. E.g.: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n  * * `onChange(value? : string)` — Updates the `value`.\r\n  * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n  * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n  * * `country : string?` — The currently selected country. `undefined` means \"International\" (no country selected).\r\n  * * `metadata : object` — `libphonenumber-js` metadata.\r\n  * * `inputComponent : elementType` — Phone number `<input/>` component. This is basically the `numberInputComponent` property renamed to `inputComponent`.\r\n  * * All other properties should be passed through to the underlying `<input/>`.\r\n  *\r\n  * Must also either use `React.forwardRef()` to \"forward\" `ref` to the `<input/>` or implement `.focus()` method.\r\n  *\r\n  * @ignore\r\n  */\n\tinputComponent: _propTypes2.default.elementType,\n\n\t/**\r\n  * By default, the caret position is being \"intelligently\" managed\r\n  * while a user inputs a phone number.\r\n  * This \"smart\" caret behavior can be turned off\r\n  * by passing `smartCaret={false}` property.\r\n  * This is just an \"escape hatch\" for any possible caret position issues.\r\n  */\n\t// Is `true` by default.\n\tsmartCaret: _propTypes2.default.bool.isRequired,\n\n\t/**\r\n  * Phone number extension `<input/>` element.\r\n  *\r\n  * Example:\r\n  *\r\n  *\t`ext={<input value={...} onChange={...}/>}`\r\n  */\n\text: _propTypes2.default.node,\n\n\t/**\r\n  * If set to `true` the phone number input will get trimmed\r\n  * if it exceeds the maximum length for the country.\r\n  */\n\tlimitMaxLength: _propTypes2.default.bool.isRequired,\n\n\t/**\r\n  * An error message to show below the phone number `<input/>`. For example, `\"Required\"`.\r\n  */\n\terror: _propTypes2.default.string,\n\n\t/**\r\n  * The `error` is shown only when `indicateInvalid` is `true`.\r\n  * (which is the default).\r\n  * @deprecated\r\n  * @ignore\r\n  */\n\tindicateInvalid: _propTypes2.default.bool,\n\n\t/**\r\n  * `libphonenumber-js` metadata.\r\n  *\r\n  * Can be used to pass custom `libphonenumber-js` metadata\r\n  * to reduce the overall bundle size for those who compile \"custom\" metadata.\r\n  */\n\tmetadata: _PropTypes.metadata.isRequired,\n\n\t/**\r\n  * Is called every time the selected country changes:\r\n  * either programmatically or when user selects it manually from the list.\r\n  */\n\t// People have been asking for a way to get the selected country.\n\t// @see  https://github.com/catamphetamine/react-phone-number-input/issues/128\n\t// For some it's just a \"business requirement\".\n\t// I guess it's about gathering as much info on the user as a website can\n\t// without introducing any addional fields that would complicate the form\n\t// therefore reducing \"conversion\" (that's a marketing term).\n\t// Assuming that the phone number's country is the user's country\n\t// is not 100% correct but in most cases I guess it's valid.\n\tonCountryChange: _propTypes2.default.func,\n\n\t/**\r\n  * Disables only the phone number `<input/>`.\r\n  *\r\n  * Some users choose to implement a digital keyboard component for phone number input.\r\n  * In such cases the phone number input field must be disabled in order for the default system keyboard to not show up on focus.\r\n  * At the same time, country select should not be disabled in order for the user to be able to choose their country.\r\n  */\n\t// (is `false` by default)\n\t// https://github.com/catamphetamine/react-phone-number-input/issues/215\n\tdisablePhoneInput: _propTypes2.default.bool.isRequired\n}, _class2.defaultProps = {\n\t/**\r\n  * Not disabled.\r\n  */\n\tdisabled: false,\n\tdisablePhoneInput: false,\n\n\t/**\r\n  * Show `error` (if passed).\r\n  * @deprecated\r\n  */\n\tindicateInvalid: true,\n\n\t/**\r\n  * Remember (and autofill) the value as a phone number.\r\n  */\n\tautoComplete: 'tel',\n\n\t/**\r\n  * Flag icon component.\r\n  */\n\tflagComponent: _Flag2.default,\n\n\t/**\r\n  * By default, use icons from `flag-icon-css` github repo.\r\n  */\n\tflagsPath: 'https://lipis.github.io/flag-icon-css/flags/4x3/',\n\n\t/**\r\n  * Default \"International\" country `<select/>` option icon (globe).\r\n  */\n\t// internationalIcon: InternationalIcon,\n\n\t/**\r\n  * Phone number `<input/>` component.\r\n  */\n\tnumberInputComponent: 'input',\n\n\t/**\r\n  * Show country `<select/>`.\r\n  */\n\tshowCountrySelect: true,\n\n\t/**\r\n  * Don't convert the initially passed phone number `value`\r\n  * to a national phone number for its country.\r\n  * The reason is that the newer generation grows up when\r\n  * there are no stationary phones and therefore everyone inputs\r\n  * phone numbers with a `+` in their smartphones\r\n  * so phone numbers written in international form\r\n  * are gradually being considered more natural than local ones.\r\n  */\n\tdisplayInitialValueAsLocalNumber: false,\n\n\t/**\r\n  * Set to `false` to use \"basic\" caret instead of the \"smart\" one.\r\n  */\n\tsmartCaret: true,\n\n\t/**\r\n  * Whether to add the \"International\" option\r\n  * to the list of countries.\r\n  */\n\tinternational: true,\n\n\t/**\r\n  * If set to `true` the phone number input will get trimmed\r\n  * if it exceeds the maximum length for the country.\r\n  */\n\tlimitMaxLength: false\n}, _initialiseProps = function _initialiseProps() {\n\tvar _this2 = this;\n\n\tthis.isCountrySupportedWithError = function (country) {\n\t\tvar metadata = _this2.props.metadata;\n\n\t\treturn isCountrySupportedWithError(country, metadata);\n\t};\n\n\tthis.onCountryChange = function (new_country) {\n\t\tvar _props3 = _this2.props,\n\t\t    metadata = _props3.metadata,\n\t\t    onChange = _props3.onChange;\n\t\tvar _state2 = _this2.state,\n\t\t    old_parsed_input = _state2.parsed_input,\n\t\t    old_country = _state2.country;\n\n\t\t// After the new `country` has been selected,\n\t\t// if the phone number `<input/>` holds any digits\n\t\t// then migrate those digits for the new `country`.\n\n\t\tvar new_parsed_input = (0, _inputControl.migrateParsedInputForNewCountry)(old_parsed_input, old_country, new_country, metadata,\n\t\t// Convert the phone number to \"national\" format\n\t\t// when the user changes the selected country by hand.\n\t\ttrue);\n\n\t\tvar new_value = (0, _inputControl.e164)(new_parsed_input, new_country, metadata);\n\n\t\t// Focus phone number `<input/>` upon country selection.\n\t\t_this2.focus();\n\n\t\t// If the user has already manually selected a country\n\t\t// then don't override that already selected country\n\t\t// if the default `country` property changes.\n\t\t// That's what `hasUserSelectedACountry` flag is for.\n\n\t\t_this2.setState({\n\t\t\tcountry: new_country,\n\t\t\thasUserSelectedACountry: true,\n\t\t\tparsed_input: new_parsed_input,\n\t\t\tvalue: new_value\n\t\t}, function () {\n\t\t\t// Update the new `value` property.\n\t\t\t// Doing it after the `state` has been updated\n\t\t\t// because `onChange()` will trigger `getDerivedStateFromProps()`\n\t\t\t// with the new `value` which will be compared to `state.value` there.\n\t\t\tonChange(new_value);\n\t\t});\n\t};\n\n\tthis.onPhoneNumberKeyDown = function (event) {\n\t\tvar onKeyDown = _this2.props.onKeyDown;\n\n\t\t// Actually \"Down arrow\" key is used for showing \"autocomplete\" (\"autofill\") options.\n\t\t// (e.g. previously entered phone numbers for `autoComplete=\"tel\"`)\n\t\t// so can't hijack \"Down arrow\" keypress here.\n\t\t// // Expand country `<select/>`` on \"Down arrow\" key press.\n\t\t// if (event.keyCode === 40) {\n\t\t// \tthis.country_select.toggle()\n\t\t// }\n\n\t\tif (onKeyDown) {\n\t\t\tonKeyDown(event);\n\t\t}\n\t};\n\n\tthis.onChange = function (_input) {\n\t\tvar _props4 = _this2.props,\n\t\t    onChange = _props4.onChange,\n\t\t    international = _props4.international,\n\t\t    limitMaxLength = _props4.limitMaxLength,\n\t\t    metadata = _props4.metadata;\n\n\t\tvar _parseInput = (0, _inputControl.parseInput)(_input, _this2.state.parsed_input, _this2.state.country, _this2.state.countries, international, limitMaxLength, metadata),\n\t\t    input = _parseInput.input,\n\t\t    country = _parseInput.country,\n\t\t    value = _parseInput.value;\n\n\t\t_this2.setState({\n\t\t\tparsed_input: input,\n\t\t\tvalue: value,\n\t\t\tcountry: country\n\t\t},\n\t\t// Update the new `value` property.\n\t\t// Doing it after the `state` has been updated\n\t\t// because `onChange()` will trigger `getDerivedStateFromProps()`\n\t\t// with the new `value` which will be compared to `state.value` there.\n\t\tfunction () {\n\t\t\treturn onChange(value);\n\t\t});\n\t};\n\n\tthis._onFocus = function () {\n\t\treturn _this2.setState({ isFocused: true });\n\t};\n\n\tthis._onBlur = function () {\n\t\treturn _this2.setState({ isFocused: false });\n\t};\n\n\tthis.onFocus = function (event) {\n\t\tvar onFocus = _this2.props.onFocus;\n\n\t\t_this2._onFocus();\n\t\tif (onFocus) {\n\t\t\tonFocus(event);\n\t\t}\n\t};\n\n\tthis.onBlur = function (event) {\n\t\tvar onBlur = _this2.props.onBlur;\n\t\tvar value = _this2.state.value;\n\n\n\t\t_this2._onBlur();\n\n\t\tif (!onBlur) {\n\t\t\treturn;\n\t\t}\n\n\t\t// `event` is React's `SyntheticEvent`.\n\t\t// Its `.value` is read-only therefore cloning it.\n\t\tvar _event = _extends({}, event, {\n\t\t\ttarget: _extends({}, event.target, {\n\t\t\t\tvalue: value\n\t\t\t})\n\n\t\t\t// For `redux-form` event detection.\n\t\t\t// https://github.com/erikras/redux-form/blob/v5/src/events/isEvent.js\n\t\t});_event.stopPropagation = event.stopPropagation;\n\t\t_event.preventDefault = event.preventDefault;\n\n\t\treturn onBlur(_event);\n\t};\n\n\tthis.hidePhoneInputField = function (hide) {\n\t\t_this2.setState({\n\t\t\thidePhoneInputField: hide\n\t\t});\n\t};\n\n\tthis.focus = function () {\n\t\treturn _this2.number_input.focus();\n\t};\n\n\tthis.storeCountrySelectInstance = function (_) {\n\t\treturn _this2.country_select = _;\n\t};\n\n\tthis.storePhoneNumberInputInstance = function (_) {\n\t\treturn _this2.number_input = _;\n\t};\n}, _temp)) || _class;\n\n// Generates country `<select/>` options.\n\n\nexports.default = PhoneNumberInput;\nfunction generateCountrySelectOptions(countries, countryOptions, props) {\n\tvar labels = props.labels,\n\t    international = props.international,\n\t    metadata = props.metadata;\n\n\n\tvar CountrySelectOptionIcon = createCountrySelectOptionIconComponent(props);\n\n\treturn transformCountryOptions((0, _inputControl.getCountrySelectOptions)(countries || (0, _countries2.getCountryCodes)(labels).filter(function (country) {\n\t\treturn country === 'ZZ' || isCountrySupported(country, metadata);\n\t}), labels, international).map(function (_ref) {\n\t\tvar value = _ref.value,\n\t\t    label = _ref.label;\n\t\treturn {\n\t\t\tvalue: value,\n\t\t\tlabel: label,\n\t\t\ticon: CountrySelectOptionIcon\n\t\t};\n\t}), countryOptions);\n}\n\nfunction createCountrySelectOptionIconComponent(props) {\n\tvar flags = props.flags,\n\t    flagsPath = props.flagsPath,\n\t    FlagComponent = props.flagComponent,\n\t    InternationalIcon = props.internationalIcon;\n\n\n\treturn function (_ref2) {\n\t\tvar value = _ref2.value;\n\t\treturn _react2.default.createElement(\n\t\t\t'div',\n\t\t\t{\n\t\t\t\tclassName: (0, _classnames2.default)('react-phone-number-input__icon', {\n\t\t\t\t\t'react-phone-number-input__icon--international': value === undefined\n\t\t\t\t}) },\n\t\t\tvalue ? _react2.default.createElement(FlagComponent, {\n\t\t\t\tcountry: value,\n\t\t\t\tflags: flags,\n\t\t\t\tflagsPath: flagsPath }) : _react2.default.createElement(InternationalIcon, null)\n\t\t);\n\t};\n}\n\n// Can move some country `<select/>` options\n// to the top of the list, for example.\n// See `countryOptions` property.\nfunction transformCountryOptions(options, transform) {\n\tif (!transform) {\n\t\treturn options;\n\t}\n\n\tvar optionsOnTop = [];\n\tvar optionsOnBottom = [];\n\tvar appendTo = optionsOnTop;\n\n\tvar _loop = function _loop() {\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) return 'break';\n\t\t\t_ref3 = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) return 'break';\n\t\t\t_ref3 = _i.value;\n\t\t}\n\n\t\tvar element = _ref3;\n\n\t\tif (element === '|') {\n\t\t\tappendTo.push({ divider: true });\n\t\t} else if (element === '...' || element === '…') {\n\t\t\tappendTo = optionsOnBottom;\n\t\t} else {\n\t\t\t// Find the position of the option.\n\t\t\tvar index = options.indexOf(options.filter(function (option) {\n\t\t\t\treturn option.value === element;\n\t\t\t})[0]);\n\t\t\t// Get the option.\n\t\t\tvar option = options[index];\n\t\t\t// Remove the option from its default position.\n\t\t\toptions.splice(index, 1);\n\t\t\t// Add the option on top.\n\t\t\tappendTo.push(option);\n\t\t}\n\t};\n\n\tfor (var _iterator = transform, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref3;\n\n\t\tvar _ret = _loop();\n\n\t\tif (_ret === 'break') break;\n\t}\n\n\treturn optionsOnTop.concat(options).concat(optionsOnBottom);\n}\n\nfunction generateParsedInput(value, phoneNumber, props) {\n\tvar displayInitialValueAsLocalNumber = props.displayInitialValueAsLocalNumber;\n\n\t// If the `value` (E.164 phone number)\n\t// belongs to the currently selected country\n\t// and `displayInitialValueAsLocalNumber` property is `true`\n\t// then convert `value` (E.164 phone number)\n\t// to a local phone number digits.\n\t// E.g. '+78005553535' -> '88005553535'.\n\n\tif (displayInitialValueAsLocalNumber && phoneNumber && phoneNumber.country) {\n\t\treturn (0, _inputControl.generateNationalNumberDigits)(phoneNumber);\n\t}\n\n\treturn value;\n}\n\nfunction isCountrySupported(country, metadata) {\n\treturn metadata.countries.hasOwnProperty(country);\n}\n\nfunction isCountrySupportedWithError(country, metadata) {\n\tif (isCountrySupported(country, metadata)) {\n\t\treturn true;\n\t} else {\n\t\tconsole.error('Country not found: ' + country);\n\t\treturn false;\n\t}\n}\n\nfunction isCountryOptionSupportedWithError(countryOption, metadata) {\n\tswitch (countryOption) {\n\t\tcase '|':\n\t\tcase '...':\n\t\tcase '…':\n\t\t\treturn true;\n\t\tdefault:\n\t\t\treturn isCountrySupportedWithError(countryOption, metadata);\n\t}\n}\n\nfunction filterCountries(countries, metadata) {\n\tif (countries) {\n\t\tcountries = countries.filter(function (country) {\n\t\t\treturn isCountrySupportedWithError(country, metadata);\n\t\t});\n\t\tif (countries.length === 0) {\n\t\t\tcountries = undefined;\n\t\t}\n\t}\n\treturn countries;\n}\n\nfunction filterCountryOptions(countryOptions, metadata) {\n\tif (countryOptions) {\n\t\tcountryOptions = countryOptions.filter(function (countryOption) {\n\t\t\treturn isCountryOptionSupportedWithError(countryOption, metadata);\n\t\t});\n\t\tif (countryOptions.length === 0) {\n\t\t\tcountryOptions = undefined;\n\t\t}\n\t}\n\treturn countryOptions;\n}\n\nfunction parseExtDigits(event) {\n\tif (event) {\n\t\tif (typeof event === 'string') {\n\t\t\tevent = (0, _core.parseDigits)(event);\n\t\t} else if (event.target && event.target.value) {\n\t\t\tevent.target.value = (0, _core.parseDigits)(event.target.value);\n\t\t}\n\t}\n\treturn event;\n}\n//# sourceMappingURL=PhoneInput.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.createInput = createInput;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _inputFormat = require('input-format');\n\nvar _core = require('libphonenumber-js/core');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\r\n * This input uses `input-format` library\r\n * for \"smart\" caret positioning.\r\n */\nfunction createInput(defaultMetadata) {\n\tvar _class, _temp2;\n\n\treturn _temp2 = _class = function (_Component) {\n\t\t_inherits(InputSmart, _Component);\n\n\t\tfunction InputSmart() {\n\t\t\tvar _ref;\n\n\t\t\tvar _temp, _this, _ret;\n\n\t\t\t_classCallCheck(this, InputSmart);\n\n\t\t\tfor (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t\t\t\targs[_key] = arguments[_key];\n\t\t\t}\n\n\t\t\treturn _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = InputSmart.__proto__ || Object.getPrototypeOf(InputSmart)).call.apply(_ref, [this].concat(args))), _this), _this.focus = function () {\n\t\t\t\treturn _this.input.focus();\n\t\t\t}, _this.storeInput = function (ref) {\n\t\t\t\treturn _this.input = ref;\n\t\t\t}, _this.format = function (value) {\n\t\t\t\tvar _this$props = _this.props,\n\t\t\t\t    country = _this$props.country,\n\t\t\t\t    metadata = _this$props.metadata;\n\n\t\t\t\t// \"As you type\" formatter.\n\n\t\t\t\tvar formatter = new _core.AsYouType(country, metadata);\n\n\t\t\t\t// Format the number.\n\t\t\t\tvar text = formatter.input(value);\n\n\t\t\t\treturn { text: text, template: formatter.getTemplate() };\n\t\t\t}, _temp), _possibleConstructorReturn(_this, _ret);\n\t\t}\n\n\t\t_createClass(InputSmart, [{\n\t\t\tkey: 'render',\n\t\t\tvalue: function render() {\n\t\t\t\tvar _props = this.props,\n\t\t\t\t    country = _props.country,\n\t\t\t\t    metadata = _props.metadata,\n\t\t\t\t    rest = _objectWithoutProperties(_props, ['country', 'metadata']);\n\n\t\t\t\treturn _react2.default.createElement(_inputFormat.ReactInput, _extends({}, rest, {\n\t\t\t\t\tref: this.storeInput,\n\t\t\t\t\tparse: _core.parsePhoneNumberCharacter,\n\t\t\t\t\tformat: this.format }));\n\t\t\t}\n\t\t}]);\n\n\t\treturn InputSmart;\n\t}(_react.Component), _class.defaultProps = {\n\t\tmetadata: defaultMetadata\n\t}, _temp2;\n}\n\nexports.default = createInput();\n//# sourceMappingURL=InputSmart.js.map","export\r\n{\r\n\tdefault as templateParser\r\n}\r\nfrom './modules/template parser'\r\n\r\nexport\r\n{\r\n\tdefault as templateFormatter\r\n}\r\nfrom './modules/template formatter'\r\n\r\nexport\r\n{\r\n\tdefault as ReactInput\r\n}\r\nfrom './modules/ReactInput'\r\n\r\nexport\r\n{\r\n\tdefault as parseDigit\r\n}\r\nfrom './modules/parse digit'\r\n\r\nexport\r\n{\r\n\tdefault as parse\r\n}\r\nfrom './modules/parse'\r\n\r\nexport\r\n{\r\n\tdefault as format\r\n}\r\nfrom './modules/format'\r\n\r\nexport\r\n{\r\n\tonChange,\r\n\tonPaste,\r\n\tonCut,\r\n\tonKeyDown\r\n}\r\nfrom './modules/input control'","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = close_braces;\n\nvar _helpers = require('./helpers');\n\nfunction close_braces(retained_template, template) {\n\tvar placeholder = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'x';\n\tvar empty_placeholder = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ' ';\n\n\tvar cut_before = retained_template.length;\n\n\tvar opening_braces = (0, _helpers.count_occurences)('(', retained_template);\n\tvar closing_braces = (0, _helpers.count_occurences)(')', retained_template);\n\n\tvar dangling_braces = opening_braces - closing_braces;\n\n\twhile (dangling_braces > 0 && cut_before < template.length) {\n\t\tretained_template += template[cut_before].replace(placeholder, empty_placeholder);\n\n\t\tif (template[cut_before] === ')') {\n\t\t\tdangling_braces--;\n\t\t}\n\n\t\tcut_before++;\n\t}\n\n\treturn retained_template;\n}\n//# sourceMappingURL=close braces.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = edit;\n// Edits text `value` (if `operation` is passed) and repositions the `caret` if needed.\n//\n// Example:\n//\n// value - '88005553535'\n// caret - 2 // starting from 0; is positioned before the first zero\n// operation - 'Backspace'\n//\n// Returns\n// {\n// \tvalue: '8005553535'\n// \tcaret: 1\n// }\n//\n// Currently supports just 'Delete' and 'Backspace' operations\n//\nfunction edit(value, caret, operation) {\n\tswitch (operation) {\n\t\tcase 'Backspace':\n\t\t\t// If there exists the previous character,\n\t\t\t// then erase it and reposition the caret.\n\t\t\tif (caret > 0) {\n\t\t\t\t// Remove the previous character\n\t\t\t\tvalue = value.slice(0, caret - 1) + value.slice(caret);\n\t\t\t\t// Position the caret where the previous (erased) character was\n\t\t\t\tcaret--;\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'Delete':\n\t\t\t// Remove current digit (if any)\n\t\t\tvalue = value.slice(0, caret) + value.slice(caret + 1);\n\t\t\tbreak;\n\t}\n\n\treturn { value: value, caret: caret };\n}\n//# sourceMappingURL=edit.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.getSelection = getSelection;\nexports.getOperation = getOperation;\nexports.getCaretPosition = getCaretPosition;\nexports.setCaretPosition = setCaretPosition;\n// Gets <input/> selection bounds\nfunction getSelection(element) {\n\t// If no selection, return nothing\n\tif (element.selectionStart === element.selectionEnd) {\n\t\treturn;\n\t}\n\n\treturn { start: element.selectionStart, end: element.selectionEnd };\n}\n\n// Key codes\nvar Keys = exports.Keys = {\n\tBackspace: 8,\n\tDelete: 46\n\n\t// Finds out the operation to be intercepted and performed\n\t// based on the key down event `keyCode`.\n};function getOperation(event) {\n\tswitch (event.keyCode) {\n\t\tcase Keys.Backspace:\n\t\t\treturn 'Backspace';\n\n\t\tcase Keys.Delete:\n\t\t\treturn 'Delete';\n\t}\n}\n\n// Gets <input/> caret position\nfunction getCaretPosition(element) {\n\treturn element.selectionStart;\n}\n\n// Sets <input/> caret position\nfunction setCaretPosition(element, caret_position) {\n\t// Sanity check\n\tif (caret_position === undefined) {\n\t\treturn;\n\t}\n\n\t// Set caret position.\n\t// There has been an issue with caret positioning on Android devices.\n\t// https://github.com/catamphetamine/input-format/issues/2\n\t// I was revisiting this issue and looked for similar issues in other libraries.\n\t// For example, there's [`text-mask`](https://github.com/text-mask/text-mask) library.\n\t// They've had exactly the same issue when the caret seemingly refused to be repositioned programmatically.\n\t// The symptoms were the same: whenever the caret passed through a non-digit character of a mask (a whitespace, a bracket, a dash, etc), it looked as if it placed itself one character before its correct position.\n\t// https://github.com/text-mask/text-mask/issues/300\n\t// They seem to have found a basic fix for it: calling `input.setSelectionRange()` in a timeout rather than instantly for Android devices.\n\t// https://github.com/text-mask/text-mask/pull/400/files\n\t// I've implemented the same workaround here.\n\tif (isAndroid()) {\n\t\tsetTimeout(function () {\n\t\t\treturn element.setSelectionRange(caret_position, caret_position);\n\t\t}, 0);\n\t} else {\n\t\telement.setSelectionRange(caret_position, caret_position);\n\t}\n}\n\nfunction isAndroid() {\n\t// `navigator` is not defined when running mocha tests.\n\tif (typeof navigator !== 'undefined') {\n\t\treturn ANDROID_USER_AGENT_REG_EXP.test(navigator.userAgent);\n\t}\n}\n\nvar ANDROID_USER_AGENT_REG_EXP = /Android/i;\n//# sourceMappingURL=dom.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.createInput = createInput;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _core = require('libphonenumber-js/core');\n\nvar _reactLifecyclesCompat = require('react-lifecycles-compat');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n// `PureComponent` is only available in React >= 15.3.0.\nvar PureComponent = _react2.default.PureComponent || _react2.default.Component;\n\nfunction createInput(defaultMetadata) {\n\t/**\r\n  * `InputBasic`'s caret is not as \"smart\" as the default `inputComponent`'s\r\n  * but still works good enough. When erasing or inserting digits in the middle\r\n  * of a phone number the caret usually jumps to the end: this is the expected\r\n  * behaviour and it's the workaround for the [Samsung Galaxy smart caret positioning bug](https://github.com/catamphetamine/react-phone-number-input/issues/75).\r\n  */\n\tvar InputBasic = function (_PureComponent) {\n\t\t_inherits(InputBasic, _PureComponent);\n\n\t\tfunction InputBasic() {\n\t\t\tvar _ref;\n\n\t\t\tvar _temp, _this, _ret;\n\n\t\t\t_classCallCheck(this, InputBasic);\n\n\t\t\tfor (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t\t\t\targs[_key] = arguments[_key];\n\t\t\t}\n\n\t\t\treturn _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = InputBasic.__proto__ || Object.getPrototypeOf(InputBasic)).call.apply(_ref, [this].concat(args))), _this), _this.state = {}, _this.onChange = function (event) {\n\t\t\t\tvar onChange = _this.props.onChange;\n\t\t\t\tvar value = _this.state.value;\n\n\n\t\t\t\tvar newValue = (0, _core.parseIncompletePhoneNumber)(event.target.value);\n\n\t\t\t\t// By default, if a value is something like `\"(123)\"`\n\t\t\t\t// then Backspace would only erase the rightmost brace\n\t\t\t\t// becoming something like `\"(123\"`\n\t\t\t\t// which would give the same `\"123\"` value\n\t\t\t\t// which would then be formatted back to `\"(123)\"`\n\t\t\t\t// and so a user wouldn't be able to erase the phone number.\n\t\t\t\t// Working around this issue with this simple hack.\n\t\t\t\tif (newValue === value) {\n\t\t\t\t\tif (_this.format(newValue).indexOf(event.target.value) === 0) {\n\t\t\t\t\t\t// Trim the last digit (or plus sign).\n\t\t\t\t\t\tnewValue = newValue.slice(0, -1);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Prevents React from resetting the `<input/>` caret position.\n\t\t\t\t// https://github.com/reactjs/react-redux/issues/525#issuecomment-254852039\n\t\t\t\t// https://github.com/facebook/react/issues/955\n\t\t\t\t_this.setState({ value: newValue }, function () {\n\t\t\t\t\treturn onChange(newValue);\n\t\t\t\t});\n\t\t\t}, _this.onBlur = function (event) {\n\t\t\t\tvar onBlur = _this.props.onBlur;\n\t\t\t\tvar value = _this.state.value;\n\n\t\t\t\tif (onBlur) {\n\t\t\t\t\t// `event` is React's `SyntheticEvent`.\n\t\t\t\t\t// Its `.value` is read-only therefore cloning it.\n\t\t\t\t\tvar _event = _extends({}, event, {\n\t\t\t\t\t\ttarget: _extends({}, event.target, {\n\t\t\t\t\t\t\tvalue: value\n\t\t\t\t\t\t})\n\t\t\t\t\t\t// Workaround for `redux-form` event detection.\n\t\t\t\t\t\t// https://github.com/erikras/redux-form/blob/v5/src/events/isEvent.js\n\t\t\t\t\t});_event.stopPropagation = event.stopPropagation;\n\t\t\t\t\t_event.preventDefault = event.preventDefault;\n\t\t\t\t\treturn onBlur(_event);\n\t\t\t\t}\n\t\t\t}, _this.focus = function () {\n\t\t\t\treturn _this.input.focus();\n\t\t\t}, _this.storeInput = function (ref) {\n\t\t\t\treturn _this.input = ref;\n\t\t\t}, _temp), _possibleConstructorReturn(_this, _ret);\n\t\t}\n\n\t\t_createClass(InputBasic, [{\n\t\t\tkey: 'format',\n\t\t\tvalue: function format(value) {\n\t\t\t\tvar _props = this.props,\n\t\t\t\t    country = _props.country,\n\t\t\t\t    metadata = _props.metadata;\n\n\t\t\t\treturn (0, _core.formatIncompletePhoneNumber)(value, country, metadata);\n\t\t\t}\n\t\t}, {\n\t\t\tkey: 'render',\n\t\t\tvalue: function render() {\n\t\t\t\tvar _props2 = this.props,\n\t\t\t\t    onChange = _props2.onChange,\n\t\t\t\t    onFocus = _props2.onFocus,\n\t\t\t\t    country = _props2.country,\n\t\t\t\t    metadata = _props2.metadata,\n\t\t\t\t    Input = _props2.inputComponent,\n\t\t\t\t    rest = _objectWithoutProperties(_props2, ['onChange', 'onFocus', 'country', 'metadata', 'inputComponent']);\n\n\t\t\t\t// Prevents React from resetting the `<input/>` caret position.\n\t\t\t\t// https://github.com/reactjs/react-redux/issues/525#issuecomment-254852039\n\t\t\t\t// https://github.com/facebook/react/issues/955\n\n\n\t\t\t\tvar value = this.state.value;\n\n\t\t\t\t// Deprecated. Should be removed in a future major version release.\n\t\t\t\t// `type=\"tel\"` and `autoComplete=\"tel\"` properties are here\n\t\t\t\t// just for the \"Without country select\" component exported from\n\t\t\t\t// `react-phone-number-input/basic-input` subpackage.\n\t\t\t\t// These two properties will be overwritten by `<PhoneInput/>` properties\n\t\t\t\t// when not used as a \"Without country select\" component.\n\n\t\t\t\treturn _react2.default.createElement(Input, _extends({\n\t\t\t\t\ttype: 'tel',\n\t\t\t\t\tautoComplete: 'tel'\n\t\t\t\t}, rest, {\n\t\t\t\t\tref: this.storeInput,\n\t\t\t\t\tvalue: this.format(value),\n\t\t\t\t\tonChange: this.onChange,\n\t\t\t\t\tonFocus: onFocus,\n\t\t\t\t\tonBlur: this.onBlur }));\n\t\t\t}\n\t\t}], [{\n\t\t\tkey: 'getDerivedStateFromProps',\n\n\t\t\t// Prevents React from resetting the `<input/>` caret position.\n\t\t\t// https://github.com/reactjs/react-redux/issues/525#issuecomment-254852039\n\t\t\t// https://github.com/facebook/react/issues/955\n\t\t\tvalue: function getDerivedStateFromProps(_ref2) {\n\t\t\t\tvar value = _ref2.value;\n\n\t\t\t\treturn { value: value };\n\t\t\t}\n\n\t\t\t// This `onBlur` interceptor is a workaround for `redux-form`'s bug\n\t\t\t// so that it gets the up-to-date `value` in its `onBlur` handler.\n\t\t\t// Without this fix it just gets the actual (raw) input field textual value.\n\t\t\t// E.g. `+7 800 555 35 35` instead of `+78005553535`.\n\t\t\t//\n\t\t\t// New `value` is taken from `event` in `redux-form`'s `handleBlur()`.\n\t\t\t// https://github.com/erikras/redux-form/blob/785edf8aac3adc84aba2ab6898a4aa8c48687750/src/ConnectedField.js#L168\n\t\t\t// `redux-form` shouldn't have taken the new `value` from `event`.\n\t\t\t//\n\t\t\t// A developer is not supposed to pass this `onBlur` property manually.\n\t\t\t// Instead, `redux-form` passes `onBlur` to this component automatically\n\t\t\t// and this component patches that `onBlur` handler (a hacky way but works).\n\t\t\t//\n\n\t\t}]);\n\n\t\treturn InputBasic;\n\t}(PureComponent);\n\n\tInputBasic.propTypes = {\n\t\t// The parsed phone number.\n\t\t// \"Parsed\" not in a sense of \"E.164\"\n\t\t// but rather in a sense of \"having only\n\t\t// digits and possibly a leading plus character\".\n\t\t// Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\n\t\tvalue: _propTypes2.default.string.isRequired,\n\n\t\t// Updates the `value`.\n\t\tonChange: _propTypes2.default.func.isRequired,\n\n\t\t// Toggles the `--focus` CSS class.\n\t\t// https://github.com/catamphetamine/react-phone-number-input/issues/189\n\t\tonFocus: _propTypes2.default.func,\n\n\t\t// `onBlur` workaround for `redux-form`'s bug.\n\t\tonBlur: _propTypes2.default.func,\n\n\t\t// A two-letter country code for formatting `value`\n\t\t// as a national phone number (e.g. `(800) 555 35 35`).\n\t\t// E.g. \"US\", \"RU\", etc.\n\t\t// If no `country` is passed then `value`\n\t\t// is formatted as an international phone number.\n\t\t// (e.g. `+7 800 555 35 35`)\n\t\tcountry: _propTypes2.default.string,\n\n\t\t// `libphonenumber-js` metadata.\n\t\tmetadata: _propTypes2.default.object.isRequired,\n\n\t\t// The `<input/>` component.\n\t\tinputComponent: _propTypes2.default.elementType.isRequired\n\t};\n\n\tInputBasic.defaultProps = {\n\t\tmetadata: defaultMetadata,\n\t\tinputComponent: 'input'\n\t};\n\n\treturn (0, _reactLifecyclesCompat.polyfill)(InputBasic);\n}\n\nexports.default = createInput();\n//# sourceMappingURL=InputBasic.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _countries = require('./countries');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Default country flag icon.\n// `<img/>` is wrapped in a `<div/>` to prevent SVGs from exploding in size in IE 11.\n// https://github.com/catamphetamine/react-phone-number-input/issues/111\nvar FlagComponent = function FlagComponent(_ref) {\n\tvar country = _ref.country,\n\t    flags = _ref.flags,\n\t    flagsPath = _ref.flagsPath,\n\t    className = _ref.className;\n\n\tif (flags && flags[country]) {\n\t\treturn flags[country]();\n\t}\n\treturn _react2.default.createElement('img', {\n\t\talt: country,\n\t\tclassName: 'react-phone-number-input__icon-image',\n\t\tsrc: '' + flagsPath + (0, _countries.getCountryCodeForFlag)(country).toLowerCase() + '.svg' });\n};\n\nFlagComponent.propTypes = {\n\t// The country to be selected by default.\n\t// Two-letter country code (\"ISO 3166-1 alpha-2\").\n\tcountry: _propTypes2.default.string.isRequired,\n\n\t// Country flag icon components.\n\t// By default flag icons are inserted as `<img/>`s\n\t// with their `src` pointed to `flag-icon-css` github repo.\n\t// There might be cases (e.g. an offline application)\n\t// where having a large (3 megabyte) `<svg/>` flags\n\t// bundle is more appropriate.\n\t// `import flags from 'react-phone-number-input/flags'`.\n\tflags: _propTypes2.default.objectOf(_propTypes2.default.elementType),\n\n\t// A base URL path for national flag SVG icons.\n\t// By default it uses the ones from `flag-icon-css` github repo.\n\tflagsPath: _propTypes2.default.string.isRequired\n};\n\nexports.default = FlagComponent;\n//# sourceMappingURL=Flag.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.getPreSelectedCountry = getPreSelectedCountry;\nexports.getCountrySelectOptions = getCountrySelectOptions;\nexports.parsePhoneNumber = parsePhoneNumber;\nexports.generateNationalNumberDigits = generateNationalNumberDigits;\nexports.migrateParsedInputForNewCountry = migrateParsedInputForNewCountry;\nexports.e164 = e164;\nexports.trimNumber = trimNumber;\nexports.getCountryForPartialE164Number = getCountryForPartialE164Number;\nexports.parseInput = parseInput;\nexports.get_country_from_possibly_incomplete_international_phone_number = get_country_from_possibly_incomplete_international_phone_number;\nexports.compare_strings = compare_strings;\nexports.strip_country_calling_code = strip_country_calling_code;\nexports.get_national_significant_number_part = get_national_significant_number_part;\nexports.could_number_belong_to_country = could_number_belong_to_country;\n\nvar _core = require('libphonenumber-js/core');\n\n/**\r\n * Decides which country should be pre-selected\r\n * when the phone number input component is first mounted.\r\n * @param  {object?} phoneNumber - An instance of `PhoneNumber` class.\r\n * @param  {string?} country - Pre-defined country (two-letter code).\r\n * @param  {string[]?} countries - A list of countries available.\r\n * @param  {boolean} includeInternationalOption - Whether \"International\" country option is available.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @return {string?}\r\n */\nfunction getPreSelectedCountry(phoneNumber, country, countries, includeInternationalOption, metadata) {\n\t// If can get country from E.164 phone number\n\t// then it overrides the `country` passed (or not passed).\n\tif (phoneNumber && phoneNumber.country) {\n\t\t// `country` will be left `undefined` in case of non-detection.\n\t\tcountry = phoneNumber.country;\n\t}\n\n\t// Only pre-select a country if it's in the available `countries` list.\n\tif (countries && countries.indexOf(country) < 0) {\n\t\tcountry = undefined;\n\t}\n\n\t// If there will be no \"International\" option\n\t// then some `country` must be selected.\n\t// It will still be the wrong country though.\n\t// But still country `<select/>` can't be left in a broken state.\n\tif (!country && !includeInternationalOption && countries && countries.length > 0) {\n\t\tcountry = countries[0];\n\t}\n\n\treturn country;\n}\n\n/**\r\n * Generates a sorted list of country `<select/>` options.\r\n * @param  {string[]} countries - A list of two-letter (\"ISO 3166-1 alpha-2\") country codes.\r\n * @param  {object} labels - Custom country labels. E.g. `{ RU: 'Россия', US: 'США', ... }`.\r\n * @param  {boolean} includeInternationalOption - Whether should include \"International\" option at the top of the list.\r\n * @return {object[]} A list of objects having shape `{ value : string, label : string }`.\r\n */\nfunction getCountrySelectOptions(countries, country_names, includeInternationalOption) {\n\t// Generates a `<Select/>` option for each country.\n\tvar country_select_options = countries.map(function (country) {\n\t\treturn {\n\t\t\tvalue: country,\n\t\t\tlabel: country_names[country]\n\t\t};\n\t});\n\n\t// Sort the list of countries alphabetically.\n\tcountry_select_options.sort(function (a, b) {\n\t\treturn compare_strings(a.label, b.label);\n\t});\n\n\t// Add the \"International\" option to the country list (if suitable)\n\tif (includeInternationalOption) {\n\t\tcountry_select_options.unshift({\n\t\t\tlabel: country_names.ZZ\n\t\t});\n\t}\n\n\treturn country_select_options;\n}\n\n/**\r\n * Parses a E.164 phone number to an instance of `PhoneNumber` class.\r\n * @param {string?} value = E.164 phone number.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @example\r\n * parsePhoneNumber('+78005553535')\r\n */\nfunction parsePhoneNumber(value, metadata) {\n\treturn (0, _core.parsePhoneNumberFromString)(value || '', metadata);\n}\n\n/**\r\n * Generates national number digits for a parsed phone.\r\n * May prepend national prefix.\r\n * The phone number must be a complete and valid phone number.\r\n * @param  {object} phoneNumber - An instance of `PhoneNumber` class.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @return {string}\r\n * @example\r\n * getNationalNumberDigits({ country: 'RU', phone: '8005553535' })\r\n * // returns '88005553535'\r\n */\nfunction generateNationalNumberDigits(phoneNumber) {\n\treturn phoneNumber.formatNational().replace(/\\D/g, '');\n}\n\n/**\r\n * Migrates parsed `<input/>` `value` for the newly selected `country`.\r\n * @param {string?} value - The `value` parsed from phone number `<input/>` (it's the `parsed_input` state property, not the `value` property).\r\n * @param {string?} previousCountry - Previously selected country.\r\n * @param {string?} newCountry - Newly selected country. Can't be same as previously selected country.\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @param {boolean} preferNationalFormat - whether should attempt to convert from international to national number for the new country.\r\n * @return {string?}\r\n */\nfunction migrateParsedInputForNewCountry(value, previous_country, new_country, metadata, preferNationalFormat) {\n\t// If `parsed_input` is empty\n\t// then no need to migrate anything.\n\tif (!value) {\n\t\treturn value;\n\t}\n\n\t// If switching to some country.\n\t// (from \"International\" or another country)\n\t// If switching from \"International\" then `value` starts with a `+`.\n\t// Otherwise it may or may not start with a `+`.\n\tif (new_country) {\n\t\t// If the phone number was entered in international format\n\t\t// then migrate it to the newly selected country.\n\t\t// The phone number may be incomplete.\n\t\t// The phone number entered not necessarily starts with\n\t\t// the previously selected country phone prefix.\n\t\tif (value[0] === '+') {\n\t\t\t// If the international phone number is for the new country\n\t\t\t// then convert it to local if required.\n\t\t\tif (preferNationalFormat) {\n\t\t\t\t// // If a phone number is being input in international form\n\t\t\t\t// // and the country can already be derived from it,\n\t\t\t\t// // and if it is the new country, then format as a national number.\n\t\t\t\t// const derived_country = get_country_from_possibly_incomplete_international_phone_number(value, metadata)\n\t\t\t\t// if (derived_country === new_country)\n\t\t\t\t// {\n\t\t\t\t// \treturn strip_country_calling_code(value, derived_country, metadata)\n\t\t\t\t// }\n\n\t\t\t\t// Actually, the two countries don't necessarily need to match:\n\t\t\t\t// the condition could be looser here, because several countries\n\t\t\t\t// might share the same international phone number format\n\t\t\t\t// (for example, \"NANPA\" countries like US, Canada, etc).\n\t\t\t\t// The looser condition would be just \"same nternational phone number format\"\n\t\t\t\t// which would mean \"same country calling code\" in the context of `libphonenumber-js`.\n\t\t\t\tif (value.indexOf('+' + (0, _core.getCountryCallingCode)(new_country, metadata)) === 0) {\n\t\t\t\t\treturn strip_country_calling_code(value, new_country, metadata);\n\t\t\t\t}\n\n\t\t\t\t// Simply discard the previously entered international phone number,\n\t\t\t\t// because otherwise any \"smart\" transformation like getting the\n\t\t\t\t// \"national (significant) number\" part and then prepending the\n\t\t\t\t// newly selected country's \"country calling code\" to it\n\t\t\t\t// would just be confusing for a user without being actually useful.\n\t\t\t\treturn '';\n\n\t\t\t\t// // Simply strip the leading `+` character\n\t\t\t\t// // therefore simply converting all digits into a \"local\" phone number.\n\t\t\t\t// // https://github.com/catamphetamine/react-phone-number-input/issues/287\n\t\t\t\t// return value.slice(1)\n\t\t\t}\n\n\t\t\t// If the international phone number already contains\n\t\t\t// any country calling code then trim the country calling code part.\n\t\t\t// (that could also be the newly selected country phone code prefix as well)\n\t\t\t// `value` doesn't neccessarily belong to `previous_country`.\n\t\t\t// (e.g. if a user enters an international number\n\t\t\t//  not belonging to any of the reduced `countries` list).\n\t\t\tvalue = strip_country_calling_code(value, previous_country, metadata);\n\n\t\t\t// Prepend country calling code prefix\n\t\t\t// for the newly selected country.\n\t\t\treturn e164(value, new_country, metadata) || '+' + (0, _core.getCountryCallingCode)(new_country, metadata);\n\t\t}\n\t}\n\t// If switching to \"International\" from a country.\n\telse {\n\t\t\t// If the phone number was entered in national format.\n\t\t\tif (value[0] !== '+') {\n\t\t\t\t// Format the national phone number as an international one.\n\t\t\t\t// The phone number entered not necessarily even starts with\n\t\t\t\t// the previously selected country phone prefix.\n\t\t\t\t// Even if the phone number belongs to whole another country\n\t\t\t\t// it will still be parsed into some national phone number.\n\t\t\t\treturn e164(value, previous_country, metadata) || '';\n\t\t\t}\n\t\t}\n\n\treturn value;\n}\n\n/**\r\n * Converts phone number digits to a (possibly incomplete) E.164 phone number.\r\n * @param  {string?} number - A possibly incomplete phone number digits string. Can be a possibly incomplete E.164 phone number.\r\n * @param  {string?} country\r\n * @param  {[object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\nfunction e164(number, country, metadata) {\n\tif (!number) {\n\t\treturn;\n\t}\n\n\t// If the phone number is being input in international format.\n\tif (number[0] === '+') {\n\t\t// If it's just the `+` sign then return nothing.\n\t\tif (number === '+') {\n\t\t\treturn;\n\t\t}\n\n\t\t// If there are any digits then the `value` is returned as is.\n\t\treturn number;\n\t}\n\n\t// For non-international phone numbers\n\t// an accompanying country code is required.\n\tif (!country) {\n\t\treturn;\n\t}\n\n\tvar partial_national_significant_number = get_national_significant_number_part(number, country, metadata);\n\n\tif (partial_national_significant_number) {\n\t\treturn '+' + (0, _core.getCountryCallingCode)(country, metadata) + partial_national_significant_number;\n\t}\n}\n\n/**\r\n * Trims phone number digits if they exceed the maximum possible length\r\n * for a national (significant) number for the country.\r\n * @param  {string} number - A possibly incomplete phone number digits string. Can be a possibly incomplete E.164 phone number.\r\n * @param  {string} country\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string} Can be empty.\r\n */\nfunction trimNumber(number, country, metadata) {\n\tvar nationalSignificantNumberPart = get_national_significant_number_part(number, country, metadata);\n\tvar overflowDigitsCount = nationalSignificantNumberPart.length - getMaxNumberLength(country, metadata);\n\tif (overflowDigitsCount > 0) {\n\t\treturn number.slice(0, number.length - overflowDigitsCount);\n\t}\n\treturn number;\n}\n\nfunction getMaxNumberLength(country, metadata) {\n\t// Get \"possible lengths\" for a phone number of the country.\n\tmetadata = new _core.Metadata(metadata);\n\tmetadata.country(country);\n\t// Return the last \"possible length\".\n\treturn metadata.possibleLengths()[metadata.possibleLengths().length - 1];\n}\n\n// If the phone number being input is an international one\n// then tries to derive the country from the phone number.\n// (regardless of whether there's any country currently selected)\n/**\r\n * @param {string} parsedInput - A possibly incomplete E.164 phone number.\r\n * @param {string?} country - Currently selected country.\r\n * @param {string[]?} countries - A list of available countries. If not passed then \"all countries\" are assumed.\r\n * @param {boolean} includeInternationalOption - Whether \"International\" country option is available.\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\nfunction getCountryForPartialE164Number(partialE164Number, country, countries, includeInternationalOption, metadata) {\n\tif (partialE164Number === '+') {\n\t\t// Don't change the currently selected country yet.\n\t\treturn country;\n\t}\n\n\tvar derived_country = get_country_from_possibly_incomplete_international_phone_number(partialE164Number, metadata);\n\n\t// If a phone number is being input in international form\n\t// and the country can already be derived from it,\n\t// then select that country.\n\tif (derived_country && (!countries || countries.indexOf(derived_country) >= 0)) {\n\t\treturn derived_country;\n\t}\n\t// If \"International\" country option has not been disabled\n\t// and the international phone number entered doesn't correspond\n\t// to the currently selected country then reset the currently selected country.\n\telse if (country && includeInternationalOption && !could_number_belong_to_country(partialE164Number, country, metadata)) {\n\t\t\treturn undefined;\n\t\t}\n\n\t// Don't change the currently selected country.\n\treturn country;\n}\n\n/**\r\n * Parses `<input/>` value. Derives `country` from `input`. Derives an E.164 `value`.\r\n * @param  {string?} input — Parsed `<input/>` value. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n * @param  {string?} prevInput — Previous parsed `<input/>` value. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n * @param  {string?} country - Currently selected country.\r\n * @param  {string[]?} countries - A list of available countries. If not passed then \"all countries\" are assumed.\r\n * @param  {boolean} includeInternationalOption - Whether \"International\" country option is available.\r\n * @param  {boolean} limitMaxLength — Whether to enable limiting phone number max length.\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {object} An object of shape `{ input, country, value }`.\r\n */\nfunction parseInput(input, prevInput, country, countries, includeInternationalOption, limitMaxLength, metadata) {\n\t// Trim the input to not exceed the maximum possible number length.\n\tif (input && country && limitMaxLength) {\n\t\tinput = trimNumber(input, country, metadata);\n\t}\n\n\t// If this `onChange()` event was triggered\n\t// as a result of selecting \"International\" country\n\t// then force-prepend a `+` sign if the phone number\n\t// `<input/>` value isn't in international format.\n\tif (input && !country && input[0] !== '+') {\n\t\tinput = '+' + input;\n\t}\n\n\t// If the previously entered phone number\n\t// has been entered in international format\n\t// and the user decides to erase it,\n\t// then also reset the `country`\n\t// because it was most likely automatically selected\n\t// while the user was typing in the phone number\n\t// in international format.\n\t// This fixes the issue when a user is presented\n\t// with a phone number input with no country selected\n\t// and then types in their local phone number\n\t// then discovers that the input's messed up\n\t// (a `+` has been prepended at the start of their input\n\t//  and a random country has been selected),\n\t// decides to undo it all by erasing everything\n\t// and then types in their local phone number again\n\t// resulting in a seemingly correct phone number\n\t// but in reality that phone number has incorrect country.\n\t// https://github.com/catamphetamine/react-phone-number-input/issues/273\n\tif (!input && prevInput && prevInput[0] === '+') {\n\t\tcountry = undefined;\n\t}\n\t// Also resets such \"randomly\" selected country\n\t// as soon as the user erases the number\n\t// digit-by-digit up to the leading `+` sign.\n\tif (input === '+' && prevInput && prevInput[0] === '+' && prevInput.length > '+'.length) {\n\t\tcountry = undefined;\n\t}\n\n\t// Generate the new `value` property.\n\tvar value = void 0;\n\tif (input) {\n\t\tif (input[0] === '+') {\n\t\t\tif (input !== '+') {\n\t\t\t\tvalue = input;\n\t\t\t}\n\t\t} else {\n\t\t\tvalue = e164(input, country, metadata);\n\t\t}\n\t}\n\n\t// Derive the country from the phone number.\n\t// (regardless of whether there's any country currently selected)\n\tif (value) {\n\t\tcountry = getCountryForPartialE164Number(value, country, countries, includeInternationalOption, metadata);\n\t}\n\n\treturn {\n\t\tinput: input,\n\t\tcountry: country,\n\t\tvalue: value\n\t};\n}\n\n/**\r\n * Determines the country for a given (possibly incomplete) E.164 phone number.\r\n * @param  {string} number - A possibly incomplete E.164 phone number.\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\nfunction get_country_from_possibly_incomplete_international_phone_number(number, metadata) {\n\tvar formatter = new _core.AsYouType(null, metadata);\n\tformatter.input(number);\n\t// `001` is a special \"non-geograpical entity\" code\n\t// in Google's `libphonenumber` library.\n\tif (formatter.country === '001') {\n\t\treturn;\n\t}\n\treturn formatter.country;\n}\n\n/**\r\n * Compares two strings.\r\n * A helper for `Array.sort()`.\r\n */\nfunction compare_strings(a, b) {\n\t// Use `String.localeCompare` if it's available.\n\t// https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\n\t// Which means everyone except IE <= 10 and Safari <= 10.\n\t// `localeCompare()` is available in latest Node.js versions.\n\t/* istanbul ignore else */\n\tif (String.prototype.localeCompare) {\n\t\treturn a.localeCompare(b);\n\t}\n\t/* istanbul ignore next */\n\treturn a < b ? -1 : a > b ? 1 : 0;\n}\n\n/**\r\n * Strips `+${countryCallingCode}` prefix from an E.164 phone number.\r\n * @param {string} number - (possibly incomplete) E.164 phone number.\r\n * @param {string?} country - A possible country for this phone number.\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string}\r\n */\nfunction strip_country_calling_code(number, country, metadata) {\n\t// Just an optimization, so that it\n\t// doesn't have to iterate through all country calling codes.\n\tif (country) {\n\t\tvar country_calling_prefix = '+' + (0, _core.getCountryCallingCode)(country, metadata);\n\n\t\t// If `country` fits the actual `number`.\n\t\tif (number.length < country_calling_prefix.length) {\n\t\t\tif (country_calling_prefix.indexOf(number) === 0) {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t} else {\n\t\t\tif (number.indexOf(country_calling_prefix) === 0) {\n\t\t\t\treturn number.slice(country_calling_prefix.length);\n\t\t\t}\n\t\t}\n\t}\n\n\t// If `country` doesn't fit the actual `number`.\n\t// Try all available country calling codes.\n\tfor (var _iterator = Object.keys(metadata.country_calling_codes), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar country_calling_code = _ref;\n\n\t\tif (number.indexOf(country_calling_code) === '+'.length) {\n\t\t\treturn number.slice('+'.length + country_calling_code.length);\n\t\t}\n\t}\n\n\treturn '';\n}\n\n/**\r\n * Parses a partially entered national phone number digits\r\n * (or a partially entered E.164 international phone number)\r\n * and returns the national significant number part.\r\n * National significant number returned doesn't come with a national prefix.\r\n * @param {string} number - National number digits. Or possibly incomplete E.164 phone number.\r\n * @param {string?} country\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string} Can be empty.\r\n */\nfunction get_national_significant_number_part(number, country, metadata) {\n\t// Create \"as you type\" formatter.\n\tvar formatter = new _core.AsYouType(country, metadata);\n\n\t// Input partial national phone number.\n\tformatter.input(number);\n\n\t// Return the parsed partial national phone number.\n\treturn formatter.getNationalNumber();\n}\n\n/**\r\n * Checks if a partially entered E.164 phone number could belong to a country.\r\n * @param  {string} number\r\n * @param  {string} country\r\n * @return {boolean}\r\n */\nfunction could_number_belong_to_country(number, country, metadata) {\n\tvar country_calling_code = (0, _core.getCountryCallingCode)(country, metadata);\n\n\tvar i = 0;\n\twhile (i + 1 < number.length && i < country_calling_code.length) {\n\t\tif (number[i + 1] !== country_calling_code[i]) {\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\n\treturn true;\n}\n//# sourceMappingURL=input-control.js.map","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _class, _temp2;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar CountrySelectNative = (_temp2 = _class = function (_Component) {\n\t_inherits(CountrySelectNative, _Component);\n\n\tfunction CountrySelectNative() {\n\t\tvar _ref;\n\n\t\tvar _temp, _this, _ret;\n\n\t\t_classCallCheck(this, CountrySelectNative);\n\n\t\tfor (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t\t\targs[_key] = arguments[_key];\n\t\t}\n\n\t\treturn _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = CountrySelectNative.__proto__ || Object.getPrototypeOf(CountrySelectNative)).call.apply(_ref, [this].concat(args))), _this), _this.onChange = function (event) {\n\t\t\tvar onChange = _this.props.onChange;\n\n\t\t\tvar value = event.target.value;\n\t\t\tonChange(value === 'ZZ' ? undefined : value);\n\t\t}, _temp), _possibleConstructorReturn(_this, _ret);\n\t}\n\n\t_createClass(CountrySelectNative, [{\n\t\tkey: 'render',\n\t\tvalue: function render() {\n\t\t\tvar _props = this.props,\n\t\t\t    name = _props.name,\n\t\t\t    value = _props.value,\n\t\t\t    options = _props.options,\n\t\t\t    onFocus = _props.onFocus,\n\t\t\t    onBlur = _props.onBlur,\n\t\t\t    disabled = _props.disabled,\n\t\t\t    tabIndex = _props.tabIndex,\n\t\t\t    className = _props.className,\n\t\t\t    SelectArrow = _props.selectArrowComponent;\n\n\n\t\t\tvar selectedOption = void 0;\n\t\t\tfor (var _iterator = options, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\t\t\tvar _ref2;\n\n\t\t\t\tif (_isArray) {\n\t\t\t\t\tif (_i >= _iterator.length) break;\n\t\t\t\t\t_ref2 = _iterator[_i++];\n\t\t\t\t} else {\n\t\t\t\t\t_i = _iterator.next();\n\t\t\t\t\tif (_i.done) break;\n\t\t\t\t\t_ref2 = _i.value;\n\t\t\t\t}\n\n\t\t\t\tvar option = _ref2;\n\n\t\t\t\tif (!option.divider && option.value === value) {\n\t\t\t\t\tselectedOption = option;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn _react2.default.createElement(\n\t\t\t\t'div',\n\t\t\t\t{ className: (0, _classnames2.default)(className, 'react-phone-number-input__country--native') },\n\t\t\t\tselectedOption && _react2.default.createElement(selectedOption.icon, { value: value }),\n\t\t\t\t_react2.default.createElement(\n\t\t\t\t\t'select',\n\t\t\t\t\t{\n\t\t\t\t\t\tname: name,\n\t\t\t\t\t\tvalue: value || 'ZZ',\n\t\t\t\t\t\tonChange: this.onChange,\n\t\t\t\t\t\tonFocus: onFocus,\n\t\t\t\t\t\tonBlur: onBlur,\n\t\t\t\t\t\tdisabled: disabled,\n\t\t\t\t\t\ttabIndex: tabIndex,\n\t\t\t\t\t\t'aria-label': this.props['aria-label'],\n\t\t\t\t\t\tclassName: 'react-phone-number-input__country-select' },\n\t\t\t\t\toptions.map(function (_ref3) {\n\t\t\t\t\t\tvar value = _ref3.value,\n\t\t\t\t\t\t    label = _ref3.label,\n\t\t\t\t\t\t    divider = _ref3.divider;\n\t\t\t\t\t\treturn _react2.default.createElement(\n\t\t\t\t\t\t\t'option',\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tkey: divider ? '|' : value || 'ZZ',\n\t\t\t\t\t\t\t\tvalue: divider ? '|' : value || 'ZZ',\n\t\t\t\t\t\t\t\tdisabled: divider ? true : false,\n\t\t\t\t\t\t\t\tclassName: divider ? 'react-phone-number-input__country-select-divider' : undefined },\n\t\t\t\t\t\t\tlabel\n\t\t\t\t\t\t);\n\t\t\t\t\t})\n\t\t\t\t),\n\t\t\t\t_react2.default.createElement(SelectArrow, null)\n\t\t\t);\n\t\t}\n\t}]);\n\n\treturn CountrySelectNative;\n}(_react.Component), _class.propTypes = {\n\t// A two-letter country code.\n\t// E.g. \"US\", \"RU\", etc.\n\tvalue: _propTypes2.default.string,\n\n\t// Updates the `value`.\n\tonChange: _propTypes2.default.func.isRequired,\n\n\t// `<select/>` options.\n\toptions: _propTypes2.default.arrayOf(_propTypes2.default.shape({\n\t\tvalue: _propTypes2.default.string,\n\t\tlabel: _propTypes2.default.string,\n\t\tdivider: _propTypes2.default.bool\n\t})).isRequired,\n\n\t// HTML `name` attribute.\n\tname: _propTypes2.default.string,\n\n\t// HTML `disabled` attribute.\n\tdisabled: _propTypes2.default.bool,\n\n\t// HTML `tabIndex` attribute.\n\ttabIndex: _propTypes2.default.number,\n\n\t// Select arrow component.\n\tselectArrowComponent: _propTypes2.default.elementType.isRequired,\n\n\t// Toggles the `--focus` CSS class.\n\t// https://github.com/catamphetamine/react-phone-number-input/issues/189\n\tonFocus: _propTypes2.default.func,\n\n\t// Toggles the `--focus` CSS class.\n\t// https://github.com/catamphetamine/react-phone-number-input/issues/189\n\tonBlur: _propTypes2.default.func\n}, _class.defaultProps = {\n\tselectArrowComponent: function selectArrowComponent() {\n\t\treturn _react2.default.createElement('div', { className: 'react-phone-number-input__country-select-arrow' });\n\t}\n}, _temp2);\nexports.default = CountrySelectNative;\n//# sourceMappingURL=CountrySelectNative.js.map","// This file is a workaround for a bug in web browsers' \"native\"\n// ES6 importing system which is uncapable of importing \"*.json\" files.\n// https://github.com/catamphetamine/libphonenumber-js/issues/239\nexport default {\"version\":\"1.7.47\",\"country_calling_codes\":{\"1\":[\"US\",\"AG\",\"AI\",\"AS\",\"BB\",\"BM\",\"BS\",\"CA\",\"DM\",\"DO\",\"GD\",\"GU\",\"JM\",\"KN\",\"KY\",\"LC\",\"MP\",\"MS\",\"PR\",\"SX\",\"TC\",\"TT\",\"VC\",\"VG\",\"VI\"],\"7\":[\"RU\",\"KZ\"],\"20\":[\"EG\"],\"27\":[\"ZA\"],\"30\":[\"GR\"],\"31\":[\"NL\"],\"32\":[\"BE\"],\"33\":[\"FR\"],\"34\":[\"ES\"],\"36\":[\"HU\"],\"39\":[\"IT\",\"VA\"],\"40\":[\"RO\"],\"41\":[\"CH\"],\"43\":[\"AT\"],\"44\":[\"GB\",\"GG\",\"IM\",\"JE\"],\"45\":[\"DK\"],\"46\":[\"SE\"],\"47\":[\"NO\",\"SJ\"],\"48\":[\"PL\"],\"49\":[\"DE\"],\"51\":[\"PE\"],\"52\":[\"MX\"],\"53\":[\"CU\"],\"54\":[\"AR\"],\"55\":[\"BR\"],\"56\":[\"CL\"],\"57\":[\"CO\"],\"58\":[\"VE\"],\"60\":[\"MY\"],\"61\":[\"AU\",\"CC\",\"CX\"],\"62\":[\"ID\"],\"63\":[\"PH\"],\"64\":[\"NZ\"],\"65\":[\"SG\"],\"66\":[\"TH\"],\"81\":[\"JP\"],\"82\":[\"KR\"],\"84\":[\"VN\"],\"86\":[\"CN\"],\"90\":[\"TR\"],\"91\":[\"IN\"],\"92\":[\"PK\"],\"93\":[\"AF\"],\"94\":[\"LK\"],\"95\":[\"MM\"],\"98\":[\"IR\"],\"211\":[\"SS\"],\"212\":[\"MA\",\"EH\"],\"213\":[\"DZ\"],\"216\":[\"TN\"],\"218\":[\"LY\"],\"220\":[\"GM\"],\"221\":[\"SN\"],\"222\":[\"MR\"],\"223\":[\"ML\"],\"224\":[\"GN\"],\"225\":[\"CI\"],\"226\":[\"BF\"],\"227\":[\"NE\"],\"228\":[\"TG\"],\"229\":[\"BJ\"],\"230\":[\"MU\"],\"231\":[\"LR\"],\"232\":[\"SL\"],\"233\":[\"GH\"],\"234\":[\"NG\"],\"235\":[\"TD\"],\"236\":[\"CF\"],\"237\":[\"CM\"],\"238\":[\"CV\"],\"239\":[\"ST\"],\"240\":[\"GQ\"],\"241\":[\"GA\"],\"242\":[\"CG\"],\"243\":[\"CD\"],\"244\":[\"AO\"],\"245\":[\"GW\"],\"246\":[\"IO\"],\"247\":[\"AC\"],\"248\":[\"SC\"],\"249\":[\"SD\"],\"250\":[\"RW\"],\"251\":[\"ET\"],\"252\":[\"SO\"],\"253\":[\"DJ\"],\"254\":[\"KE\"],\"255\":[\"TZ\"],\"256\":[\"UG\"],\"257\":[\"BI\"],\"258\":[\"MZ\"],\"260\":[\"ZM\"],\"261\":[\"MG\"],\"262\":[\"RE\",\"YT\"],\"263\":[\"ZW\"],\"264\":[\"NA\"],\"265\":[\"MW\"],\"266\":[\"LS\"],\"267\":[\"BW\"],\"268\":[\"SZ\"],\"269\":[\"KM\"],\"290\":[\"SH\",\"TA\"],\"291\":[\"ER\"],\"297\":[\"AW\"],\"298\":[\"FO\"],\"299\":[\"GL\"],\"350\":[\"GI\"],\"351\":[\"PT\"],\"352\":[\"LU\"],\"353\":[\"IE\"],\"354\":[\"IS\"],\"355\":[\"AL\"],\"356\":[\"MT\"],\"357\":[\"CY\"],\"358\":[\"FI\",\"AX\"],\"359\":[\"BG\"],\"370\":[\"LT\"],\"371\":[\"LV\"],\"372\":[\"EE\"],\"373\":[\"MD\"],\"374\":[\"AM\"],\"375\":[\"BY\"],\"376\":[\"AD\"],\"377\":[\"MC\"],\"378\":[\"SM\"],\"380\":[\"UA\"],\"381\":[\"RS\"],\"382\":[\"ME\"],\"383\":[\"XK\"],\"385\":[\"HR\"],\"386\":[\"SI\"],\"387\":[\"BA\"],\"389\":[\"MK\"],\"420\":[\"CZ\"],\"421\":[\"SK\"],\"423\":[\"LI\"],\"500\":[\"FK\"],\"501\":[\"BZ\"],\"502\":[\"GT\"],\"503\":[\"SV\"],\"504\":[\"HN\"],\"505\":[\"NI\"],\"506\":[\"CR\"],\"507\":[\"PA\"],\"508\":[\"PM\"],\"509\":[\"HT\"],\"590\":[\"GP\",\"BL\",\"MF\"],\"591\":[\"BO\"],\"592\":[\"GY\"],\"593\":[\"EC\"],\"594\":[\"GF\"],\"595\":[\"PY\"],\"596\":[\"MQ\"],\"597\":[\"SR\"],\"598\":[\"UY\"],\"599\":[\"CW\",\"BQ\"],\"670\":[\"TL\"],\"672\":[\"NF\"],\"673\":[\"BN\"],\"674\":[\"NR\"],\"675\":[\"PG\"],\"676\":[\"TO\"],\"677\":[\"SB\"],\"678\":[\"VU\"],\"679\":[\"FJ\"],\"680\":[\"PW\"],\"681\":[\"WF\"],\"682\":[\"CK\"],\"683\":[\"NU\"],\"685\":[\"WS\"],\"686\":[\"KI\"],\"687\":[\"NC\"],\"688\":[\"TV\"],\"689\":[\"PF\"],\"690\":[\"TK\"],\"691\":[\"FM\"],\"692\":[\"MH\"],\"850\":[\"KP\"],\"852\":[\"HK\"],\"853\":[\"MO\"],\"855\":[\"KH\"],\"856\":[\"LA\"],\"880\":[\"BD\"],\"886\":[\"TW\"],\"960\":[\"MV\"],\"961\":[\"LB\"],\"962\":[\"JO\"],\"963\":[\"SY\"],\"964\":[\"IQ\"],\"965\":[\"KW\"],\"966\":[\"SA\"],\"967\":[\"YE\"],\"968\":[\"OM\"],\"970\":[\"PS\"],\"971\":[\"AE\"],\"972\":[\"IL\"],\"973\":[\"BH\"],\"974\":[\"QA\"],\"975\":[\"BT\"],\"976\":[\"MN\"],\"977\":[\"NP\"],\"992\":[\"TJ\"],\"993\":[\"TM\"],\"994\":[\"AZ\"],\"995\":[\"GE\"],\"996\":[\"KG\"],\"998\":[\"UZ\"]},\"countries\":{\"AC\":[\"247\",\"00\",\"(?:[01589]\\\\d|[46])\\\\d{4}\",[5,6],0,0,0,0,0,0,0,[0,[\"4\\\\d{4}\",[5]]]],\"AD\":[\"376\",\"00\",\"(?:1|6\\\\d)\\\\d{7}|[135-9]\\\\d{5}\",[6,8,9],[[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"[135-9]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"1\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6\"]]],0,0,0,0,0,0,[0,[\"690\\\\d{6}|[356]\\\\d{5}\",[6,9]]]],\"AE\":[\"971\",\"00\",\"(?:[4-7]\\\\d|9[0-689])\\\\d{7}|800\\\\d{2,9}|[2-4679]\\\\d{7}\",[5,6,7,8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{2,9})\",\"$1 $2\",[\"60|8\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[236]|[479][2-8]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{5})\",\"$1 $2 $3\",[\"[479]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"5\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"5[024-68]\\\\d{7}\",[9]]]],\"AF\":[\"93\",\"00\",\"[2-7]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-7]\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"7\\\\d{8}\"]]],\"AG\":[\"1\",\"011\",\"(?:268|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([457]\\\\d{6})$\",\"268$1\",0,\"268\",[[\"268(?:4(?:6[0-38]|84)|56[0-2])\\\\d{4}\"],[\"268(?:464|7(?:1[3-9]|2\\\\d|3[246]|64|[78][0-689]))\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"],0,0,[\"26840[69]\\\\d{4}\"],[\"26848[01]\\\\d{4}\"]]],\"AI\":[\"1\",\"011\",\"(?:264|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2457]\\\\d{6})$\",\"264$1\",0,\"264\",[[\"2644(?:6[12]|9[78])\\\\d{4}\"],[\"264(?:235|476|5(?:3[6-9]|8[1-4])|7(?:29|72))\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"AL\":[\"355\",\"00\",\"(?:700\\\\d\\\\d|900)\\\\d{3}|8\\\\d{5,7}|(?:[2-5]|6\\\\d)\\\\d{7}\",[6,7,8,9],[[\"(\\\\d{3})(\\\\d{3,4})\",\"$1 $2\",[\"80|9\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"4[2-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2358][2-5]|4\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[23578]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"6\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"6(?:[78][2-9]|9\\\\d)\\\\d{6}\",[9]]]],\"AM\":[\"374\",\"00\",\"(?:[1-489]\\\\d|55|60|77)\\\\d{6}\",[8],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]0\"],\"0 $1\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"2|3[12]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"1|47\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[3-9]\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"(?:33|4[1349]|55|77|88|9[13-9])\\\\d{6}\"]]],\"AO\":[\"244\",\"00\",\"[29]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[29]\"]]],0,0,0,0,0,0,[0,[\"9[1-49]\\\\d{7}\"]]],\"AR\":[\"54\",\"00\",\"11\\\\d{8}|(?:[2368]|9\\\\d)\\\\d{9}\",[10,11],[[\"(\\\\d{4})(\\\\d{2})(\\\\d{4})\",\"$1 $2-$3\",[\"2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9])\",\"2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8]))|2(?:2[24-9]|3[1-59]|47)\",\"2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5[56][46]|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]\",\"2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|58|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|54(?:4|5[13-7]|6[89])|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:454|85[56])[46]|3(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]\"],\"0$1\",1],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2-$3\",[\"1\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[68]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2-$3\",[\"[23]\"],\"0$1\",1],[\"(\\\\d)(\\\\d{4})(\\\\d{2})(\\\\d{4})\",\"$2 15-$3-$4\",[\"9(?:2[2-469]|3[3-578])\",\"9(?:2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9]))\",\"9(?:2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8])))|92(?:2[24-9]|3[1-59]|47)\",\"9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5(?:[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]\",\"9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|5(?:4(?:4|5[13-7]|6[89])|[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]\"],\"0$1\",0,\"$1 $2 $3-$4\"],[\"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$2 15-$3-$4\",[\"91\"],\"0$1\",0,\"$1 $2 $3-$4\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$2 15-$3-$4\",[\"9\"],\"0$1\",0,\"$1 $2 $3-$4\"]],\"0\",0,\"0?(?:(11|2(?:2(?:02?|[13]|2[13-79]|4[1-6]|5[2457]|6[124-8]|7[1-4]|8[13-6]|9[1267])|3(?:02?|1[467]|2[03-6]|3[13-8]|[49][2-6]|5[2-8]|[67])|4(?:7[3-578]|9)|6(?:[0136]|2[24-6]|4[6-8]?|5[15-8])|80|9(?:0[1-3]|[19]|2\\\\d|3[1-6]|4[02568]?|5[2-4]|6[2-46]|72?|8[23]?))|3(?:3(?:2[79]|6|8[2578])|4(?:0[0-24-9]|[12]|3[5-8]?|4[24-7]|5[4-68]?|6[02-9]|7[126]|8[2379]?|9[1-36-8])|5(?:1|2[1245]|3[237]?|4[1-46-9]|6[2-4]|7[1-6]|8[2-5]?)|6[24]|7(?:[069]|1[1568]|2[15]|3[145]|4[13]|5[14-8]|7[2-57]|8[126])|8(?:[01]|2[15-7]|3[2578]?|4[13-6]|5[4-8]?|6[1-357-9]|7[36-8]?|8[5-8]?|9[124])))15)?\",\"9$1\",0,0,[0,[\"9(?:2954|3(?:777|865))[2-8]\\\\d{5}|93(?:7(?:1[15]|81)|8(?:21|4[16]|69|9[12]))[46]\\\\d{5}|(?:675\\\\d|9(?:11[1-8]\\\\d|2(?:2(?:1[2-6]|3[3-6])|(?:3[06]|49)4|6(?:04|1[2-7]|4[4-6])|9(?:[17][4-6]|9[3-6]))|3(?:(?:36|64)4|4(?:1[2-7]|[235][4-6]|84)|5(?:1[2-8]|[38][4-6])|8(?:1[2-6]|[58][3-6]|7[24-6]))))\\\\d{6}|9(?:2(?:284|657|9(?:20|66))|3(?:4(?:8[27]|92)|755|878))[2-7]\\\\d{5}|9(?:2(?:[28]0|37|6[36]|9[48])|3(?:62|7[069]|8[03]))[45]\\\\d{6}|9(?:2(?:2(?:2[59]|44|52)|3(?:26|4[24])|473|9(?:[07]2|2[26]|34|46))|3327)[45]\\\\d{5}|9(?:2(?:(?:26|62)2|3(?:02|2[03])|477|9(?:42|83))|3(?:4(?:[47]6|62|89)|5(?:41|64)|873))[2-6]\\\\d{5}|92(?:2(?:21|4[23]|6[145]|7[1-4]|8[356]|9[267])|3(?:16|3[13-8]|43|5[346-8]|9[3-5])|475|6(?:2[46]|4[78]|5[1568])|9(?:03|2[1457-9]|3[1356]|4[08]|[56][23]|82))4\\\\d{5}|9(?:2(?:2(?:57|81)|3(?:24|46|92)|9(?:01|23|64))|3(?:329|4(?:42|71)|5(?:25|37|4[347]|71)|7(?:18|5[17])|888))[3-6]\\\\d{5}|9(?:2(?:2(?:02|2[3467]|4[156]|5[45]|6[6-8]|91)|3(?:1[47]|[24]5|5[25]|96)|47[48]|625|932)|3(?:38[2578]|4(?:0[0-24-9]|3[78]|4[457]|58|6[03-9]|72|83|9[136-8])|5(?:2[124]|[368][23]|4[2689]|7[2-6])|7(?:16|2[15]|3[145]|4[13]|5[468]|7[2-5]|8[26])|8(?:2[5-7]|3[278]|4[3-5]|5[78]|6[1-378]|[78]7|94)))[4-6]\\\\d{5}\"]]],\"AS\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|684|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([267]\\\\d{6})$\",\"684$1\",0,\"684\",[[\"6846(?:22|33|44|55|77|88|9[19])\\\\d{4}\"],[\"684(?:2(?:5[2468]|72)|7(?:3[13]|70))\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"AT\":[\"43\",\"00\",\"1\\\\d{3,12}|2\\\\d{6,12}|43(?:(?:0\\\\d|5[02-9])\\\\d{3,9}|2\\\\d{4,5}|[3467]\\\\d{4}|8\\\\d{4,6}|9\\\\d{4,7})|5\\\\d{4,12}|8\\\\d{7,12}|9\\\\d{8,12}|(?:[367]\\\\d|4[0-24-9])\\\\d{4,11}\",[4,5,6,7,8,9,10,11,12,13],[[\"(\\\\d)(\\\\d{3,12})\",\"$1 $2\",[\"1(?:11|[2-9])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})\",\"$1 $2\",[\"517\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,5})\",\"$1 $2\",[\"5[079]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,10})\",\"$1 $2\",[\"(?:31|4)6|51|6(?:5[0-3579]|[6-9])|7(?:20|32|8)|[89]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3,9})\",\"$1 $2\",[\"[2-467]|5[2-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"5\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4,7})\",\"$1 $2 $3\",[\"5\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"6(?:5[0-3579]|6[013-9]|[7-9]\\\\d)\\\\d{4,10}\",[7,8,9,10,11,12,13]]]],\"AU\":[\"61\",\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\",\"1(?:[0-79]\\\\d{7,8}|8[0-24-9]\\\\d{7})|(?:[2-478]\\\\d\\\\d|550)\\\\d{6}|1\\\\d{4,7}\",[5,6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{3,4})\",\"$1 $2\",[\"16\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,4})\",\"$1 $2 $3\",[\"16\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"14|[45]\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[2378]\"],\"(0$1)\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1(?:30|[89])\"]]],\"0\",0,\"0|(183[12])\",0,0,0,[[\"(?:[237]\\\\d{5}|8(?:51(?:0(?:0[03-9]|[1247]\\\\d|3[2-9]|5[0-8]|6[1-9]|8[0-6])|1(?:1[69]|[23]\\\\d|4[0-4]))|(?:[6-8]\\\\d{3}|9(?:[02-9]\\\\d\\\\d|1(?:[0-57-9]\\\\d|6[0135-9])))\\\\d))\\\\d{3}\",[9]],[\"483[0-3]\\\\d{5}|4(?:[0-3]\\\\d|4[047-9]|5[0-25-9]|6[06-9]|7[02-9]|8[0-2457-9]|9[0-27-9])\\\\d{6}\",[9]],[\"180(?:0\\\\d{3}|2)\\\\d{3}\",[7,10]],[\"190[0-26]\\\\d{6}\",[10]],0,0,0,[\"16\\\\d{3,7}\",[5,6,7,8,9]],[\"(?:14(?:5(?:1[0458]|[23][458])|71\\\\d)|550\\\\d\\\\d)\\\\d{4}\",[9]],[\"13(?:00\\\\d{3}|45[0-4])\\\\d{3}|13\\\\d{4}\",[6,8,10]]],\"0011\"],\"AW\":[\"297\",\"00\",\"(?:[25-79]\\\\d\\\\d|800)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[25-9]\"]]],0,0,0,0,0,0,[0,[\"(?:290|5[69]\\\\d|6(?:[03]0|22|4[0-2]|[69]\\\\d)|7(?:[34]\\\\d|7[07])|9(?:6[45]|9[4-8]))\\\\d{4}\"]]],\"AX\":[\"358\",\"00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))\",\"2\\\\d{4,9}|35\\\\d{4,5}|(?:60\\\\d\\\\d|800)\\\\d{4,6}|7\\\\d{5,11}|(?:[14]\\\\d|3[0-46-9]|50)\\\\d{4,8}\",[5,6,7,8,9,10,11,12],0,\"0\",0,0,0,0,\"18\",[[\"18[1-8]\\\\d{3,6}\",[6,7,8,9]],[\"(?:4[0-8]|50)\\\\d{4,8}\",[6,7,8,9,10]],[\"800\\\\d{4,6}\",[7,8,9]],[\"[67]00\\\\d{5,6}\",[8,9]],0,0,[\"20\\\\d{4,8}|60[12]\\\\d{5,6}|7(?:099\\\\d{4,5}|5[03-9]\\\\d{3,7})|20[2-59]\\\\d\\\\d|(?:606|7(?:0[78]|1|3\\\\d))\\\\d{7}|(?:10|29|3[09]|70[1-5]\\\\d)\\\\d{4,8}\"]],\"00\"],\"AZ\":[\"994\",\"00\",\"365\\\\d{6}|(?:[124579]\\\\d|60|88)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"90\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"1[28]|2|365|46\",\"1[28]|2|365|46\",\"1[28]|2|365(?:[0-46-9]|5[0-35-9])|46\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[13-9]\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"(?:36554|99[2-9]\\\\d\\\\d)\\\\d{4}|(?:[16]0|4[04]|5[015]|60|7[07])\\\\d{7}\"]]],\"BA\":[\"387\",\"00\",\"6\\\\d{8}|(?:[35689]\\\\d|49|70)\\\\d{6}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6[1-3]|[7-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2-$3\",[\"[3-5]|6[56]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"6\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"6040[0-4]\\\\d{4}|6(?:03|[1-356]|44|7\\\\d)\\\\d{6}\"]]],\"BB\":[\"1\",\"011\",\"(?:246|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-9]\\\\d{6})$\",\"246$1\",0,\"246\",[[\"246(?:2(?:2[78]|7[0-4])|4(?:1[024-6]|2\\\\d|3[2-9])|5(?:20|[34]\\\\d|54|7[1-3])|6(?:2\\\\d|38)|7[35]7|9(?:1[89]|63))\\\\d{4}\"],[\"246(?:2(?:[356]\\\\d|4[0-57-9]|8[0-79])|45\\\\d|69[5-7]|8(?:[2-5]\\\\d|83))\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"(?:246976|900[2-9]\\\\d\\\\d)\\\\d{4}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"],0,[\"246(?:292|367|4(?:1[7-9]|3[01]|44|67)|7(?:36|53))\\\\d{4}\"],0,[\"24631\\\\d{5}\"]]],\"BD\":[\"880\",\"00\",\"[13469]\\\\d{9}|8[0-79]\\\\d{7,8}|[2-7]\\\\d{8}|[2-9]\\\\d{7}|[3-689]\\\\d{6}|[57-9]\\\\d{5}\",[6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{4,6})\",\"$1-$2\",[\"31[5-7]|[459]1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,7})\",\"$1-$2\",[\"3(?:[67]|8[013-9])|4(?:6[168]|7|[89][18])|5(?:6[128]|9)|6(?:28|4[14]|5)|7[2-589]|8(?:0[014-9]|[12])|9[358]|(?:3[2-5]|4[235]|5[2-578]|6[0389]|76|8[3-7]|9[24])1|(?:44|66)[01346-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3,6})\",\"$1-$2\",[\"[13-9]\"],\"0$1\"],[\"(\\\\d)(\\\\d{7,8})\",\"$1-$2\",[\"2\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"(?:1[13-9]\\\\d|644)\\\\d{7}|(?:3[78]|44|66)[02-9]\\\\d{7}\",[10]]]],\"BE\":[\"32\",\"00\",\"4\\\\d{8}|[1-9]\\\\d{7}\",[8,9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"(?:80|9)0\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[239]|4[23]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[15-8]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"4\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"4[5-9]\\\\d{7}\",[9]]]],\"BF\":[\"226\",\"00\",\"[025-7]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[025-7]\"]]],0,0,0,0,0,0,[0,[\"(?:0[127]|5[1-8]|[67]\\\\d)\\\\d{6}\"]]],\"BG\":[\"359\",\"00\",\"[2-7]\\\\d{6,7}|[89]\\\\d{6,8}|2\\\\d{5}\",[6,7,8,9],[[\"(\\\\d)(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"43[1-6]|70[1-9]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\",\"$1 $2 $3\",[\"[356]|4[124-7]|7[1-9]|8[1-6]|9[1-7]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"(?:70|8)0\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3\",[\"43[1-7]|7\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[48]|9[08]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"43[07-9]\\\\d{5}|(?:48|8[7-9]\\\\d|9(?:8\\\\d|9[69]))\\\\d{6}\",[8,9]]]],\"BH\":[\"973\",\"00\",\"[136-9]\\\\d{7}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[13679]|8[047]\"]]],0,0,0,0,0,0,[0,[\"(?:3(?:[1-79]\\\\d|8[0-47-9])\\\\d|6(?:3(?:00|33|6[16])|6(?:3[03-9]|[69]\\\\d|7[0-6])))\\\\d{4}\"]]],\"BI\":[\"257\",\"00\",\"(?:[267]\\\\d|31)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2367]\"]]],0,0,0,0,0,0,[0,[\"(?:29|31|6[1289]|7[125-9])\\\\d{6}\"]]],\"BJ\":[\"229\",\"00\",\"(?:[2689]\\\\d|51)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[25689]\"]]],0,0,0,0,0,0,[0,[\"(?:51|6\\\\d|9[013-9])\\\\d{6}\"]]],\"BL\":[\"590\",\"00\",\"(?:590|69\\\\d|976)\\\\d{6}\",[9],0,\"0\",0,0,0,0,0,[[\"590(?:2[7-9]|5[12]|87)\\\\d{4}\"],[\"69(?:0\\\\d\\\\d|1(?:2[29]|3[0-5]))\\\\d{4}\"],0,0,0,0,0,0,[\"976[01]\\\\d{5}\"]]],\"BM\":[\"1\",\"011\",\"(?:441|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-8]\\\\d{6})$\",\"441$1\",0,\"441\",[[\"441(?:2(?:02|23|[3479]\\\\d|61)|[46]\\\\d\\\\d|5(?:4\\\\d|60|89)|824)\\\\d{4}\"],[\"441(?:[37]\\\\d|5[0-39])\\\\d{5}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"BN\":[\"673\",\"00\",\"[2-578]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-578]\"]]],0,0,0,0,0,0,[0,[\"(?:22[89]|[78]\\\\d\\\\d)\\\\d{4}\"]]],\"BO\":[\"591\",\"00(?:1\\\\d)?\",\"(?:[2-467]\\\\d\\\\d|8001)\\\\d{5}\",[8,9],[[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"[23]|4[46]\"]],[\"(\\\\d{8})\",\"$1\",[\"[67]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]]],\"0\",0,\"0(1\\\\d)?\",0,0,0,[0,[\"[67]\\\\d{7}\",[8]]]],\"BQ\":[\"599\",\"00\",\"(?:[34]1|7\\\\d)\\\\d{5}\",[7],0,0,0,0,0,0,\"[347]\",[[\"(?:318[023]|41(?:6[023]|70)|7(?:1[578]|2[05]|50)\\\\d)\\\\d{3}\"],[\"(?:31(?:8[14-8]|9[14578])|416[14-9]|7(?:0[01]|7[07]|8\\\\d|9[056])\\\\d)\\\\d{3}\"]]],\"BR\":[\"55\",\"00(?:1[245]|2[1-35]|31|4[13]|[56]5|99)\",\"(?:[1-46-9]\\\\d\\\\d|5(?:[0-46-9]\\\\d|5[0-24679]))\\\\d{8}|[1-9]\\\\d{9}|[3589]\\\\d{8}|[34]\\\\d{7}\",[8,9,10,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"300|4(?:0[02]|37)\",\"4(?:02|37)0|[34]00\"]],[\"(\\\\d{3})(\\\\d{2,3})(\\\\d{4})\",\"$1 $2 $3\",[\"(?:[358]|90)0\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2-$3\",[\"(?:[14689][1-9]|2[12478]|3[1-578]|5[13-5]|7[13-579])[2-57]\"],\"($1)\"],[\"(\\\\d{2})(\\\\d{5})(\\\\d{4})\",\"$1 $2-$3\",[\"[16][1-9]|[2-57-9]\"],\"($1)\"]],\"0\",0,\"0(?:(1[245]|2[1-35]|31|4[13]|[56]5|99)(\\\\d{10,11}))?\",\"$2\",0,0,[0,[\"(?:[14689][1-9]|2[12478]|3[1-578]|5[13-5]|7[13-579])(?:7|9\\\\d)\\\\d{7}\",[10,11]]]],\"BS\":[\"1\",\"011\",\"(?:242|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([3-8]\\\\d{6})$\",\"242$1\",0,\"242\",[[\"242(?:3(?:02|[236][1-9]|4[0-24-9]|5[0-68]|7[347]|8[0-4]|9[2-467])|461|502|6(?:0[1-4]|12|2[013]|[45]0|7[67]|8[78]|9[89])|7(?:02|88))\\\\d{4}\"],[\"242(?:3(?:5[79]|7[56]|95)|4(?:[23][1-9]|4[1-35-9]|5[1-8]|6[2-8]|7\\\\d|81)|5(?:2[45]|3[35]|44|5[1-46-9]|65|77)|6[34]6|7(?:27|38)|8(?:0[1-9]|1[02-9]|2\\\\d|[89]9))\\\\d{4}\"],[\"242300\\\\d{4}|8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"],0,[\"242225[0-46-9]\\\\d{3}\"]]],\"BT\":[\"975\",\"00\",\"[17]\\\\d{7}|[2-8]\\\\d{6}\",[7,8],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-68]|7[246]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"1[67]|7\"]]],0,0,0,0,0,0,[0,[\"(?:1[67]|77)\\\\d{6}\",[8]]]],\"BW\":[\"267\",\"00\",\"90\\\\d{5}|(?:[2-6]|7\\\\d)\\\\d{6}\",[7,8],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"90\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-6]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"7\"]]],0,0,0,0,0,0,[0,[\"77200\\\\d{3}|7(?:[1-6]\\\\d|7[014-9])\\\\d{5}\",[8]]]],\"BY\":[\"375\",\"810\",\"(?:[12]\\\\d|33|44|902)\\\\d{7}|8(?:0[0-79]\\\\d{5,7}|[1-7]\\\\d{9})|8(?:1[0-489]|[5-79]\\\\d)\\\\d{7}|8[1-79]\\\\d{6,7}|8[0-79]\\\\d{5}|8\\\\d{5}\",[6,7,8,9,10,11],[[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"800\"],\"8 $1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,4})\",\"$1 $2 $3\",[\"800\"],\"8 $1\"],[\"(\\\\d{4})(\\\\d{2})(\\\\d{3})\",\"$1 $2-$3\",[\"1(?:5[169]|6[3-5]|7[179])|2(?:1[35]|2[34]|3[3-5])\",\"1(?:5[169]|6(?:3[1-3]|4|5[125])|7(?:1[3-9]|7[0-24-6]|9[2-7]))|2(?:1[35]|2[34]|3[3-5])\"],\"8 0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"1(?:[56]|7[467])|2[1-3]\"],\"8 0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"[1-4]\"],\"8 0$1\"],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"8 $1\"]],\"8\",0,\"0|80?\",0,0,0,[0,[\"(?:2(?:5[5-79]|9[1-9])|(?:33|44)\\\\d)\\\\d{6}\",[9]]],\"8~10\"],\"BZ\":[\"501\",\"00\",\"(?:0800\\\\d|[2-8])\\\\d{6}\",[7,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[2-8]\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})(\\\\d{3})\",\"$1-$2-$3-$4\",[\"0\"]]],0,0,0,0,0,0,[0,[\"6[0-35-7]\\\\d{5}\",[7]]]],\"CA\":[\"1\",\"011\",\"(?:[2-8]\\\\d|90)\\\\d{8}\",[10],0,\"1\",0,0,0,0,0,[[\"(?:2(?:04|[23]6|[48]9|50)|3(?:06|43|6[57])|4(?:03|1[68]|3[178]|50)|5(?:06|1[49]|48|79|8[17])|6(?:04|13|39|47|72)|7(?:0[59]|78|8[02])|8(?:[06]7|19|25|73)|90[25])[2-9]\\\\d{6}\"],[\"(?:2(?:04|[23]6|[48]9|50)|3(?:06|43|6[57])|4(?:03|1[68]|3[178]|50)|5(?:06|1[49]|48|79|8[17])|6(?:04|13|39|47|72)|7(?:0[59]|78|8[02])|8(?:[06]7|19|25|73)|90[25])[2-9]\\\\d{6}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"(?:5(?:00|2[12]|33|44|66|77|88)|622)[2-9]\\\\d{6}\"],0,0,0,[\"600[2-9]\\\\d{6}\"]]],\"CC\":[\"61\",\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\",\"1(?:[0-79]\\\\d|8[0-24-9])\\\\d{7}|(?:[148]\\\\d\\\\d|550)\\\\d{6}|1\\\\d{5,7}\",[6,7,8,9,10],0,\"0\",0,\"0|([59]\\\\d{7})$\",\"8$1\",0,0,[[\"8(?:51(?:0(?:02|31|60)|118)|91(?:0(?:1[0-2]|29)|1(?:[28]2|50|79)|2(?:10|64)|3(?:[06]8|22)|4[29]8|62\\\\d|70[23]|959))\\\\d{3}\",[9]],[\"483[0-3]\\\\d{5}|4(?:[0-3]\\\\d|4[047-9]|5[0-25-9]|6[06-9]|7[02-9]|8[0-2457-9]|9[0-27-9])\\\\d{6}\",[9]],[\"180(?:0\\\\d{3}|2)\\\\d{3}\",[7,10]],[\"190[0-26]\\\\d{6}\",[10]],0,0,0,0,[\"(?:14(?:5(?:1[0458]|[23][458])|71\\\\d)|550\\\\d\\\\d)\\\\d{4}\",[9]],[\"13(?:00\\\\d{3}|45[0-4])\\\\d{3}|13\\\\d{4}\",[6,8,10]]],\"0011\"],\"CD\":[\"243\",\"00\",\"[189]\\\\d{8}|[1-68]\\\\d{6}\",[7,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"88\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"[1-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"88\\\\d{5}|(?:8[0-2459]|9[017-9])\\\\d{7}\"]]],\"CF\":[\"236\",\"00\",\"(?:[27]\\\\d{3}|8776)\\\\d{4}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[278]\"]]],0,0,0,0,0,0,[0,[\"7[0257]\\\\d{6}\"]]],\"CG\":[\"242\",\"00\",\"222\\\\d{6}|(?:0\\\\d|80)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"801\"]],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[02]\"]]],0,0,0,0,0,0,[0,[\"0[14-6]\\\\d{7}\"]]],\"CH\":[\"41\",\"00\",\"8\\\\d{11}|[2-9]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8[047]|90\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-79]|81\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"8\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"7[35-9]\\\\d{7}\"]]],\"CI\":[\"225\",\"00\",\"[02-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[02-9]\"]]],0,0,0,0,0,0,[0,[\"(?:2[0-3]80|97[0-3]\\\\d)\\\\d{4}|(?:0[1-9]|[457]\\\\d|6[014-9]|8[4-9]|95)\\\\d{6}\"]]],\"CK\":[\"682\",\"00\",\"[2-578]\\\\d{4}\",[5],[[\"(\\\\d{2})(\\\\d{3})\",\"$1 $2\",[\"[2-578]\"]]],0,0,0,0,0,0,[0,[\"[578]\\\\d{4}\"]]],\"CL\":[\"56\",\"(?:0|1(?:1[0-69]|2[0-57]|5[13-58]|69|7[0167]|8[018]))0\",\"12300\\\\d{6}|6\\\\d{9,10}|[2-9]\\\\d{8}\",[9,10,11],[[\"(\\\\d{5})(\\\\d{4})\",\"$1 $2\",[\"21\"],\"($1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"44\"]],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2[23]\"],\"($1)\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"9[2-9]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"3[2-5]|[47]|5[1-3578]|6[13-57]|8(?:0[1-9]|[1-9])\"],\"($1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"60|8\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"60\"]]],0,0,0,0,0,0,[0,[\"(?:2(?:1962|3(?:2\\\\d\\\\d|3(?:00|23)))|80[1-9]\\\\d\\\\d)\\\\d{4}|(?:22|3[2-5]|[47][1-35]|5[1-3578]|6[13-57]|8[1-9]|9[2-9])\\\\d{7}\",[9]]]],\"CM\":[\"237\",\"00\",\"(?:[26]\\\\d\\\\d|88)\\\\d{6}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"88\"]],[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"[26]\"]]],0,0,0,0,0,0,[0,[\"(?:24[23]|6[5-9]\\\\d)\\\\d{6}\",[9]]]],\"CN\":[\"86\",\"00|1(?:[12]\\\\d|79|9[0235-7])\\\\d\\\\d00\",\"1[1279]\\\\d{8,9}|2\\\\d{9}(?:\\\\d{2})?|[12]\\\\d{6,7}|86\\\\d{6}|(?:1[03-68]\\\\d|6)\\\\d{7,9}|(?:[3-579]\\\\d|8[0-57-9])\\\\d{6,9}\",[7,8,9,10,11,12],[[\"(\\\\d{2})(\\\\d{5,6})\",\"$1 $2\",[\"(?:10|2[0-57-9])[19]\",\"(?:10|2[0-57-9])(?:10|9[56])\",\"(?:10|2[0-57-9])(?:100|9[56])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"3(?:[157]|35|49|9[1-68])|4(?:[17]|2[179]|6[47-9]|8[23])|5(?:[1357]|2[37]|4[36]|6[1-46]|80)|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]|4[13]|5[1-5])|(?:4[35]|59|85)[1-9]\",\"(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[1-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))[19]\",\"85[23](?:10|95)|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))(?:10|9[56])\",\"85[23](?:100|95)|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))(?:100|9[56])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"(?:4|80)0\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"10|2(?:[02-57-9]|1[1-9])\",\"10|2(?:[02-57-9]|1[1-9])\",\"10[0-79]|2(?:[02-57-9]|1[1-79])|(?:10|21)8(?:0[1-9]|[1-9])\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"3(?:[3-59]|7[02-68])|4(?:[26-8]|3[3-9]|5[2-9])|5(?:3[03-9]|[468]|7[028]|9[2-46-9])|6|7(?:[0-247]|3[04-9]|5[0-4689]|6[2368])|8(?:[1-358]|9[1-7])|9(?:[013479]|5[1-5])|(?:[34]1|55|79|87)[02-9]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{7,8})\",\"$1 $2\",[\"9\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"80\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[3-578]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"1[3-9]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"[12]\"],\"0$1\",1]],\"0\",0,\"0|(1(?:[12]\\\\d|79|9[0235-7])\\\\d\\\\d)\",0,0,0,[0,[\"1740[0-5]\\\\d{6}|1(?:[38]\\\\d|4[57]|5[0-35-9]|6[25-7]|7[0-35-8]|9[189])\\\\d{8}\",[11]]],\"00\"],\"CO\":[\"57\",\"00(?:4(?:[14]4|56)|[579])\",\"(?:1\\\\d|3)\\\\d{9}|[124-8]\\\\d{7}\",[8,10,11],[[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"[14][2-9]|[25-8]\"],\"($1)\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"3\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{7})\",\"$1-$2-$3\",[\"1\"],\"0$1\",0,\"$1 $2 $3\"]],\"0\",0,\"0([3579]|4(?:[14]4|56))?\",0,0,0,[0,[\"3333(?:0(?:0\\\\d|1[0-5])|[4-9]\\\\d\\\\d)\\\\d{3}|33(?:00|3[0-24-9])\\\\d{6}|3(?:0[0-5]|1\\\\d|2[0-3]|5[01]|70)\\\\d{7}\",[10]]]],\"CR\":[\"506\",\"00\",\"(?:8\\\\d|90)\\\\d{8}|(?:[24-8]\\\\d{3}|3005)\\\\d{4}\",[8,10],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-7]|8[3-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[89]\"]]],0,0,\"(19(?:0[0-2468]|1[09]|20|66|77|99))\",0,0,0,[0,[\"(?:3005\\\\d|6500[01])\\\\d{3}|(?:5[07]|6[0-4]|7[0-3]|8[3-9])\\\\d{6}\",[8]]]],\"CU\":[\"53\",\"119\",\"[27]\\\\d{6,7}|[34]\\\\d{5,7}|(?:5|8\\\\d\\\\d)\\\\d{7}\",[6,7,8,10],[[\"(\\\\d{2})(\\\\d{4,6})\",\"$1 $2\",[\"2[1-4]|[34]\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{6,7})\",\"$1 $2\",[\"7\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"5\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"8\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"5\\\\d{7}\",[8]]]],\"CV\":[\"238\",\"0\",\"(?:[2-59]\\\\d\\\\d|800)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[2-589]\"]]],0,0,0,0,0,0,[0,[\"(?:[34][36]|5[1-389]|9\\\\d)\\\\d{5}\"]]],\"CW\":[\"599\",\"00\",\"(?:[34]1|60|(?:7|9\\\\d)\\\\d)\\\\d{5}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[3467]\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"9[4-8]\"]]],0,0,0,0,0,\"[69]\",[[\"9(?:4(?:3[0-5]|4[14]|6\\\\d)|50\\\\d|7(?:2[014]|3[02-9]|4[4-9]|6[357]|77|8[7-9])|8(?:3[39]|[46]\\\\d|7[01]|8[57-9]))\\\\d{4}\"],[\"953[01]\\\\d{4}|9(?:5[12467]|6[5-9])\\\\d{5}\"],0,0,0,0,0,[\"955\\\\d{5}\",[8]],0,[\"60[0-2]\\\\d{4}\",[7]]]],\"CX\":[\"61\",\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\",\"1(?:[0-79]\\\\d|8[0-24-9])\\\\d{7}|(?:[148]\\\\d\\\\d|550)\\\\d{6}|1\\\\d{5,7}\",[6,7,8,9,10],0,\"0\",0,\"0|([59]\\\\d{7})$\",\"8$1\",0,0,[[\"8(?:51(?:0(?:01|30|59)|117)|91(?:00[6-9]|1(?:[28]1|49|78)|2(?:09|63)|3(?:12|26|75)|4(?:56|97)|64\\\\d|7(?:0[01]|1[0-2])|958))\\\\d{3}\",[9]],[\"483[0-3]\\\\d{5}|4(?:[0-3]\\\\d|4[047-9]|5[0-25-9]|6[06-9]|7[02-9]|8[0-2457-9]|9[0-27-9])\\\\d{6}\",[9]],[\"180(?:0\\\\d{3}|2)\\\\d{3}\",[7,10]],[\"190[0-26]\\\\d{6}\",[10]],0,0,0,0,[\"(?:14(?:5(?:1[0458]|[23][458])|71\\\\d)|550\\\\d\\\\d)\\\\d{4}\",[9]],[\"13(?:00\\\\d{3}|45[0-4])\\\\d{3}|13\\\\d{4}\",[6,8,10]]],\"0011\"],\"CY\":[\"357\",\"00\",\"(?:[279]\\\\d|[58]0)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[257-9]\"]]],0,0,0,0,0,0,[0,[\"9[4-79]\\\\d{6}\"]]],\"CZ\":[\"420\",\"00\",\"(?:[2-578]\\\\d|60)\\\\d{7}|9\\\\d{8,11}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-8]|9[015-7]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"9\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"9\"]]],0,0,0,0,0,0,[0,[\"(?:60[1-8]|7(?:0[2-5]|[2379]\\\\d))\\\\d{6}\"]]],\"DE\":[\"49\",\"00\",\"[2579]\\\\d{5,14}|49(?:[05]\\\\d{10}|[46][1-8]\\\\d{4,9})|49(?:[0-25]\\\\d|3[1-689]|7[1-7])\\\\d{4,8}|49(?:[0-2579]\\\\d|[34][1-9]|6[0-8])\\\\d{3}|49\\\\d{3,4}|(?:1|[368]\\\\d|4[0-8])\\\\d{3,13}\",[4,5,6,7,8,9,10,11,12,13,14,15],[[\"(\\\\d{2})(\\\\d{3,13})\",\"$1 $2\",[\"3[02]|40|[68]9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,12})\",\"$1 $2\",[\"2(?:0[1-389]|1[124]|2[18]|3[14])|3(?:[35-9][15]|4[015])|906|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1\",\"2(?:0[1-389]|12[0-8])|3(?:[35-9][15]|4[015])|906|2(?:[13][14]|2[18])|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{2,11})\",\"$1 $2\",[\"[24-6]|3(?:[3569][02-46-9]|4[2-4679]|7[2-467]|8[2-46-8])|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]\",\"[24-6]|3(?:3(?:0[1-467]|2[127-9]|3[124578]|7[1257-9]|8[1256]|9[145])|4(?:2[135]|4[13578]|9[1346])|5(?:0[14]|2[1-3589]|6[1-4]|7[13468]|8[13568])|6(?:2[1-489]|3[124-6]|6[13]|7[12579]|8[1-356]|9[135])|7(?:2[1-7]|4[145]|6[1-5]|7[1-4])|8(?:21|3[1468]|6|7[1467]|8[136])|9(?:0[12479]|2[1358]|4[134679]|6[1-9]|7[136]|8[147]|9[1468]))|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]|3[68]4[1347]|3(?:47|60)[1356]|3(?:3[46]|46|5[49])[1246]|3[4579]3[1357]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"138\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{2,10})\",\"$1 $2\",[\"3\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5,11})\",\"$1 $2\",[\"181\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{4,10})\",\"$1 $2 $3\",[\"1(?:3|80)|9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7,8})\",\"$1 $2\",[\"1[67]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7,12})\",\"$1 $2\",[\"8\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{6})\",\"$1 $2\",[\"185\",\"1850\",\"18500\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{7})\",\"$1 $2\",[\"18[68]\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{6})\",\"$1 $2\",[\"15[0568]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{7})\",\"$1 $2\",[\"15[1279]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{8})\",\"$1 $2\",[\"18\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{7,8})\",\"$1 $2 $3\",[\"1(?:6[023]|7)\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{2})(\\\\d{7})\",\"$1 $2 $3\",[\"15[279]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{8})\",\"$1 $2 $3\",[\"15\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"15[0-25-9]\\\\d{8}|1(?:6[023]|7\\\\d)\\\\d{7,8}\",[10,11]]]],\"DJ\":[\"253\",\"00\",\"(?:2\\\\d|77)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[27]\"]]],0,0,0,0,0,0,[0,[\"77\\\\d{6}\"]]],\"DK\":[\"45\",\"00\",\"[2-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-9]\"]]],0,0,0,0,0,0,[0,[\"(?:[2-7]\\\\d|8[126-9]|9[1-46-9])\\\\d{6}\"]]],\"DM\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|767|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-7]\\\\d{6})$\",\"767$1\",0,\"767\",[[\"767(?:2(?:55|66)|4(?:2[01]|4[0-25-9])|50[0-4]|70[1-3])\\\\d{4}\"],[\"767(?:2(?:[2-4689]5|7[5-7])|31[5-7]|61[1-7])\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"DO\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,0,0,0,\"8[024]9\",[[\"8(?:[04]9[2-9]\\\\d\\\\d|29(?:2(?:[0-59]\\\\d|6[04-9]|7[0-27]|8[0237-9])|3(?:[0-35-9]\\\\d|4[7-9])|[45]\\\\d\\\\d|6(?:[0-27-9]\\\\d|[3-5][1-9]|6[0135-8])|7(?:0[013-9]|[1-37]\\\\d|4[1-35689]|5[1-4689]|6[1-57-9]|8[1-79]|9[1-8])|8(?:0[146-9]|1[0-48]|[248]\\\\d|3[1-79]|5[01589]|6[013-68]|7[124-8]|9[0-8])|9(?:[0-24]\\\\d|3[02-46-9]|5[0-79]|60|7[0169]|8[57-9]|9[02-9])))\\\\d{4}\"],[\"8[024]9[2-9]\\\\d{6}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"DZ\":[\"213\",\"00\",\"(?:[1-4]|[5-79]\\\\d|80)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[1-4]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-8]\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"(?:5(?:4[0-29]|5\\\\d|6[01])|6(?:[569]\\\\d|7[0-6])|7[7-9]\\\\d)\\\\d{6}\",[9]]]],\"EC\":[\"593\",\"00\",\"1\\\\d{9,10}|(?:[2-7]|9\\\\d)\\\\d{7}\",[8,9,10,11],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2-$3\",[\"[2-7]\"],\"(0$1)\",0,\"$1-$2-$3\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"1\"]]],\"0\",0,0,0,0,0,[0,[\"964[0-2]\\\\d{5}|9(?:39|[57][89]|6[0-36-9]|[89]\\\\d)\\\\d{6}\",[9]]]],\"EE\":[\"372\",\"00\",\"8\\\\d{9}|[4578]\\\\d{7}|(?:[3-8]\\\\d|90)\\\\d{5}\",[7,8,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[369]|4[3-8]|5(?:[0-2]|5[0-478]|6[45])|7[1-9]|88\",\"[369]|4[3-8]|5(?:[02]|1(?:[0-8]|95)|5[0-478]|6(?:4[0-4]|5[1-589]))|7[1-9]|88\"]],[\"(\\\\d{4})(\\\\d{3,4})\",\"$1 $2\",[\"[45]|8(?:00|[1-49])\",\"[45]|8(?:00[1-9]|[1-49])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]]],0,0,0,0,0,0,[0,[\"5(?:[0-35-9]\\\\d{6}|4(?:[0-57-9]\\\\d{5}|6(?:[0-24-9]\\\\d{4}|3(?:[0-35-9]\\\\d{3}|4000))))|8(?:1(?:0(?:000|[3-9]\\\\d\\\\d)|(?:1(?:0[236]|1\\\\d)|(?:23|[3-79]\\\\d)\\\\d)\\\\d)|2(?:0(?:000|(?:19|[24-7]\\\\d)\\\\d)|(?:(?:[124-6]\\\\d|3[5-9]|8[2-4])\\\\d|7(?:[679]\\\\d|8[13-9]))\\\\d)|[349]\\\\d{4})\\\\d\\\\d|5(?:(?:[02]\\\\d|5[0-478])\\\\d|1(?:[0-8]\\\\d|95)|6(?:4[0-4]|5[1-589]))\\\\d{3}\",[7,8]]]],\"EG\":[\"20\",\"00\",\"[189]\\\\d{8,9}|[24-6]\\\\d{8}|[135]\\\\d{7}\",[8,9,10],[[\"(\\\\d)(\\\\d{7,8})\",\"$1 $2\",[\"[23]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{6,7})\",\"$1 $2\",[\"1[35]|[4-6]|8[2468]|9[235-7]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[189]\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"1[0-25]\\\\d{8}\",[10]]]],\"EH\":[\"212\",\"00\",\"[5-8]\\\\d{8}\",[9],0,\"0\",0,0,0,0,\"528[89]\",[[\"528[89]\\\\d{5}\"],[\"(?:6(?:[0-79]\\\\d|8[0-247-9])|7(?:0[016-8]|6[1267]|7[0-27]))\\\\d{6}\"],[\"80\\\\d{7}\"],[\"89\\\\d{7}\"],0,0,0,0,[\"592(?:4[0-2]|93)\\\\d{4}\"]]],\"ER\":[\"291\",\"00\",\"[178]\\\\d{6}\",[7],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[178]\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"(?:17[1-3]|7\\\\d\\\\d)\\\\d{4}\"]]],\"ES\":[\"34\",\"00\",\"(?:51|[6-9]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]00\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-9]\"]]],0,0,0,0,0,0,[0,[\"9(?:6906(?:09|10)|7390\\\\d\\\\d)\\\\d\\\\d|(?:6\\\\d|7[1-48])\\\\d{7}\"]]],\"ET\":[\"251\",\"00\",\"(?:11|[2-59]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-59]\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"9\\\\d{8}\"]]],\"FI\":[\"358\",\"00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))\",\"[1-35689]\\\\d{4}|7\\\\d{10,11}|(?:[124-7]\\\\d|3[0-46-9])\\\\d{8}|[1-9]\\\\d{5,8}\",[5,6,7,8,9,10,11,12],[[\"(\\\\d)(\\\\d{4,9})\",\"$1 $2\",[\"[2568][1-8]|3(?:0[1-9]|[1-9])|9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,7})\",\"$1 $2\",[\"[12]00|[368]|70[07-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4,8})\",\"$1 $2\",[\"[1245]|7[135]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{6,10})\",\"$1 $2\",[\"7\"],\"0$1\"]],\"0\",0,0,0,0,\"1[03-79]|[2-9]\",[[\"(?:1[3-79][1-8]|[235689][1-8]\\\\d)\\\\d{2,6}\",[5,6,7,8,9]],[\"(?:4[0-8]|50)\\\\d{4,8}\",[6,7,8,9,10]],[\"800\\\\d{4,6}\",[7,8,9]],[\"[67]00\\\\d{5,6}\",[8,9]],0,0,[\"20\\\\d{4,8}|60[12]\\\\d{5,6}|7(?:099\\\\d{4,5}|5[03-9]\\\\d{3,7})|20[2-59]\\\\d\\\\d|(?:606|7(?:0[78]|1|3\\\\d))\\\\d{7}|(?:10|29|3[09]|70[1-5]\\\\d)\\\\d{4,8}\"]],\"00\"],\"FJ\":[\"679\",\"0(?:0|52)\",\"45\\\\d{5}|(?:0800\\\\d|[235-9])\\\\d{6}\",[7,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[235-9]|45\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"0\"]]],0,0,0,0,0,0,[0,[\"(?:[279]\\\\d|45|5[01568]|8[034679])\\\\d{5}\",[7]]],\"00\"],\"FK\":[\"500\",\"00\",\"[2-7]\\\\d{4}\",[5],0,0,0,0,0,0,0,[0,[\"[56]\\\\d{4}\"]]],\"FM\":[\"691\",\"00\",\"(?:[39]\\\\d\\\\d|820)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[389]\"]]],0,0,0,0,0,0,[0,[\"31(?:00[67]|208|309)\\\\d\\\\d|(?:3(?:[2357]0[1-9]|602|804|905)|(?:820|9[2-7]\\\\d)\\\\d)\\\\d{3}\"]]],\"FO\":[\"298\",\"00\",\"(?:[2-8]\\\\d|90)\\\\d{4}\",[6],[[\"(\\\\d{6})\",\"$1\",[\"[2-9]\"]]],0,0,\"(10(?:01|[12]0|88))\",0,0,0,[0,[\"(?:[27][1-9]|5\\\\d)\\\\d{4}\"]]],\"FR\":[\"33\",\"00\",\"[1-9]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0 $1\"],[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"[1-79]\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"700\\\\d{6}|(?:6\\\\d|7[3-9])\\\\d{7}\"]]],\"GA\":[\"241\",\"00\",\"(?:[067]\\\\d|11)\\\\d{6}|[2-7]\\\\d{6}\",[7,8],[[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-7]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"11|[67]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"0\"]]],0,0,\"0(11\\\\d{6}|6[256]\\\\d{6}|7[47]\\\\d{6})\",\"$1\",0,0,[0,[\"(?:0[2-7]|6[256]|7[47])\\\\d{6}|[2-7]\\\\d{6}\"]]],\"GB\":[\"44\",\"00\",\"[1-357-9]\\\\d{9}|[18]\\\\d{8}|8\\\\d{6}\",[7,9,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"800\",\"8001\",\"80011\",\"800111\",\"8001111\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"845\",\"8454\",\"84546\",\"845464\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"800\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{4,5})\",\"$1 $2\",[\"1(?:38|5[23]|69|76|94)\",\"1(?:(?:38|69)7|5(?:24|39)|768|946)\",\"1(?:3873|5(?:242|39[4-6])|(?:697|768)[347]|9467)\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5,6})\",\"$1 $2\",[\"1(?:[2-69][02-9]|[78])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[25]|7(?:0|6[02-9])\",\"[25]|7(?:0|6(?:[03-9]|2[356]))\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"7\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1389]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:1(?:(?:1(?:3[0-58]|4[0-5]|5[0-26-9]|6[0-4]|[78][0-49])|3(?:0\\\\d|1[0-8]|[25][02-9]|3[02-579]|[468][0-46-9]|7[1-35-79]|9[2-578])|4(?:0[03-9]|[137]\\\\d|[28][02-57-9]|4[02-69]|5[0-8]|[69][0-79])|5(?:0[1-35-9]|[16]\\\\d|2[024-9]|3[015689]|4[02-9]|5[03-9]|7[0-35-9]|8[0-468]|9[0-57-9])|6(?:0[034689]|1\\\\d|2[0-35689]|[38][013-9]|4[1-467]|5[0-69]|6[13-9]|7[0-8]|9[0-24578])|7(?:0[0246-9]|2\\\\d|3[0236-8]|4[03-9]|5[0-46-9]|6[013-9]|7[0-35-9]|8[024-9]|9[02-9])|8(?:0[35-9]|2[1-57-9]|3[02-578]|4[0-578]|5[124-9]|6[2-69]|7\\\\d|8[02-9]|9[02569])|9(?:0[02-589]|[18]\\\\d|2[02-689]|3[1-57-9]|4[2-9]|5[0-579]|6[2-47-9]|7[0-24578]|9[2-57]))\\\\d\\\\d|2(?:(?:0[024-9]|2[3-9]|3[3-79]|4[1-689]|[58][02-9]|6[0-47-9]|7[013-9]|9\\\\d)\\\\d\\\\d|1(?:[0-7]\\\\d\\\\d|80[04589])))|2(?:0[013478]|3[0189]|4[017]|8[0-46-9]|9[0-2])\\\\d{3})\\\\d{4}|1(?:2(?:0(?:46[1-4]|87[2-9])|545[1-79]|76(?:2\\\\d|3[1-8]|6[1-6])|9(?:7(?:2[0-4]|3[2-5])|8(?:2[2-8]|7[0-47-9]|8[3-5])))|3(?:6(?:38[2-5]|47[23])|8(?:47[04-9]|64[0157-9]))|4(?:044[1-7]|20(?:2[23]|8\\\\d)|6(?:0(?:30|5[2-57]|6[1-8]|7[2-8])|140)|8(?:052|87[1-3]))|5(?:2(?:4(?:3[2-79]|6\\\\d)|76\\\\d)|6(?:26[06-9]|686))|6(?:06(?:4\\\\d|7[4-79])|295[5-7]|35[34]\\\\d|47(?:24|61)|59(?:5[08]|6[67]|74)|9(?:55[0-4]|77[23]))|7(?:26(?:6[13-9]|7[0-7])|(?:442|688)\\\\d|50(?:2[0-3]|[3-68]2|76))|8(?:27[56]\\\\d|37(?:5[2-5]|8[239])|843[2-58])|9(?:0(?:0(?:6[1-8]|85)|52\\\\d)|3583|4(?:66[1-8]|9(?:2[01]|81))|63(?:23|3[1-4])|9561))\\\\d{3}\",[9,10]],[\"7(?:457[0-57-9]|700[01]|911[028])\\\\d{5}|7(?:[1-3]\\\\d\\\\d|4(?:[0-46-9]\\\\d|5[0-689])|5(?:0[0-8]|[13-9]\\\\d|2[0-35-9])|7(?:0[1-9]|[1-7]\\\\d|8[02-9]|9[0-689])|8(?:[014-9]\\\\d|[23][0-8])|9(?:[024-9]\\\\d|1[02-9]|3[0-689]))\\\\d{6}\",[10]],[\"80[08]\\\\d{7}|800\\\\d{6}|8001111\"],[\"(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\\\d|8[2-49]))\\\\d{7}|845464\\\\d\",[7,10]],[\"70\\\\d{8}\",[10]],0,[\"(?:3[0347]|55)\\\\d{8}\",[10]],[\"76(?:0[0-2]|2[356]|34|4[0134]|5[49]|6[0-369]|77|81|9[39])\\\\d{6}\",[10]],[\"56\\\\d{8}\",[10]]],0,\" x\"],\"GD\":[\"1\",\"011\",\"(?:473|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-9]\\\\d{6})$\",\"473$1\",0,\"473\",[[\"473(?:2(?:3[0-2]|69)|3(?:2[89]|86)|4(?:[06]8|3[5-9]|4[0-49]|5[5-79]|73|90)|63[68]|7(?:58|84)|800|938)\\\\d{4}\"],[\"473(?:4(?:0[2-79]|1[04-9]|2[0-5]|58)|5(?:2[01]|3[3-8])|901)\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"GE\":[\"995\",\"00\",\"(?:[3-57]\\\\d\\\\d|800)\\\\d{6}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"70\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"32\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[57]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[348]\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"5(?:0555[5-9]|757(?:7[7-9]|8[01]))\\\\d{3}|5(?:000\\\\d|(?:52|75)00|8(?:58[89]|888))\\\\d{4}|5(?:0050|1111|2222|3333)[0-4]\\\\d{3}|(?:5(?:[14]4|5[0157-9]|68|7[0147-9]|9[1-35-9])|790)\\\\d{6}\"]]],\"GF\":[\"594\",\"00\",\"(?:[56]94|976)\\\\d{6}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[569]\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"694(?:[0-249]\\\\d|3[0-48])\\\\d{4}\"]]],\"GG\":[\"44\",\"00\",\"(?:1481|[357-9]\\\\d{3})\\\\d{6}|8\\\\d{6}(?:\\\\d{2})?\",[7,9,10],0,\"0\",0,\"0|([25-9]\\\\d{5})$\",\"1481$1\",0,0,[[\"1481[25-9]\\\\d{5}\",[10]],[\"7(?:(?:781|839)\\\\d|911[17])\\\\d{5}\",[10]],[\"80[08]\\\\d{7}|800\\\\d{6}|8001111\"],[\"(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\\\d|8[0-3]))\\\\d{7}|845464\\\\d\",[7,10]],[\"70\\\\d{8}\",[10]],0,[\"(?:3[0347]|55)\\\\d{8}\",[10]],[\"76(?:0[0-2]|2[356]|34|4[0134]|5[49]|6[0-369]|77|81|9[39])\\\\d{6}\",[10]],[\"56\\\\d{8}\",[10]]]],\"GH\":[\"233\",\"00\",\"(?:[235]\\\\d{3}|800)\\\\d{5}\",[8,9],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[235]\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"(?:2[0346-8]\\\\d|5(?:[0457]\\\\d|6[01]|9[1-6]))\\\\d{6}\",[9]]]],\"GI\":[\"350\",\"00\",\"[256]\\\\d{7}\",[8],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"2\"]]],0,0,0,0,0,0,[0,[\"(?:5[146-8]\\\\d|6(?:06|29))\\\\d{5}\"]]],\"GL\":[\"299\",\"00\",\"(?:19|[2-689]\\\\d)\\\\d{4}\",[6],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"19|[2-689]\"]]],0,0,0,0,0,0,[0,[\"[245]\\\\d{5}\"]]],\"GM\":[\"220\",\"00\",\"[2-9]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-9]\"]]],0,0,0,0,0,0,[0,[\"(?:[23679]\\\\d|5[0-389])\\\\d{5}\"]]],\"GN\":[\"224\",\"00\",\"722\\\\d{6}|(?:3|6\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"3\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[67]\"]]],0,0,0,0,0,0,[0,[\"6[02356]\\\\d{7}\",[9]]]],\"GP\":[\"590\",\"00\",\"(?:590|69\\\\d|976)\\\\d{6}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[569]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"590(?:0[1-68]|1[0-2]|2[0-68]|3[1289]|4[0-24-9]|5[3-579]|6[0189]|7[08]|8[0-689]|9\\\\d)\\\\d{4}\"],[\"69(?:0\\\\d\\\\d|1(?:2[29]|3[0-5]))\\\\d{4}\"],0,0,0,0,0,0,[\"976[01]\\\\d{5}\"]]],\"GQ\":[\"240\",\"00\",\"222\\\\d{6}|(?:3\\\\d|55|[89]0)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[235]\"]],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"[89]\"]]],0,0,0,0,0,0,[0,[\"(?:222|55[015])\\\\d{6}\"]]],\"GR\":[\"30\",\"00\",\"5005000\\\\d{3}|(?:[2689]\\\\d|70)\\\\d{8}\",[10],[[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"21|7\"]],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"2(?:2|3[2-57-9]|4[2-469]|5[2-59]|6[2-9]|7[2-69]|8[2-49])|5\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2689]\"]]],0,0,0,0,0,0,[0,[\"68[57-9]\\\\d{7}|(?:69|94)\\\\d{8}\"]]],\"GT\":[\"502\",\"00\",\"(?:1\\\\d{3}|[2-7])\\\\d{7}\",[8,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-7]\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]]],0,0,0,0,0,0,[0,[\"[3-5]\\\\d{7}\",[8]]]],\"GU\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|671|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([3-9]\\\\d{6})$\",\"671$1\",0,\"671\",[[\"671(?:3(?:00|3[39]|4[349]|55|6[26])|4(?:00|56|7[1-9]|8[0236-9])|5(?:55|6[2-5]|88)|6(?:3[2-578]|4[24-9]|5[34]|78|8[235-9])|7(?:[0479]7|2[0167]|3[45]|8[7-9])|8(?:[2-57-9]8|6[48])|9(?:2[29]|6[79]|7[1279]|8[7-9]|9[78]))\\\\d{4}\"],[\"671(?:3(?:00|3[39]|4[349]|55|6[26])|4(?:00|56|7[1-9]|8[0236-9])|5(?:55|6[2-5]|88)|6(?:3[2-578]|4[24-9]|5[34]|78|8[235-9])|7(?:[0479]7|2[0167]|3[45]|8[7-9])|8(?:[2-57-9]8|6[48])|9(?:2[29]|6[79]|7[1279]|8[7-9]|9[78]))\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"GW\":[\"245\",\"00\",\"[49]\\\\d{8}|4\\\\d{6}\",[7,9],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"40\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[49]\"]]],0,0,0,0,0,0,[0,[\"9(?:5\\\\d|6[569]|77)\\\\d{6}\",[9]]]],\"GY\":[\"592\",\"001\",\"(?:862\\\\d|9008)\\\\d{3}|(?:[2-46]\\\\d|77)\\\\d{5}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-46-9]\"]]],0,0,0,0,0,0,[0,[\"6\\\\d{6}\"]]],\"HK\":[\"852\",\"00(?:30|5[09]|[126-9]?)\",\"8[0-46-9]\\\\d{6,7}|9\\\\d{4}(?:\\\\d(?:\\\\d(?:\\\\d{4})?)?)?|(?:[235-79]\\\\d|46)\\\\d{6}\",[5,6,7,8,9,11],[[\"(\\\\d{3})(\\\\d{2,5})\",\"$1 $2\",[\"900\",\"9003\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-7]|8[1-4]|9(?:0[1-9]|[1-8])\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"9\"]]],0,0,0,0,0,0,[0,[\"(?:46(?:0[0-6]|1[0-2]|4[0-57-9])|5730|(?:626|848)[01]|707[1-5]|929[03-9])\\\\d{4}|(?:5(?:[1-59][0-46-9]|6[0-4689]|7[0-2469])|6(?:0[1-9]|[13-59]\\\\d|[268][0-57-9]|7[0-79])|9(?:0[1-9]|1[02-9]|[2358][0-8]|[467]\\\\d))\\\\d{5}\",[8]]],\"00\"],\"HN\":[\"504\",\"00\",\"8\\\\d{10}|[237-9]\\\\d{7}\",[8,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"[237-9]\"]]],0,0,0,0,0,0,[0,[\"[37-9]\\\\d{7}\",[8]]]],\"HR\":[\"385\",\"00\",\"(?:[24-69]\\\\d|3[0-79])\\\\d{7}|80\\\\d{5,7}|[1-79]\\\\d{7}|6\\\\d{5,6}\",[6,7,8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"6[01]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[67]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-5]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"9(?:751\\\\d{5}|8\\\\d{6,7})|9(?:0[1-9]|[1259]\\\\d|7[0679])\\\\d{6}\",[8,9]]]],\"HT\":[\"509\",\"00\",\"[2-489]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-489]\"]]],0,0,0,0,0,0,[0,[\"[34]\\\\d{7}\"]]],\"HU\":[\"36\",\"00\",\"[2357]\\\\d{8}|[1-9]\\\\d{7}\",[8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"(06 $1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[27][2-9]|3[2-7]|4[24-9]|5[2-79]|6|8[2-57-9]|9[2-69]\"],\"(06 $1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-57-9]\"],\"06 $1\"]],\"06\",0,0,0,0,0,[0,[\"(?:[257]0|3[01])\\\\d{7}\",[9]]]],\"ID\":[\"62\",\"00[189]\",\"(?:(?:007803|8\\\\d{4})\\\\d|[1-36])\\\\d{6}|[1-9]\\\\d{8,10}|[2-9]\\\\d{7}\",[7,8,9,10,11,12,13],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"15\"]],[\"(\\\\d{2})(\\\\d{5,9})\",\"$1 $2\",[\"2[124]|[36]1\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{5,7})\",\"$1 $2\",[\"800\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5,8})\",\"$1 $2\",[\"[2-79]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{3})\",\"$1-$2-$3\",[\"8[1-35-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6,8})\",\"$1 $2\",[\"1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"804\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"80\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\",\"$1-$2-$3\",[\"8\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"8[1-35-9]\\\\d{7,10}\",[9,10,11,12]]]],\"IE\":[\"353\",\"00\",\"(?:1\\\\d|[2569])\\\\d{6,8}|4\\\\d{6,9}|7\\\\d{8}|8\\\\d{8,9}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"2[24-9]|47|58|6[237-9]|9[35-9]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[45]0\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2569]|4[1-69]|7[14]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"70\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"81\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[78]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"4\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"8(?:22|[35-9]\\\\d)\\\\d{6}\",[9]]]],\"IL\":[\"972\",\"0(?:0|1[2-9])\",\"1\\\\d{6}(?:\\\\d{3,5})?|[57]\\\\d{8}|[1-489]\\\\d{7}\",[7,8,9,10,11,12],[[\"(\\\\d{4})(\\\\d{3})\",\"$1-$2\",[\"125\"]],[\"(\\\\d{4})(\\\\d{2})(\\\\d{2})\",\"$1-$2-$3\",[\"121\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[2-489]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[57]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1-$2-$3\",[\"12\"]],[\"(\\\\d{4})(\\\\d{6})\",\"$1-$2\",[\"159\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1-$2-$3-$4\",[\"1[7-9]\"]],[\"(\\\\d{3})(\\\\d{1,2})(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3-$4\",[\"15\"]]],\"0\",0,0,0,0,0,[0,[\"5(?:(?:[02368]\\\\d|[19][2-9]|4[1-9])\\\\d|5(?:01|1[79]|2[2-7]|3[23]|44|5[05689]|6[6-8]|7[0-267]|8[7-9]|9[1-9]))\\\\d{5}\",[9]]]],\"IM\":[\"44\",\"00\",\"1624\\\\d{6}|(?:[3578]\\\\d|90)\\\\d{8}\",[10],0,\"0\",0,\"0|([5-8]\\\\d{5})$\",\"1624$1\",0,\"74576|(?:16|7[56])24\",[[\"1624[5-8]\\\\d{5}\"],[\"76245[06]\\\\d{4}|7(?:4576|[59]24\\\\d|624[0-4689])\\\\d{5}\"],[\"808162\\\\d{4}\"],[\"8(?:440[49]06|72299\\\\d)\\\\d{3}|(?:8(?:45|70)|90[0167])624\\\\d{4}\"],[\"70\\\\d{8}\"],0,[\"3440[49]06\\\\d{3}|(?:3(?:08162|3\\\\d{4}|45624|7(?:0624|2299))|55\\\\d{4})\\\\d{4}\"],0,[\"56\\\\d{8}\"]]],\"IN\":[\"91\",\"00\",\"(?:000800|[2-9]\\\\d\\\\d)\\\\d{7}|1\\\\d{7,12}\",[8,9,10,11,12,13],[[\"(\\\\d{8})\",\"$1\",[\"5(?:0|2[23]|3[03]|[67]1|88)\",\"5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|888)\",\"5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|8888)\"],0,1],[\"(\\\\d{4})(\\\\d{4,5})\",\"$1 $2\",[\"180\",\"1800\"],0,1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"140\"],0,1],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"11|2[02]|33|4[04]|79[1-7]|80[2-46]\",\"11|2[02]|33|4[04]|79(?:[1-6]|7[19])|80(?:[2-4]|6[0-589])\",\"11|2[02]|33|4[04]|79(?:[124-6]|3(?:[02-9]|1[0-24-9])|7(?:1|9[1-6]))|80(?:[2-4]|6[0-589])\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1(?:2[0-249]|3[0-25]|4[145]|[68]|7[1257])|2(?:1[257]|3[013]|4[01]|5[0137]|6[0158]|78|8[1568])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|5[12]|[78]1)|6(?:12|[2-4]1|5[17]|6[13]|80)|7(?:12|3[134]|4[47]|61|88)|8(?:16|2[014]|3[126]|6[136]|7[078]|8[34]|91)|(?:43|59|75)[15]|(?:1[59]|29|67|72)[14]\",\"1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|674|7(?:(?:2[14]|3[34]|5[15])[2-6]|61[346]|88[0-8])|8(?:70[2-6]|84[235-7]|91[3-7])|(?:1(?:29|60|8[06])|261|552|6(?:12|[2-47]1|5[17]|6[13]|80)|7(?:12|31|4[47])|8(?:16|2[014]|3[126]|6[136]|7[78]|83))[2-7]\",\"1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|6(?:12(?:[2-6]|7[0-8])|74[2-7])|7(?:(?:2[14]|5[15])[2-6]|3171|61[346]|88(?:[2-7]|82))|8(?:70[2-6]|84(?:[2356]|7[19])|91(?:[3-6]|7[19]))|73[134][2-6]|(?:74[47]|8(?:16|2[014]|3[126]|6[136]|7[78]|83))(?:[2-6]|7[19])|(?:1(?:29|60|8[06])|261|552|6(?:[2-4]1|5[17]|6[13]|7(?:1|4[0189])|80)|7(?:12|88[01]))[2-7]\"],\"0$1\",1],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2[2457-9]|3[2-5]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[1-6])|7(?:1[013-9]|28|3[129]|4[1-35689]|5[29]|6[02-5]|70)|807\",\"1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2(?:[2457]|84|95)|3(?:[2-4]|55)|4[235-7]|5[2-689]|6[24578]|7[235689]|8[1-6])|7(?:1(?:[013-8]|9[6-9])|28[6-8]|3(?:17|2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4|5[0-367])|70[13-7])|807[19]\",\"1(?:[2-479]|5(?:[0236-9]|5[013-9]))|[2-5]|6(?:2(?:84|95)|355|83)|73179|807(?:1|9[1-3])|(?:1552|6(?:1[1358]|2[2457]|3[2-4]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[124-6])\\\\d|7(?:1(?:[013-8]\\\\d|9[6-9])|28[6-8]|3(?:2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]\\\\d|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4\\\\d|5[0-367])|70[13-7]))[2-7]\"],\"0$1\",1],[\"(\\\\d{5})(\\\\d{5})\",\"$1 $2\",[\"[6-9]\"],\"0$1\",1],[\"(\\\\d{4})(\\\\d{2,4})(\\\\d{4})\",\"$1 $2 $3\",[\"1(?:6|8[06])\",\"1(?:6|8[06]0)\"],0,1],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"18\"],0,1]],\"0\",0,0,0,0,0,[0,[\"(?:61279|7(?:887[02-9]|9(?:313|79[07-9]))|8(?:079[04-9]|(?:84|91)7[02-8]))\\\\d{5}|(?:6(?:12|[2-47]1|5[17]|6[13]|80)[0189]|7(?:1(?:2[0189]|9[0-5])|2(?:[14][017-9]|8[0-59])|3(?:2[5-8]|[34][017-9]|9[016-9])|4(?:1[015-9]|[29][89]|39|8[389])|5(?:[15][017-9]|2[04-9]|9[7-9])|6(?:0[0-47]|1[0-257-9]|2[0-4]|3[19]|5[4589])|70[0289]|88[089]|97[02-8])|8(?:0(?:6[67]|7[02-8])|70[017-9]|84[01489]|91[0-289]))\\\\d{6}|(?:7(?:31|4[47])|8(?:16|2[014]|3[126]|6[136]|7[78]|83))(?:[0189]\\\\d|7[02-8])\\\\d{5}|(?:6(?:[09]\\\\d|1[04679]|2[03689]|3[05-9]|4[0489]|50|6[069]|7[07]|8[7-9])|7(?:0\\\\d|2[0235-79]|3[05-8]|40|5[0346-8]|6[6-9]|7[1-9]|8[0-79]|9[089])|8(?:0[01589]|1[0-57-9]|2[235-9]|3[03-57-9]|[45]\\\\d|6[02457-9]|7[1-69]|8[0-25-9]|9[02-9])|9\\\\d\\\\d)\\\\d{7}|(?:6(?:(?:1[1358]|2[2457]|3[2-4]|4[235-7]|5[2-689]|6[24578]|8[124-6])\\\\d|7(?:[235689]\\\\d|4[0189]))|7(?:1(?:[013-8]\\\\d|9[6-9])|28[6-8]|3(?:2[0-49]|9[2-5])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]\\\\d|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4\\\\d|5[0-367])|70[13-7]|881))[0189]\\\\d{5}\",[10]]]],\"IO\":[\"246\",\"00\",\"3\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"3\"]]],0,0,0,0,0,0,[0,[\"38\\\\d{5}\"]]],\"IQ\":[\"964\",\"00\",\"(?:1|7\\\\d\\\\d)\\\\d{7}|[2-6]\\\\d{7,8}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-6]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"7[3-9]\\\\d{8}\",[10]]]],\"IR\":[\"98\",\"00\",\"[1-9]\\\\d{9}|(?:[1-8]\\\\d\\\\d|9)\\\\d{3,4}\",[4,5,6,7,10],[[\"(\\\\d{4,5})\",\"$1\",[\"96\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4,5})\",\"$1 $2\",[\"(?:1[137]|2[13-68]|3[1458]|4[145]|5[1468]|6[16]|7[1467]|8[13467])[12689]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-8]\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"9(?:(?:0(?:[1-35]\\\\d|44)|(?:[13]\\\\d|2[0-2])\\\\d)\\\\d|9(?:(?:[0-2]\\\\d|44)\\\\d|5[15]0|8(?:1\\\\d|88)|9(?:0[013]|1[0134]|21|77|9[6-9])))\\\\d{5}\",[10]]]],\"IS\":[\"354\",\"00|1(?:0(?:01|[12]0)|100)\",\"(?:38\\\\d|[4-9])\\\\d{6}\",[7,9],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[4-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"3\"]]],0,0,0,0,0,0,[0,[\"(?:38[589]\\\\d\\\\d|6(?:1[1-8]|2[0-6]|3[027-9]|4[014679]|5[0159]|6[0-69]|70|8[06-8]|9\\\\d)|7(?:5[057]|[6-9]\\\\d)|8(?:2[0-59]|[3-69]\\\\d|8[28]))\\\\d{4}\"]],\"00\"],\"IT\":[\"39\",\"00\",\"0\\\\d{5,10}|3[0-8]\\\\d{7,10}|55\\\\d{8}|8\\\\d{5}(?:\\\\d{2,4})?|(?:1\\\\d|39)\\\\d{7,8}\",[6,7,8,9,10,11],[[\"(\\\\d{2})(\\\\d{4,6})\",\"$1 $2\",[\"0[26]\"]],[\"(\\\\d{3})(\\\\d{3,6})\",\"$1 $2\",[\"0[13-57-9][0159]|8(?:03|4[17]|9[245])\",\"0[13-57-9][0159]|8(?:03|4[17]|9(?:2|[45][0-4]))\"]],[\"(\\\\d{4})(\\\\d{2,6})\",\"$1 $2\",[\"0(?:[13-579][2-46-8]|8[236-8])\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"894\"]],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"0[26]|5\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"1[4679]|[38]\"]],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"0[13-57-9][0159]\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{5})\",\"$1 $2 $3\",[\"0[26]\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"0\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\",\"$1 $2 $3\",[\"3\"]]],0,0,0,0,0,0,[[\"0669[0-79]\\\\d{1,6}|0(?:1(?:[0159]\\\\d|[27][1-5]|31|4[1-4]|6[1356]|8[2-57])|2\\\\d\\\\d|3(?:[0159]\\\\d|2[1-4]|3[12]|[48][1-6]|6[2-59]|7[1-7])|4(?:[0159]\\\\d|[23][1-9]|4[245]|6[1-5]|7[1-4]|81)|5(?:[0159]\\\\d|2[1-5]|3[2-6]|4[1-79]|6[4-6]|7[1-578]|8[3-8])|6(?:[0-57-9]\\\\d|6[0-8])|7(?:[0159]\\\\d|2[12]|3[1-7]|4[2-46]|6[13569]|7[13-6]|8[1-59])|8(?:[0159]\\\\d|2[3-578]|3[1-356]|[6-8][1-5])|9(?:[0159]\\\\d|[238][1-5]|4[12]|6[1-8]|7[1-6]))\\\\d{2,7}\"],[\"3[1-9]\\\\d{8}|3[2-9]\\\\d{7}\",[9,10]],[\"80(?:0\\\\d{3}|3)\\\\d{3}\",[6,9]],[\"(?:0878\\\\d\\\\d|89(?:2|4[5-9]\\\\d))\\\\d{3}|89[45][0-4]\\\\d\\\\d|(?:1(?:44|6[346])|89(?:5[5-9]|9))\\\\d{6}\",[6,8,9,10]],[\"1(?:78\\\\d|99)\\\\d{6}\",[9,10]],0,0,0,[\"55\\\\d{8}\",[10]],[\"84(?:[08]\\\\d{3}|[17])\\\\d{3}\",[6,9]]]],\"JE\":[\"44\",\"00\",\"1534\\\\d{6}|(?:[3578]\\\\d|90)\\\\d{8}\",[10],0,\"0\",0,\"0|([0-24-8]\\\\d{5})$\",\"1534$1\",0,0,[[\"1534[0-24-8]\\\\d{5}\"],[\"7(?:(?:(?:50|82)9|937)\\\\d|7(?:00[378]|97[7-9]))\\\\d{5}\"],[\"80(?:07(?:35|81)|8901)\\\\d{4}\"],[\"(?:8(?:4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|90(?:066[59]|1810|71(?:07|55)))\\\\d{4}\"],[\"701511\\\\d{4}\"],0,[\"(?:3(?:0(?:07(?:35|81)|8901)|3\\\\d{4}|4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|55\\\\d{4})\\\\d{4}\"],[\"76(?:0[0-2]|2[356]|34|4[0134]|5[49]|6[0-369]|77|81|9[39])\\\\d{6}\"],[\"56\\\\d{8}\"]]],\"JM\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|658|900)\\\\d{7}\",[10],0,\"1\",0,0,0,0,\"658|876\",[[\"(?:658(?:2(?:[0-8]\\\\d|9[0-46-9])|[3-9]\\\\d\\\\d)|876(?:5(?:02|1[0-468]|2[35]|63)|6(?:0[1-3579]|1[0237-9]|[23]\\\\d|40|5[06]|6[2-589]|7[05]|8[04]|9[4-9])|7(?:0[2-689]|[1-6]\\\\d|8[056]|9[45])|9(?:0[1-8]|1[02378]|[2-8]\\\\d|9[2-468])))\\\\d{4}\"],[\"(?:658295|876(?:(?:2[14-9]|[348]\\\\d)\\\\d|5(?:0[13-9]|17|[2-57-9]\\\\d|6[0-24-9])|7(?:0[07]|7\\\\d|8[1-47-9]|9[0-36-9])|9(?:[01]9|9[0579])))\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"JO\":[\"962\",\"00\",\"900\\\\d{5}|(?:(?:[268]|7\\\\d)\\\\d|32|53)\\\\d{6}\",[8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2356]|87\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"70\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"7(?:55[0-49]|(?:7[025-9]|8[0-25-9]|9\\\\d)\\\\d)\\\\d{5}\",[9]]]],\"JP\":[\"81\",\"010\",\"00[1-9]\\\\d{6,14}|[257-9]\\\\d{9}|(?:00|[1-9]\\\\d\\\\d)\\\\d{6}\",[8,9,10,11,12,13,14,15,16,17],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1-$2-$3\",[\"(?:12|57|99)0\"],\"0$1\"],[\"(\\\\d{4})(\\\\d)(\\\\d{4})\",\"$1-$2-$3\",[\"1(?:26|3[79]|4[56]|5[4-68]|6[3-5])|499|5(?:76|97)|746|8(?:3[89]|47|51|63)|9(?:49|80|9[16])\",\"1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:76|97)9|7468|8(?:3(?:8[78]|96)|477|51[24]|636)|9(?:496|802|9(?:1[23]|69))|1(?:45|58)[67]\",\"1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:769|979[2-69])|7468|8(?:3(?:8[78]|96[2457-9])|477|51[24]|636[2-57-9])|9(?:496|802|9(?:1[23]|69))|1(?:45|58)[67]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"60\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1-$2-$3\",[\"[36]|4(?:2[09]|7[01])\",\"[36]|4(?:2(?:0|9[02-69])|7(?:0[019]|1))\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"1(?:1|5[45]|77|88|9[69])|2(?:2[1-37]|3[0-269]|4[59]|5|6[24]|7[1-358]|8[1369]|9[0-38])|4(?:[28][1-9]|3[0-57]|[45]|6[248]|7[2-579]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-389])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9[2-6])|8(?:2[124589]|3[279]|49|6[0-24-689]|7[0-468]|8[68]|9[019])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9[1-489])\",\"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2(?:[127]|3[014-9])|3[0-269]|4[59]|5(?:[0468][01]|[1-3]|5[0-69]|9[19])|62|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|2[01]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|8[1-9])|5(?:2|3[045]|4[0-369]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0-2469])|49|6(?:[0-24]|5[0-3589]|9[01459])|7[0-468]|8[68])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9(?:[1289]|3[34]|4[0178]))|(?:49|55|83)[29]|(?:264|837)[016-9]|2(?:57|93)[015-9]|(?:47[59]|59[89]|8(?:6[68]|9))[019]\",\"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2[127]|3[0-269]|4[59]|5(?:[0468][01]|[1-3]|5[0-69]|9(?:17|99))|6(?:2|4[016-9])|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|2[01]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0169])|3(?:[29]|7(?:[017-9]|6[6-8]))|49|6(?:[0-24]|5(?:[0-389]|5[23])|6(?:[01]|9[178])|9[0145])|7[0-468]|8[68])|9(?:4[15]|5[138]|7[156]|8[189]|9(?:[1289]|3(?:31|4[357])|4[0178]))|(?:8294|96)[1-3]|2(?:57|93)[015-9]|(?:223|8699)[014-9]|(?:48|8292|9[23])[1-9]|(?:47[59]|59[89]|8(?:68|9))[019]\",\"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2[127]|3[0-269]|4[59]|5(?:[0468][01]|[1-3]|5[0-69]|7[015-9]|9(?:17|99))|6(?:2|4[016-9])|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17|3[015-9]))|4(?:2(?:[13-79]|2[01]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9(?:[019]|4[1-3]|6(?:[0-47-9]|5[01346-9])))|3(?:[29]|7(?:[017-9]|6[6-8]))|49|6(?:[0-24]|5(?:[0-389]|5[23])|6(?:[01]|9[178])|9[0145])|7[0-468]|8[68])|9(?:4[15]|5[138]|6[1-3]|7[156]|8[189]|9(?:[1289]|3(?:31|4[357])|4[0178]))|(?:223|8699)[014-9]|(?:48|829(?:2|66)|9[23])[1-9]|(?:47[59]|59[89]|8(?:68|9))[019]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1-$2-$3\",[\"[14]|[29][2-9]|5[3-9]|7[2-4679]|8(?:[246-9]|3[3-8]|5[2-9])\",\"[14]|[29][2-9]|5[3-9]|7[2-4679]|8(?:[246-9]|3(?:[3-6][2-9]|7|8[2-5])|5[2-9])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"800\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1-$2-$3\",[\"[2579]|80\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"[7-9]0[1-9]\\\\d{7}\",[10]]]],\"KE\":[\"254\",\"000\",\"(?:[17]\\\\d\\\\d|900)\\\\d{6}|(?:2|80)0\\\\d{6,7}|[4-6]\\\\d{6,8}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{5,7})\",\"$1 $2\",[\"[24-6]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"[17]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"(?:1(?:0[0-2]|1[01])|7\\\\d\\\\d)\\\\d{6}\",[9]]]],\"KG\":[\"996\",\"00\",\"8\\\\d{9}|(?:[235-8]\\\\d|99)\\\\d{7}\",[9,10],[[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"3(?:1[346]|[24-79])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[235-79]|88\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d)(\\\\d{2,3})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"(?:312(?:58\\\\d|973)|8801\\\\d\\\\d)\\\\d{3}|(?:2(?:0[0-35]|2\\\\d)|5[0-24-7]\\\\d|7(?:[07]\\\\d|55)|99[05-9])\\\\d{6}\",[9]]]],\"KH\":[\"855\",\"00[14-9]\",\"1\\\\d{9}|[1-9]\\\\d{7,8}\",[8,9,10],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]]],\"0\",0,0,0,0,0,[0,[\"(?:(?:1[28]|3[18]|9[67])\\\\d|6[016-9]|7(?:[07-9]|[16]\\\\d)|8(?:[013-79]|8\\\\d))\\\\d{6}|(?:1\\\\d|9[0-57-9])\\\\d{6}|(?:2[3-6]|3[2-6]|4[2-4]|[5-7][2-5])48\\\\d{5}\",[8,9]]]],\"KI\":[\"686\",\"00\",\"(?:[37]\\\\d|6[0-79])\\\\d{6}|(?:[2-48]\\\\d|50)\\\\d{3}\",[5,8],0,\"0\",0,0,0,0,0,[0,[\"(?:63\\\\d{3}|73(?:0[0-5]\\\\d|140))\\\\d{3}|[67]200[01]\\\\d{3}\",[8]]]],\"KM\":[\"269\",\"00\",\"[3478]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[3478]\"]]],0,0,0,0,0,0,[0,[\"[34]\\\\d{6}\"]]],\"KN\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-7]\\\\d{6})$\",\"869$1\",0,\"869\",[[\"869(?:2(?:29|36)|302|4(?:6[015-9]|70))\\\\d{4}\"],[\"869(?:5(?:5[6-8]|6[5-7])|66\\\\d|76[02-7])\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"KP\":[\"850\",\"00|99\",\"85\\\\d{6}|(?:19\\\\d|2)\\\\d{7}\",[8,10],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"19[1-3]\\\\d{7}\",[10]]]],\"KR\":[\"82\",\"00(?:[125689]|3(?:[46]5|91)|7(?:00|27|3|55|6[126]))\",\"00[1-9]\\\\d{8,11}|(?:[12]|5\\\\d{3})\\\\d{7}|[13-6]\\\\d{9}|(?:[1-6]\\\\d|80)\\\\d{7}|[3-6]\\\\d{4,5}|(?:00|7)0\\\\d{8}\",[5,6,8,9,10,11,12,13,14],[[\"(\\\\d{2})(\\\\d{3,4})\",\"$1-$2\",[\"(?:3[1-3]|[46][1-4]|5[1-5])1\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"1\"]],[\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\",\"$1-$2-$3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"60|8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1-$2-$3\",[\"[1346]|5[1-5]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1-$2-$3\",[\"[57]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5})(\\\\d{4})\",\"$1-$2-$3\",[\"5\"],\"0$1\"]],\"0\",0,\"0(8(?:[1-46-8]|5\\\\d\\\\d))?\",0,0,0,[0,[\"1(?:05(?:[0-8]\\\\d|9[0-5])|22[13]\\\\d)\\\\d{4,5}|1(?:0[1-46-9]|[16-9]\\\\d|2[013-9])\\\\d{6,7}\",[9,10]]]],\"KW\":[\"965\",\"00\",\"(?:18|[2569]\\\\d\\\\d)\\\\d{5}\",[7,8],[[\"(\\\\d{4})(\\\\d{3,4})\",\"$1 $2\",[\"[169]|2(?:[235]|4[1-35-9])|52\"]],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[25]\"]]],0,0,0,0,0,0,[0,[\"(?:5(?:2(?:22|5[25])|88[58])|6(?:222|444|70[013-9]|888|93[039])|9(?:11[01]|333|500))\\\\d{4}|(?:5(?:[05]\\\\d|1[0-7]|6[56])|6(?:0[034679]|5[015-9]|6\\\\d|7[67]|9[069])|9(?:0[09]|22|[4679]\\\\d|55|8[057-9]))\\\\d{5}\",[8]]]],\"KY\":[\"1\",\"011\",\"(?:345|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-9]\\\\d{6})$\",\"345$1\",0,\"345\",[[\"345(?:2(?:22|44)|444|6(?:23|38|40)|7(?:4[35-79]|6[6-9]|77)|8(?:00|1[45]|25|[48]8)|9(?:14|4[035-9]))\\\\d{4}\"],[\"345(?:32[1-9]|5(?:1[67]|2[5-79]|4[6-9]|50|76)|649|9(?:1[67]|2[2-9]|3[689]))\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"(?:345976|900[2-9]\\\\d\\\\d)\\\\d{4}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"],0,0,[\"345849\\\\d{4}\"]]],\"KZ\":[\"7\",\"810\",\"33622\\\\d{5}|(?:7\\\\d|80)\\\\d{8}\",[10],0,\"8\",0,0,0,0,\"33|7\",[[\"(?:33622|7(?:1(?:0(?:[23]\\\\d|4[0-3]|59|63)|1(?:[23]\\\\d|4[0-79]|59)|2(?:[23]\\\\d|59)|3(?:2\\\\d|3[0-79]|4[0-35-9]|59)|4(?:[24]\\\\d|3[013-9]|5[1-9])|5(?:2\\\\d|3[1-9]|4[0-7]|59)|6(?:[2-4]\\\\d|5[19]|61)|72\\\\d|8(?:[27]\\\\d|3[1-46-9]|4[0-5]))|2(?:1(?:[23]\\\\d|4[46-9]|5[3469])|2(?:2\\\\d|3[0679]|46|5[12679])|3(?:[2-4]\\\\d|5[139])|4(?:2\\\\d|3[1-35-9]|59)|5(?:[23]\\\\d|4[0-246-8]|59|61)|6(?:2\\\\d|3[1-9]|4[0-4]|59)|7(?:[2379]\\\\d|40|5[279])|8(?:[23]\\\\d|4[0-3]|59)|9(?:2\\\\d|3[124578]|59))))\\\\d{5}\"],[\"7(?:0[0-25-8]|47|6[02-4]|7[15-8]|85)\\\\d{7}\"],[\"800\\\\d{7}\"],[\"809\\\\d{7}\"],[\"808\\\\d{7}\"],0,0,0,[\"751\\\\d{7}\"]],\"8~10\"],\"LA\":[\"856\",\"00\",\"(?:2\\\\d|3)\\\\d{8}|(?:[235-8]\\\\d|41)\\\\d{6}\",[8,9,10],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2[13]|3[14]|[4-8]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"3\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"2\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"20(?:[29]\\\\d|5[24-689]|7[6-8])\\\\d{6}\",[10]]]],\"LB\":[\"961\",\"00\",\"[7-9]\\\\d{7}|[13-9]\\\\d{6}\",[7,8],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[13-69]|7(?:[2-57]|62|8[0-7]|9[04-9])|8[02-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[7-9]\"]]],\"0\",0,0,0,0,0,[0,[\"793(?:[01]\\\\d|2[0-4])\\\\d{3}|(?:(?:3|81)\\\\d|7(?:[01]\\\\d|6[013-9]|8[89]|9[12]))\\\\d{5}\"]]],\"LC\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|758|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-7]\\\\d{6})$\",\"758$1\",0,\"758\",[[\"758(?:4(?:30|5\\\\d|6[2-9]|8[0-2])|57[0-2]|638)\\\\d{4}\"],[\"758(?:28[4-7]|384|4(?:6[01]|8[4-9])|5(?:1[89]|20|84)|7(?:1[2-9]|2\\\\d|3[01]))\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"LI\":[\"423\",\"00\",\"90\\\\d{5}|(?:[2378]|6\\\\d\\\\d)\\\\d{6}\",[7,9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[237-9]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"69\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6\"]]],\"0\",0,\"0|(1001)\",0,0,0,[0,[\"(?:6(?:4(?:89|9\\\\d)|5[0-3]\\\\d|6(?:0[0-7]|10|2[06-9]|39))\\\\d|7(?:[37-9]\\\\d|42|56))\\\\d{4}\"]]],\"LK\":[\"94\",\"00\",\"[1-9]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[1-689]\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"7[0-25-8]\\\\d{7}\"]]],\"LR\":[\"231\",\"00\",\"(?:2|33|5\\\\d|77|88)\\\\d{7}|[45]\\\\d{6}\",[7,8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[45]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[3578]\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"(?:(?:330|555|(?:77|88)\\\\d)\\\\d|4[67])\\\\d{5}|5\\\\d{6}\",[7,9]]]],\"LS\":[\"266\",\"00\",\"(?:[256]\\\\d\\\\d|800)\\\\d{5}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2568]\"]]],0,0,0,0,0,0,[0,[\"[56]\\\\d{7}\"]]],\"LT\":[\"370\",\"00\",\"(?:[3469]\\\\d|52|[78]0)\\\\d{6}\",[8],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"52[0-7]\"],\"(8-$1)\",1],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[7-9]\"],\"8 $1\",1],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"37|4(?:[15]|6[1-8])\"],\"(8-$1)\",1],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[3-6]\"],\"(8-$1)\",1]],\"8\",0,\"[08]\",0,0,0,[0,[\"6\\\\d{7}\"]]],\"LU\":[\"352\",\"00\",\"35[013-9]\\\\d{4,8}|6\\\\d{8}|35\\\\d{2,4}|(?:[2457-9]\\\\d|3[0-46-9])\\\\d{2,9}\",[4,5,6,7,8,9,10,11],[[\"(\\\\d{2})(\\\\d{3})\",\"$1 $2\",[\"2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"20[2-689]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,2})\",\"$1 $2 $3 $4\",[\"2(?:[0367]|4[3-8])\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"80[01]|90[015]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"20\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,2})\",\"$1 $2 $3 $4 $5\",[\"2(?:[0367]|4[3-8])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,5})\",\"$1 $2 $3 $4\",[\"[3-57]|8[13-9]|9(?:0[89]|[2-579])|(?:2|80)[2-9]\"]]],0,0,\"(15(?:0[06]|1[12]|[35]5|4[04]|6[26]|77|88|99)\\\\d)\",0,0,0,[0,[\"6(?:[269][18]|5[158]|7[189]|81)\\\\d{6}\",[9]]]],\"LV\":[\"371\",\"00\",\"(?:[268]\\\\d|90)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[269]|8[01]\"]]],0,0,0,0,0,0,[0,[\"2\\\\d{7}\"]]],\"LY\":[\"218\",\"00\",\"[2-9]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{7})\",\"$1-$2\",[\"[2-9]\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"9[1-6]\\\\d{7}\"]]],\"MA\":[\"212\",\"00\",\"[5-8]\\\\d{8}\",[9],[[\"(\\\\d{5})(\\\\d{4})\",\"$1-$2\",[\"5(?:29|38)\",\"5(?:29|38)[89]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"5[45]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5})\",\"$1-$2\",[\"5(?:2[2-489]|3[5-9]|9)|892\",\"5(?:2(?:[2-49]|8[235-9])|3[5-9]|9)|892\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1-$2\",[\"8\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1-$2\",[\"[5-7]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"5(?:29(?:[189]0|29)|38[89]0)\\\\d{4}|5(?:2(?:[015-7]\\\\d|2[02-9]|3[0-578]|4[02-46-8]|8[0235-7]|90)|3(?:[0-47]\\\\d|5[02-9]|6[02-8]|80|9[3-9])|(?:4[067]|5[03])\\\\d)\\\\d{5}\"],[\"(?:6(?:[0-79]\\\\d|8[0-247-9])|7(?:0[016-8]|6[1267]|7[0-27]))\\\\d{6}\"],[\"80\\\\d{7}\"],[\"89\\\\d{7}\"],0,0,0,0,[\"592(?:4[0-2]|93)\\\\d{4}\"]]],\"MC\":[\"377\",\"00\",\"870\\\\d{5}|(?:[349]|6\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"4\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[39]\"]],[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"6\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"4(?:4\\\\d|5[1-9])\\\\d{5}|(?:3|6\\\\d)\\\\d{7}\"]]],\"MD\":[\"373\",\"00\",\"(?:[235-7]\\\\d|[89]0)\\\\d{6}\",[8],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"22|3\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[25-7]\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"562\\\\d{5}|(?:6\\\\d|7[16-9])\\\\d{6}\"]]],\"ME\":[\"382\",\"00\",\"(?:20|[3-79]\\\\d)\\\\d{6}|80\\\\d{6,7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-9]\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"6(?:[07-9]\\\\d|3[024]|6[0-25])\\\\d{5}\",[8]]]],\"MF\":[\"590\",\"00\",\"(?:590|69\\\\d|976)\\\\d{6}\",[9],0,\"0\",0,0,0,0,0,[[\"590(?:0[079]|[14]3|[27][79]|30|5[0-268]|87)\\\\d{4}\"],[\"69(?:0\\\\d\\\\d|1(?:2[29]|3[0-5]))\\\\d{4}\"],0,0,0,0,0,0,[\"976[01]\\\\d{5}\"]]],\"MG\":[\"261\",\"00\",\"[23]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[23]\"],\"0$1\"]],\"0\",0,\"0|([24-9]\\\\d{6})$\",\"20$1\",0,0,[0,[\"3[2-49]\\\\d{7}\"]]],\"MH\":[\"692\",\"011\",\"329\\\\d{4}|(?:[256]\\\\d|45)\\\\d{5}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[2-6]\"]]],\"1\",0,0,0,0,0,[0,[\"(?:(?:23|54)5|329|45[56])\\\\d{4}\"]]],\"MK\":[\"389\",\"00\",\"[2-578]\\\\d{7}\",[8],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[347]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[58]\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"7(?:(?:[0-25-8]\\\\d|3[2-4]|9[23])\\\\d|4(?:21|60))\\\\d{4}\"]]],\"ML\":[\"223\",\"00\",\"[24-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[24-9]\"]]],0,0,0,0,0,0,[0,[\"2(?:079|17\\\\d)\\\\d{4}|(?:5[01]|[679]\\\\d|8[239])\\\\d{6}\"]]],\"MM\":[\"95\",\"00\",\"1\\\\d{5,7}|95\\\\d{6}|(?:[4-7]|9[0-46-9])\\\\d{6,8}|(?:2|8\\\\d)\\\\d{5,8}\",[6,7,8,9,10],[[\"(\\\\d)(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"16|2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[45]|6(?:0[23]|[1-689]|7[235-7])|7(?:[0-4]|5[2-7])|8[1-6]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[12]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[4-7]|8[1-35]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4,6})\",\"$1 $2 $3\",[\"9(?:2[0-4]|[35-9]|4[137-9])\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"92\"],\"0$1\"],[\"(\\\\d)(\\\\d{5})(\\\\d{4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"(?:17[01]|9(?:2(?:[0-4]|[56]\\\\d\\\\d)|(?:3(?:[0-36]|4\\\\d)|(?:6[6-9]|8[89]|9[5-8])\\\\d|7(?:3|[5-9]\\\\d))\\\\d|4(?:(?:[0245]\\\\d|[1379])\\\\d|88)|5[0-6])\\\\d)\\\\d{4}|9[69]1\\\\d{6}|9(?:[68]\\\\d|9[089])\\\\d{5}\",[7,8,9,10]]]],\"MN\":[\"976\",\"001\",\"[12]\\\\d{7,9}|[57-9]\\\\d{7}\",[8,9,10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[12]1\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[57-9]\"]],[\"(\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"[12]2[1-3]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5,6})\",\"$1 $2\",[\"[12](?:27|3[2-8]|4[2-68]|5[1-4689])\",\"[12](?:27|3[2-8]|4[2-68]|5[1-4689])[0-3]\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{4,5})\",\"$1 $2\",[\"[12]\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"(?:8(?:[05689]\\\\d|3[01])|9(?:[014-9]\\\\d|20|3[0-4]))\\\\d{5}\",[8]]]],\"MO\":[\"853\",\"00\",\"(?:28|[68]\\\\d)\\\\d{6}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[268]\"]]],0,0,0,0,0,0,[0,[\"6(?:[235]\\\\d\\\\d|6(?:0[0-5]|[1-9]\\\\d)|8(?:[02][5-9]|[146-8]\\\\d|[35][0-4]))\\\\d{4}\"]]],\"MP\":[\"1\",\"011\",\"[58]\\\\d{9}|(?:67|90)0\\\\d{7}\",[10],0,\"1\",0,\"1|([2-9]\\\\d{6})$\",\"670$1\",0,\"670\",[[\"670(?:2(?:3[3-7]|56|8[5-8])|32[1-38]|4(?:33|8[348])|5(?:32|55|88)|6(?:64|70|82)|78[3589]|8[3-9]8|989)\\\\d{4}\"],[\"670(?:2(?:3[3-7]|56|8[5-8])|32[1-38]|4(?:33|8[348])|5(?:32|55|88)|6(?:64|70|82)|78[3589]|8[3-9]8|989)\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"MQ\":[\"596\",\"00\",\"69\\\\d{7}|(?:59|97)6\\\\d{6}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[569]\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"69(?:6(?:[0-47-9]\\\\d|5[0-6]|6[0-4])|727)\\\\d{4}\"]]],\"MR\":[\"222\",\"00\",\"(?:[2-4]\\\\d\\\\d|800)\\\\d{5}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-48]\"]]],0,0,0,0,0,0,[0,[\"[2-4][0-46-9]\\\\d{6}\"]]],\"MS\":[\"1\",\"011\",\"66449\\\\d{5}|(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|(4\\\\d{6})$\",\"664$1\",0,\"664\",[[\"664491\\\\d{4}\"],[\"66449[2-6]\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"MT\":[\"356\",\"00\",\"3550\\\\d{4}|(?:[2579]\\\\d\\\\d|800)\\\\d{5}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2357-9]\"]]],0,0,0,0,0,0,[0,[\"(?:7(?:210|[79]\\\\d\\\\d)|9(?:[29]\\\\d\\\\d|69[67]|8(?:1[1-3]|89|97)))\\\\d{4}\"]]],\"MU\":[\"230\",\"0(?:0|[24-7]0|3[03])\",\"(?:[2-468]|5\\\\d)\\\\d{6}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-46]|8[013]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"5\"]]],0,0,0,0,0,0,[0,[\"5(?:4(?:2[1-389]|7[1-9])|87[15-8])\\\\d{4}|5(?:2[589]|4[3489]|7\\\\d|8[0-689]|9[0-8])\\\\d{5}\",[8]]],\"020\"],\"MV\":[\"960\",\"0(?:0|19)\",\"(?:800|9[0-57-9]\\\\d)\\\\d{7}|[34679]\\\\d{6}\",[7,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[3467]|9[13-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"]]],0,0,0,0,0,0,[0,[\"46[46]\\\\d{4}|(?:7[2-9]|9[13-9])\\\\d{5}\",[7]]],\"00\"],\"MW\":[\"265\",\"00\",\"1\\\\d{6}(?:\\\\d{2})?|(?:[23]1|77|88|99)\\\\d{7}\",[7,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1[2-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[137-9]\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"111\\\\d{6}|(?:31|77|88|99)\\\\d{7}\",[9]]]],\"MX\":[\"52\",\"0[09]\",\"(?:1(?:[01467]\\\\d|[2359][1-9]|8[1-79])|[2-9]\\\\d)\\\\d{8}\",[10,11],[[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"33|5[56]|81\"],0,1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-9]\"],0,1],[\"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$2 $3 $4\",[\"1(?:33|5[56]|81)\"],0,1],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$2 $3 $4\",[\"1\"],0,1]],\"01\",0,\"0(?:[12]|4[45])|1\",0,0,0,[0,[\"(?:1(?:2(?:2[1-9]|3[1-35-8]|4[13-9]|7[1-689]|8[1-578]|9[467])|3(?:1[1-79]|[2458][1-9]|3\\\\d|7[1-8]|9[1-5])|4(?:1[1-57-9]|[24-7][1-9]|3[1-8]|8[1-35-9]|9[2-689])|5(?:[56]\\\\d|88|9[1-79])|6(?:1[2-68]|[2-4][1-9]|5[1-3689]|6[1-57-9]|7[1-7]|8[67]|9[4-8])|7(?:[1-467][1-9]|5[13-9]|8[1-69]|9[17])|8(?:1\\\\d|2[13-689]|3[1-6]|4[124-6]|6[1246-9]|7[1-378]|9[12479])|9(?:1[346-9]|2[1-4]|3[2-46-8]|5[1348]|[69][1-9]|7[12]|8[1-8]))|2(?:2[1-9]|3[1-35-8]|4[13-9]|7[1-689]|8[1-578]|9[467])|3(?:1[1-79]|[2458][1-9]|3\\\\d|7[1-8]|9[1-5])|4(?:1[1-57-9]|[24-7][1-9]|3[1-8]|8[1-35-9]|9[2-689])|5(?:[56]\\\\d|88|9[1-79])|6(?:1[2-68]|[2-4][1-9]|5[1-3689]|6[1-57-9]|7[1-7]|8[67]|9[4-8])|7(?:[1-467][1-9]|5[13-9]|8[1-69]|9[17])|8(?:1\\\\d|2[13-689]|3[1-6]|4[124-6]|6[1246-9]|7[1-378]|9[12479])|9(?:1[346-9]|2[1-4]|3[2-46-8]|5[1348]|[69][1-9]|7[12]|8[1-8]))\\\\d{7}\"]],\"00\"],\"MY\":[\"60\",\"00\",\"1\\\\d{8,9}|(?:3\\\\d|[4-9])\\\\d{7}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3\",[\"[4-79]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1-$2 $3\",[\"1(?:[02469]|[37][2-9]|8[1-9])|8\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1-$2 $3\",[\"3\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1-$2-$3-$4\",[\"1[36-8]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3\",[\"15\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1-$2 $3\",[\"1\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"1(?:4400|8(?:47|8[27])[0-4])\\\\d{4}|1(?:0(?:[23568]\\\\d|4[0-6]|7[016-9]|9[0-8])|1(?:[1-5]\\\\d\\\\d|6(?:0[5-9]|[1-9]\\\\d)|7(?:0[3-9]|1[01]))|(?:[2379][2-9]|4[235-9]|(?:59|6)\\\\d)\\\\d|8(?:1[23]|[236]\\\\d|4[06]|5[7-9]|7[016-9]|8[01]|9[0-8]))\\\\d{5}\",[9,10]]]],\"MZ\":[\"258\",\"00\",\"(?:2|8\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2|8[2-7]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]]],0,0,0,0,0,0,[0,[\"8[2-7]\\\\d{7}\",[9]]]],\"NA\":[\"264\",\"00\",\"[68]\\\\d{7,8}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"88\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"6\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"87\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"(?:60|8[1245])\\\\d{7}\",[9]]]],\"NC\":[\"687\",\"00\",\"[2-57-9]\\\\d{5}\",[6],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1.$2.$3\",[\"[2-57-9]\"]]],0,0,0,0,0,0,[0,[\"(?:5[0-4]|[79]\\\\d|8[0-79])\\\\d{4}\"]]],\"NE\":[\"227\",\"00\",\"[0289]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"08\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[089]|2[013]\"]]],0,0,0,0,0,0,[0,[\"(?:23|8[014589]|9\\\\d)\\\\d{6}\"]]],\"NF\":[\"672\",\"00\",\"[13]\\\\d{5}\",[6],[[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"1[0-3]\"]],[\"(\\\\d)(\\\\d{5})\",\"$1 $2\",[\"[13]\"]]],0,0,\"([0-258]\\\\d{4})$\",\"3$1\",0,0,[0,[\"(?:14|3[58])\\\\d{4}\"]]],\"NG\":[\"234\",\"009\",\"(?:[124-7]|9\\\\d{3})\\\\d{6}|[1-9]\\\\d{7}|[78]\\\\d{9,13}\",[7,8,10,11,12,13,14],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"78\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[12]|9(?:0[3-9]|[1-9])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\",\"$1 $2 $3\",[\"[3-7]|8[2-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[7-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\",\"$1 $2 $3\",[\"[78]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5})(\\\\d{5,6})\",\"$1 $2 $3\",[\"[78]\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"(?:707[0-3]|8(?:01|19)[01])\\\\d{6}|(?:70[1-689]|8(?:0[2-9]|1[0-8])|90[1-9])\\\\d{7}\",[10]]]],\"NI\":[\"505\",\"00\",\"(?:1800|[25-8]\\\\d{3})\\\\d{4}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[125-8]\"]]],0,0,0,0,0,0,[0,[\"(?:5(?:5[0-7]|[78]\\\\d)|6(?:20|3[035]|4[045]|5[05]|77|8[1-9]|9[059])|(?:7[5-8]|8\\\\d)\\\\d)\\\\d{5}\"]]],\"NL\":[\"31\",\"00\",\"(?:[124-7]\\\\d\\\\d|3(?:[02-9]\\\\d|1[0-8]))\\\\d{6}|[89]\\\\d{6,9}|1\\\\d{4,5}\",[5,6,7,8,9,10],[[\"(\\\\d{3})(\\\\d{4,7})\",\"$1 $2\",[\"[89]0\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"66\"],\"0$1\"],[\"(\\\\d)(\\\\d{8})\",\"$1 $2\",[\"6\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1[16-8]|2[259]|3[124]|4[17-9]|5[124679]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-57-9]\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"6[1-58]\\\\d{7}\",[9]]]],\"NO\":[\"47\",\"00\",\"(?:0|[2-9]\\\\d{3})\\\\d{4}\",[5,8],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[489]|5[89]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[235-7]\"]]],0,0,0,0,0,\"[02-689]|7[0-8]\",[[\"(?:2[1-4]|3[1-3578]|5[1-35-7]|6[1-4679]|7[0-8])\\\\d{6}\",[8]],[\"(?:4[015-8]|5[89]|9\\\\d)\\\\d{6}\",[8]],[\"80[01]\\\\d{5}\",[8]],[\"82[09]\\\\d{5}\",[8]],[\"880\\\\d{5}\",[8]],0,[\"(?:0[2-9]|81(?:0(?:0[7-9]|1\\\\d)|5\\\\d\\\\d))\\\\d{3}\"],0,[\"85[0-5]\\\\d{5}\",[8]],[\"810(?:0[0-6]|[2-8]\\\\d)\\\\d{3}\",[8]]]],\"NP\":[\"977\",\"00\",\"9\\\\d{9}|[1-9]\\\\d{7}\",[8,10],[[\"(\\\\d)(\\\\d{7})\",\"$1-$2\",[\"1[2-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1-$2\",[\"[1-8]|9(?:[1-579]|6[2-6])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1-$2\",[\"9\"]]],\"0\",0,0,0,0,0,[0,[\"9(?:6[0-3]|7[245]|8[0-24-68])\\\\d{7}\",[10]]]],\"NR\":[\"674\",\"00\",\"(?:444|(?:55|8\\\\d)\\\\d|666)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[4-68]\"]]],0,0,0,0,0,0,[0,[\"(?:55[3-9]|666|8\\\\d\\\\d)\\\\d{4}\"]]],\"NU\":[\"683\",\"00\",\"(?:[47]|888\\\\d)\\\\d{3}\",[4,7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"8\"]]],0,0,0,0,0,0,[0,[\"888[4-9]\\\\d{3}\",[7]]]],\"NZ\":[\"64\",\"0(?:0|161)\",\"2\\\\d{7,9}|(?:[34]\\\\d|6[0-35-9])\\\\d{6}|(?:508|[79]\\\\d)\\\\d{6,7}|8\\\\d{4,9}\",[5,6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{3,8})\",\"$1 $2\",[\"83\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]0\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3\",[\"24|[346]|7[2-57-9]|9[2-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2(?:10|74)|[59]|80\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"2[028]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,5})\",\"$1 $2 $3\",[\"2(?:[169]|7[0-35-9])|7|86\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"2[0-28]\\\\d{8}|2[0-27-9]\\\\d{7}|21\\\\d{6}\",[8,9,10]]],\"00\"],\"OM\":[\"968\",\"00\",\"(?:1505|[279]\\\\d{3}|500)\\\\d{4}|8007\\\\d{4,5}\",[7,8,9],[[\"(\\\\d{3})(\\\\d{4,6})\",\"$1 $2\",[\"[58]\"]],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"2\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[179]\"]]],0,0,0,0,0,0,[0,[\"(?:1505|90[1-9]\\\\d)\\\\d{4}|(?:7[1289]|9[1-9])\\\\d{6}\",[8]]]],\"PA\":[\"507\",\"00\",\"(?:[1-57-9]|6\\\\d)\\\\d{6}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[1-57-9]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"6\"]]],0,0,0,0,0,0,[0,[\"(?:1[16]1|21[89]|6(?:[02-9]\\\\d|1[0-6])\\\\d|8(?:1[01]|7[23]))\\\\d{4}\"]]],\"PE\":[\"51\",\"19(?:1[124]|77|90)00\",\"(?:[14-8]|9\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"80\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"1\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[4-8]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"]]],\"0\",0,0,0,0,0,[0,[\"9\\\\d{8}\",[9]]],0,\" Anexo \"],\"PF\":[\"689\",\"00\",\"[48]\\\\d{7}|4\\\\d{5}\",[6,8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"44\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[48]\"]]],0,0,0,0,0,0,[0,[\"8[7-9]\\\\d{6}\",[8]]]],\"PG\":[\"675\",\"00|140[1-3]\",\"(?:180|[78]\\\\d{3})\\\\d{4}|(?:[2-589]\\\\d|64)\\\\d{5}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"18|[2-69]|85\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[78]\"]]],0,0,0,0,0,0,[0,[\"77(?:3[1-9]|[5-9]\\\\d)\\\\d{4}|(?:7[0-689]|81)\\\\d{6}\",[8]]],\"00\"],\"PH\":[\"63\",\"00\",\"1800\\\\d{7,9}|(?:2|[89]\\\\d{4})\\\\d{5}|[2-8]\\\\d{8}|[28]\\\\d{7}\",[6,8,9,10,11,12,13],[[\"(\\\\d)(\\\\d{5})\",\"$1 $2\",[\"2\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"(0$1)\"],[\"(\\\\d{4})(\\\\d{4,6})\",\"$1 $2\",[\"3(?:23|39|46)|4(?:2[3-6]|[35]9|4[26]|76)|544|88[245]|(?:52|64|86)2\",\"3(?:230|397|461)|4(?:2(?:35|[46]4|51)|396|4(?:22|63)|59[347]|76[15])|5(?:221|446)|642[23]|8(?:622|8(?:[24]2|5[13]))\"],\"(0$1)\"],[\"(\\\\d{5})(\\\\d{4})\",\"$1 $2\",[\"346|4(?:27|9[35])|883\",\"3469|4(?:279|9(?:30|56))|8834\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[3-7]|8[2-8]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{4})(\\\\d{1,2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"1\"]]],\"0\",0,0,0,0,0,[0,[\"(?:81[37]|9(?:0[5-9]|1[0-24-9]|2[0-35-9]|[35]\\\\d|4[235-9]|6[0-25-8]|7[1-9]|8[19]|9[4-9]))\\\\d{7}\",[10]]]],\"PK\":[\"92\",\"00\",\"122\\\\d{6}|[24-8]\\\\d{10,11}|9(?:[013-9]\\\\d{8,10}|2(?:[01]\\\\d\\\\d|2(?:[06-8]\\\\d|1[01]))\\\\d{7})|(?:[2-8]\\\\d{3}|92(?:[0-7]\\\\d|8[1-9]))\\\\d{6}|[24-9]\\\\d{8}|[89]\\\\d{7}\",[8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3\",[\"[89]0\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"1\"]],[\"(\\\\d{3})(\\\\d{6,7})\",\"$1 $2\",[\"2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:2[2-8]|3[27-9]|4[2-6]|6[3569]|9[25-8])\",\"9(?:2[3-8]|98)|(?:2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:22|3[27-9]|4[2-6]|6[3569]|9[25-7]))[2-9]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{7,8})\",\"$1 $2\",[\"(?:2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91)[2-9]\"],\"(0$1)\"],[\"(\\\\d{5})(\\\\d{5})\",\"$1 $2\",[\"58\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"3\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"[24-9]\"],\"(0$1)\"]],\"0\",0,0,0,0,0,[0,[\"3(?:[014]\\\\d|2[0-5]|3[0-7]|55|64)\\\\d{7}\",[10]]]],\"PL\":[\"48\",\"00\",\"[1-57-9]\\\\d{6}(?:\\\\d{2})?|6\\\\d{5,8}\",[6,7,8,9],[[\"(\\\\d{5})\",\"$1\",[\"19\"]],[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"11|64\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])1\",\"(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])19\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"64\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"39|45|5[0137]|6[0469]|7[02389]|8[08]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"1[2-8]|[2-8]|9[145]\"]]],0,0,0,0,0,0,[0,[\"(?:45|5[0137]|6[069]|7[2389]|88)\\\\d{7}\",[9]]]],\"PM\":[\"508\",\"00\",\"[45]\\\\d{5}\",[6],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[45]\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"(?:4[02-4]|5[05])\\\\d{4}\"]]],\"PR\":[\"1\",\"011\",\"(?:[589]\\\\d\\\\d|787)\\\\d{7}\",[10],0,\"1\",0,0,0,0,\"787|939\",[[\"(?:787|939)[2-9]\\\\d{6}\"],[\"(?:787|939)[2-9]\\\\d{6}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"PS\":[\"970\",\"00\",\"[2489]2\\\\d{6}|(?:1\\\\d|5)\\\\d{8}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2489]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"5\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]]],\"0\",0,0,0,0,0,[0,[\"5[69]\\\\d{7}\",[9]]]],\"PT\":[\"351\",\"00\",\"(?:[26-9]\\\\d|30)\\\\d{7}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2[12]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[236-9]\"]]],0,0,0,0,0,0,[0,[\"6[356]9230\\\\d{3}|(?:6[036]93|9(?:[1-36]\\\\d\\\\d|480))\\\\d{5}\"]]],\"PW\":[\"680\",\"01[12]\",\"(?:[24-8]\\\\d\\\\d|345|900)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-9]\"]]],0,0,0,0,0,0,[0,[\"(?:45[0-5]|6[2-4689]0|77\\\\d|88[0-4])\\\\d{4}\"]]],\"PY\":[\"595\",\"00\",\"59\\\\d{4,6}|(?:[2-46-9]\\\\d|5[0-8])\\\\d{4,7}\",[6,7,8,9],[[\"(\\\\d{3})(\\\\d{3,6})\",\"$1 $2\",[\"[2-9]0\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"[26]1|3[289]|4[1246-8]|7[1-3]|8[1-36]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{4,5})\",\"$1 $2\",[\"2[279]|3[13-5]|4[359]|5|6(?:[34]|7[1-46-8])|7[46-8]|85\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2[14-68]|3[26-9]|4[1246-8]|6(?:1|75)|7[1-35]|8[1-36]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"87\"]],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-8]\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"9(?:51|6[129]|[78][1-6]|9[1-5])\\\\d{6}\",[9]]]],\"QA\":[\"974\",\"00\",\"[2-7]\\\\d{7}|(?:2\\\\d\\\\d|800)\\\\d{4}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"2[126]|8\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-7]\"]]],0,0,0,0,0,0,[0,[\"(?:28|[35-7]\\\\d)\\\\d{6}\",[8]]]],\"RE\":[\"262\",\"00\",\"9769\\\\d{5}|(?:26|[68]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2689]\"],\"0$1\"]],\"0\",0,0,0,0,\"26[23]|69|[89]\",[[\"26(?:2\\\\d\\\\d|30[01])\\\\d{4}\"],[\"(?:69(?:2\\\\d\\\\d|3(?:0[0-46]|1[013]|2[0-2]|3[0-39]|4\\\\d|5[05]|6[0-26]|7[0-27]|8[0-8]|9[0-479]))|9769\\\\d)\\\\d{4}\"],[\"80\\\\d{7}\"],[\"89[1-37-9]\\\\d{6}\"],0,0,0,0,0,[\"8(?:1[019]|2[0156]|84|90)\\\\d{6}\"]]],\"RO\":[\"40\",\"00\",\"(?:[237]\\\\d|[89]0)\\\\d{7}|[23]\\\\d{5}\",[6,9],[[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"2[3-6]\",\"2[3-6]\\\\d9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"219|31\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[23]1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[237-9]\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"7[01]20\\\\d{5}|7(?:0[013-9]|1[01]|[2-7]\\\\d|8[03-8]|9[09])\\\\d{6}\",[9]]],0,\" int \"],\"RS\":[\"381\",\"00\",\"38[02-9]\\\\d{6,9}|6\\\\d{7,9}|90\\\\d{4,8}|38\\\\d{5,6}|(?:7\\\\d\\\\d|800)\\\\d{3,9}|(?:[12]\\\\d|3[0-79])\\\\d{5,10}\",[6,7,8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{3,9})\",\"$1 $2\",[\"(?:2[389]|39)0|[7-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5,10})\",\"$1 $2\",[\"[1-36]\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"6(?:[0-689]|7\\\\d)\\\\d{6,7}\",[8,9,10]]]],\"RU\":[\"7\",\"810\",\"[347-9]\\\\d{9}\",[10],[[\"(\\\\d{4})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"7(?:1[0-8]|2[1-9])\",\"7(?:1(?:[0-6]2|7|8[27])|2(?:1[23]|[2-9]2))\",\"7(?:1(?:[0-6]2|7|8[27])|2(?:13[03-69]|62[013-9]))|72[1-57-9]2\"],\"8 ($1)\",1],[\"(\\\\d{5})(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"7(?:1[0-68]|2[1-9])\",\"7(?:1(?:[06][3-6]|[18]|2[35]|[3-5][3-5])|2(?:[13][3-5]|[24-689]|7[457]))\",\"7(?:1(?:0(?:[356]|4[023])|[18]|2(?:3[013-9]|5)|3[45]|43[013-79]|5(?:3[1-8]|4[1-7]|5)|6(?:3[0-35-9]|[4-6]))|2(?:1(?:3[178]|[45])|[24-689]|3[35]|7[457]))|7(?:14|23)4[0-8]|71(?:33|45)[1-79]\"],\"8 ($1)\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"8 ($1)\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"[3489]\"],\"8 ($1)\",1]],\"8\",0,0,0,0,\"3[04-689]|[489]\",[[\"(?:3(?:0[12]|4[1-35-79]|5[1-3]|65|8[1-58]|9[0145])|4(?:01|1[1356]|2[13467]|7[1-5]|8[1-7]|9[1-689])|8(?:1[1-8]|2[01]|3[13-6]|4[0-8]|5[15]|6[1-35-79]|7[1-37-9]))\\\\d{7}\"],[\"9\\\\d{9}\"],[\"80[04]\\\\d{7}\"],[\"80[39]\\\\d{7}\"],[\"808\\\\d{7}\"]],\"8~10\"],\"RW\":[\"250\",\"00\",\"(?:06|[27]\\\\d\\\\d|[89]00)\\\\d{6}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"0\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[7-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"]]],\"0\",0,0,0,0,0,[0,[\"7[238]\\\\d{7}\",[9]]]],\"SA\":[\"966\",\"00\",\"92\\\\d{7}|(?:[15]|8\\\\d)\\\\d{8}\",[9,10],[[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"9\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"5\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"81\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]]],\"0\",0,0,0,0,0,[0,[\"5(?:[013-689]\\\\d|7[0-36-8])\\\\d{6}\",[9]]]],\"SB\":[\"677\",\"0[01]\",\"(?:[1-6]|[7-9]\\\\d\\\\d)\\\\d{4}\",[5,7],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"7|8[4-9]|9(?:[1-8]|9[0-8])\"]]],0,0,0,0,0,0,[0,[\"48\\\\d{3}|(?:(?:7[1-9]|8[4-9])\\\\d|9(?:1[2-9]|2[013-9]|3[0-2]|[46]\\\\d|5[0-46-9]|7[0-689]|8[0-79]|9[0-8]))\\\\d{4}\"]]],\"SC\":[\"248\",\"010|0[0-2]\",\"8000\\\\d{3}|(?:[249]\\\\d|64)\\\\d{5}\",[7],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[246]|9[57]\"]]],0,0,0,0,0,0,[0,[\"2[5-8]\\\\d{5}\"]],\"00\"],\"SD\":[\"249\",\"00\",\"[19]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[19]\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"(?:1[0-2]|9[0-3569])\\\\d{7}\"]]],\"SE\":[\"46\",\"00\",\"(?:[26]\\\\d\\\\d|9)\\\\d{9}|[1-9]\\\\d{8}|[1-689]\\\\d{7}|[1-4689]\\\\d{6}|2\\\\d{5}\",[6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{2,3})(\\\\d{2})\",\"$1-$2 $3\",[\"20\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"9(?:00|39|44)\"],\"0$1\",0,\"$1 $2\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})\",\"$1-$2 $3\",[\"[12][136]|3[356]|4[0246]|6[03]|90[1-9]\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d)(\\\\d{2,3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"8\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2,3})(\\\\d{2})\",\"$1-$2 $3\",[\"1[2457]|2(?:[247-9]|5[0138])|3[0247-9]|4[1357-9]|5[0-35-9]|6(?:[125689]|4[02-57]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d{3})(\\\\d{2,3})(\\\\d{3})\",\"$1-$2 $3\",[\"9(?:00|39|44)\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d{2})(\\\\d{2,3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"1[13689]|2[0136]|3[1356]|4[0246]|54|6[03]|90[1-9]\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"10|7\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"8\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"[13-5]|2(?:[247-9]|5[0138])|6(?:[124-689]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1-$2 $3 $4\",[\"9\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4 $5\",[\"[26]\"],\"0$1\",0,\"$1 $2 $3 $4 $5\"]],\"0\",0,0,0,0,0,[0,[\"7[02369]\\\\d{7}\",[9]]]],\"SG\":[\"65\",\"0[0-3]\\\\d\",\"(?:(?:1\\\\d|8)\\\\d\\\\d|7000)\\\\d{7}|[3689]\\\\d{7}\",[8,10,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[369]|8[1-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{4})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"7\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]]],0,0,0,0,0,0,[0,[\"(?:8(?:[1-8]\\\\d\\\\d|9(?:[014]\\\\d|2[1-9]|3[0-489]))|9[0-8]\\\\d\\\\d)\\\\d{4}\",[8]]]],\"SH\":[\"290\",\"00\",\"(?:[256]\\\\d|8)\\\\d{3}\",[4,5],0,0,0,0,0,0,\"[256]\",[[\"2(?:[0-57-9]\\\\d|6[4-9])\\\\d\\\\d\"],[\"[56]\\\\d{4}\",[5]],0,0,0,0,0,0,[\"262\\\\d\\\\d\",[5]]]],\"SI\":[\"386\",\"00|10(?:22|66|88|99)\",\"[1-7]\\\\d{7}|8\\\\d{4,7}|90\\\\d{4,6}\",[5,6,7,8],[[\"(\\\\d{2})(\\\\d{3,6})\",\"$1 $2\",[\"8[09]|9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"59|8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[37][01]|4[0139]|51|6\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[1-57]\"],\"(0$1)\"]],\"0\",0,0,0,0,0,[0,[\"65(?:1\\\\d|55|[67]0)\\\\d{4}|(?:[37][01]|4[0139]|51|6[489])\\\\d{6}\",[8]]],\"00\"],\"SJ\":[\"47\",\"00\",\"0\\\\d{4}|(?:[4589]\\\\d|79)\\\\d{6}\",[5,8],0,0,0,0,0,0,\"79\",[[\"79\\\\d{6}\",[8]],[\"(?:4[015-8]|5[89]|9\\\\d)\\\\d{6}\",[8]],[\"80[01]\\\\d{5}\",[8]],[\"82[09]\\\\d{5}\",[8]],[\"880\\\\d{5}\",[8]],0,[\"(?:0[2-9]|81(?:0(?:0[7-9]|1\\\\d)|5\\\\d\\\\d))\\\\d{3}\"],0,[\"85[0-5]\\\\d{5}\",[8]],[\"810(?:0[0-6]|[2-8]\\\\d)\\\\d{3}\",[8]]]],\"SK\":[\"421\",\"00\",\"[2-689]\\\\d{8}|[2-59]\\\\d{6}|[2-5]\\\\d{5}\",[6,7,9],[[\"(\\\\d)(\\\\d{2})(\\\\d{3,4})\",\"$1 $2 $3\",[\"21\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"[3-5][1-8]1\",\"[3-5][1-8]1[67]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1/$2 $3 $4\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[689]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1/$2 $3 $4\",[\"[3-5]\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"909[1-9]\\\\d{5}|9(?:0[1-8]|1[0-24-9]|4[03-57-9]|5\\\\d)\\\\d{6}\",[9]]]],\"SL\":[\"232\",\"00\",\"(?:[2378]\\\\d|66|99)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[236-9]\"],\"(0$1)\"]],\"0\",0,0,0,0,0,[0,[\"(?:25|3[013-5]|66|7[5-9]|8[08]|99)\\\\d{6}\"]]],\"SM\":[\"378\",\"00\",\"(?:0549|[5-7]\\\\d)\\\\d{6}\",[8,10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-7]\"]],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"0\"]]],0,0,\"([89]\\\\d{5})$\",\"0549$1\",0,0,[0,[\"6[16]\\\\d{6}\",[8]]]],\"SN\":[\"221\",\"00\",\"(?:[378]\\\\d{4}|93330)\\\\d{4}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[379]\"]]],0,0,0,0,0,0,[0,[\"7(?:[06-8]\\\\d|21|90)\\\\d{6}\"]]],\"SO\":[\"252\",\"00\",\"[346-9]\\\\d{8}|[12679]\\\\d{7}|[1-5]\\\\d{6}|[1348]\\\\d{5}\",[6,7,8,9],[[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"8[125]\"]],[\"(\\\\d{6})\",\"$1\",[\"[134]\"]],[\"(\\\\d)(\\\\d{6})\",\"$1 $2\",[\"[15]|2[0-79]|3[0-46-8]|4[0-7]\"]],[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"24|[67]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[3478]|64|90\"]],[\"(\\\\d{2})(\\\\d{5,7})\",\"$1 $2\",[\"1|28|6[1-35-9]|9[2-9]\"]]],\"0\",0,0,0,0,0,[0,[\"28\\\\d{5}|(?:6[1-9]|79)\\\\d{6,7}|(?:15|24|(?:3[59]|4[89]|8[08])\\\\d|60|7[1-8]|9(?:0\\\\d|[2-9]))\\\\d{6}\",[7,8,9]]]],\"SR\":[\"597\",\"00\",\"(?:[2-5]|68|[78]\\\\d)\\\\d{5}\",[6,7],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1-$2-$3\",[\"56\"]],[\"(\\\\d{3})(\\\\d{3})\",\"$1-$2\",[\"[2-5]\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[6-8]\"]]],0,0,0,0,0,0,[0,[\"(?:7[124-7]|8[125-9])\\\\d{5}\",[7]]]],\"SS\":[\"211\",\"00\",\"[19]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[19]\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"(?:12|9[1257])\\\\d{7}\"]]],\"ST\":[\"239\",\"00\",\"(?:22|9\\\\d)\\\\d{5}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[29]\"]]],0,0,0,0,0,0,[0,[\"900[5-9]\\\\d{3}|9(?:0[1-9]|[89]\\\\d)\\\\d{4}\"]]],\"SV\":[\"503\",\"00\",\"[267]\\\\d{7}|[89]00\\\\d{4}(?:\\\\d{4})?\",[7,8,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[89]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[267]\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"]]],0,0,0,0,0,0,[0,[\"[67]\\\\d{7}\",[8]]]],\"SX\":[\"1\",\"011\",\"7215\\\\d{6}|(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|(5\\\\d{6})$\",\"721$1\",0,\"721\",[[\"7215(?:4[2-8]|8[239]|9[056])\\\\d{4}\"],[\"7215(?:1[02]|2\\\\d|5[034679]|8[014-8])\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"SY\":[\"963\",\"00\",\"[1-39]\\\\d{8}|[1-5]\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-5]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\",1]],\"0\",0,0,0,0,0,[0,[\"9(?:22|[3-589]\\\\d|6[024-9])\\\\d{6}\",[9]]]],\"SZ\":[\"268\",\"00\",\"0800\\\\d{4}|(?:[237]\\\\d|900)\\\\d{6}\",[8,9],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[0237]\"]],[\"(\\\\d{5})(\\\\d{4})\",\"$1 $2\",[\"9\"]]],0,0,0,0,0,0,[0,[\"7[6-9]\\\\d{6}\",[8]]]],\"TA\":[\"290\",\"00\",\"8\\\\d{3}\",[4],0,0,0,0,0,0,\"8\",[[\"8\\\\d{3}\"]]],\"TC\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|649|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-479]\\\\d{6})$\",\"649$1\",0,\"649\",[[\"649(?:712|9(?:4\\\\d|50))\\\\d{4}\"],[\"649(?:2(?:3[129]|4[1-7])|3(?:3[1-389]|4[1-8])|4[34][1-3])\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"],0,0,0,[\"64971[01]\\\\d{4}\"]]],\"TD\":[\"235\",\"00|16\",\"(?:22|[69]\\\\d|77)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2679]\"]]],0,0,0,0,0,0,[0,[\"(?:6[023568]|77|9\\\\d)\\\\d{6}\"]],\"00\"],\"TG\":[\"228\",\"00\",\"[279]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[279]\"]]],0,0,0,0,0,0,[0,[\"(?:7[09]|9[0-36-9])\\\\d{6}\"]]],\"TH\":[\"66\",\"00[1-9]\",\"1\\\\d{8,9}|(?:[2-57]|[689]\\\\d)\\\\d{7}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"14|[3-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]]],\"0\",0,0,0,0,0,[0,[\"(?:14|6[1-6]|[89]\\\\d)\\\\d{7}\",[9]]]],\"TJ\":[\"992\",\"810\",\"(?:00|11|[3-579]\\\\d|88)\\\\d{7}\",[9],[[\"(\\\\d{6})(\\\\d)(\\\\d{2})\",\"$1 $2 $3\",[\"331\",\"3317\"],0,1],[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[34]7|91[78]\"],0,1],[\"(\\\\d{4})(\\\\d)(\\\\d{4})\",\"$1 $2 $3\",[\"3\"],0,1],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[0457-9]|11\"],0,1]],\"8\",0,0,0,0,0,[0,[\"41[18]\\\\d{6}|(?:00|11|5[05]|7[07]|88|9\\\\d)\\\\d{7}\"]],\"8~10\"],\"TK\":[\"690\",\"00\",\"[2-47]\\\\d{3,6}\",[4,5,6,7],0,0,0,0,0,0,0,[0,[\"7[2-4]\\\\d{2,5}\"]]],\"TL\":[\"670\",\"00\",\"7\\\\d{7}|(?:[2-47]\\\\d|[89]0)\\\\d{5}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-489]|70\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"7\"]]],0,0,0,0,0,0,[0,[\"7[2-8]\\\\d{6}\",[8]]]],\"TM\":[\"993\",\"810\",\"[1-6]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"12\"],\"(8 $1)\"],[\"(\\\\d{3})(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"[1-5]\"],\"(8 $1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"6\"],\"8 $1\"]],\"8\",0,0,0,0,0,[0,[\"6\\\\d{7}\"]],\"8~10\"],\"TN\":[\"216\",\"00\",\"[2-57-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-57-9]\"]]],0,0,0,0,0,0,[0,[\"3(?:001|[12]40)\\\\d{4}|(?:(?:[259]\\\\d|4[0-6])\\\\d|3(?:1[1-35]|6[0-4]|91))\\\\d{5}\"]]],\"TO\":[\"676\",\"00\",\"(?:0800|[5-8]\\\\d{3})\\\\d{3}|[2-8]\\\\d{4}\",[5,7],[[\"(\\\\d{2})(\\\\d{3})\",\"$1-$2\",[\"[2-4]|50|6[09]|7[0-24-69]|8[05]\"]],[\"(\\\\d{4})(\\\\d{3})\",\"$1 $2\",[\"0\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[5-8]\"]]],0,0,0,0,0,0,[0,[\"6(?:3[02]|8[5-9])\\\\d{4}|(?:6[09]|7\\\\d|8[46-9])\\\\d{5}\",[7]]]],\"TR\":[\"90\",\"00\",\"(?:4|8\\\\d{5})\\\\d{6}|(?:[2-58]\\\\d\\\\d|900)\\\\d{7}\",[7,10,12],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"512|8[0589]|90\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"5(?:[0-59]|61)\",\"5(?:[0-59]|616)\",\"5(?:[0-59]|6161)\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[24][1-8]|3[1-9]\"],\"(0$1)\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{6})\",\"$1 $2 $3\",[\"80\"],\"0$1\",1]],\"0\",0,0,0,0,0,[0,[\"56161\\\\d{5}|5(?:0[15-7]|1[06]|24|[34]\\\\d|5[1-59]|9[46])\\\\d{7}\",[10]]]],\"TT\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-46-8]\\\\d{6})$\",\"868$1\",0,\"868\",[[\"868(?:2(?:01|1[89]|[23]\\\\d|4[0-2])|6(?:0[7-9]|1[02-8]|2[1-9]|[3-69]\\\\d|7[0-79])|82[124])\\\\d{4}\"],[\"868(?:2(?:6[346-9]|[7-9]\\\\d)|[37](?:0[1-9]|1[02-9]|[2-9]\\\\d)|4[6-9]\\\\d|6(?:20|78|8\\\\d))\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"TV\":[\"688\",\"00\",\"(?:2|7\\\\d\\\\d|90)\\\\d{4}\",[5,6,7],[[\"(\\\\d{2})(\\\\d{3})\",\"$1 $2\",[\"2\"]],[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"90\"]],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"7\"]]],0,0,0,0,0,0,[0,[\"(?:7[01]\\\\d|90)\\\\d{4}\",[6,7]]]],\"TW\":[\"886\",\"0(?:0[25-79]|19)\",\"[2-689]\\\\d{8}|7\\\\d{9,10}|[2-8]\\\\d{7}|2\\\\d{6}\",[7,8,9,10,11],[[\"(\\\\d{2})(\\\\d)(\\\\d{4})\",\"$1 $2 $3\",[\"202\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[258]0\"],\"0$1\"],[\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"[23568]|4(?:0[02-48]|[1-47-9])|7[1-9]\",\"[23568]|4(?:0[2-48]|[1-47-9])|(?:400|7)[1-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[49]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4,5})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"(?:40001[0-2]|9[0-8]\\\\d{4})\\\\d{3}\",[9]]],0,\"#\"],\"TZ\":[\"255\",\"00[056]\",\"(?:[26-8]\\\\d|41|90)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[24]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[67]\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"(?:6[2-9]|7[13-9])\\\\d{7}\"]]],\"UA\":[\"380\",\"00\",\"[89]\\\\d{9}|[3-9]\\\\d{8}\",[9,10],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6[12][29]|(?:3[1-8]|4[136-8]|5[12457]|6[49])2|(?:56|65)[24]\",\"6[12][29]|(?:35|4[1378]|5[12457]|6[49])2|(?:56|65)[24]|(?:3[1-46-8]|46)2[013-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"4[45][0-5]|5(?:0|6[37])|6(?:[12][018]|[36-8])|7|89|9[1-9]|(?:48|57)[0137-9]\",\"4[45][0-5]|5(?:0|6(?:3[14-7]|7))|6(?:[12][018]|[36-8])|7|89|9[1-9]|(?:48|57)[0137-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"[3-6]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"(?:50|6[36-8]|7[1-3]|9[1-9])\\\\d{7}\",[9]]],\"0~0\"],\"UG\":[\"256\",\"00[057]\",\"800\\\\d{6}|(?:[29]0|[347]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"202\",\"2024\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"[27-9]|4(?:6[45]|[7-9])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"[34]\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"7260\\\\d{5}|7(?:[0157-9]\\\\d|20|36|4[0-4])\\\\d{6}\"]]],\"US\":[\"1\",\"011\",\"[2-9]\\\\d{9}\",[10],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"($1) $2-$3\",[\"[2-9]\"],0,1,\"$1-$2-$3\"]],\"1\",0,0,0,0,0,[[\"(?:2(?:0[1-35-9]|1[02-9]|2[03-589]|3[149]|4[08]|5[1-46]|6[0279]|7[0269]|8[13])|3(?:0[1-57-9]|1[02-9]|2[0135]|3[0-24679]|4[167]|5[12]|6[014]|8[056])|4(?:0[124-9]|1[02-579]|2[3-5]|3[0245]|4[0235]|58|6[39]|7[0589]|8[04])|5(?:0[1-57-9]|1[0235-8]|20|3[0149]|4[01]|5[19]|6[1-47]|7[013-5]|8[056])|6(?:0[1-35-9]|1[024-9]|2[03689]|[34][016]|5[0179]|6[0-279]|78|8[0-29])|7(?:0[1-46-8]|1[2-9]|2[04-7]|3[1247]|4[037]|5[47]|6[02359]|7[02-59]|8[156])|8(?:0[1-68]|1[02-8]|2[08]|3[0-28]|4[3578]|5[046-9]|6[02-5]|7[028])|9(?:0[1346-9]|1[02-9]|2[0589]|3[0146-8]|4[0179]|5[12469]|7[0-389]|8[04-69]))[2-9]\\\\d{6}\"],[\"(?:2(?:0[1-35-9]|1[02-9]|2[03-589]|3[149]|4[08]|5[1-46]|6[0279]|7[0269]|8[13])|3(?:0[1-57-9]|1[02-9]|2[0135]|3[0-24679]|4[167]|5[12]|6[014]|8[056])|4(?:0[124-9]|1[02-579]|2[3-5]|3[0245]|4[0235]|58|6[39]|7[0589]|8[04])|5(?:0[1-57-9]|1[0235-8]|20|3[0149]|4[01]|5[19]|6[1-47]|7[013-5]|8[056])|6(?:0[1-35-9]|1[024-9]|2[03689]|[34][016]|5[0179]|6[0-279]|78|8[0-29])|7(?:0[1-46-8]|1[2-9]|2[04-7]|3[1247]|4[037]|5[47]|6[02359]|7[02-59]|8[156])|8(?:0[1-68]|1[02-8]|2[08]|3[0-28]|4[3578]|5[046-9]|6[02-5]|7[028])|9(?:0[1346-9]|1[02-9]|2[0589]|3[0146-8]|4[0179]|5[12469]|7[0-389]|8[04-69]))[2-9]\\\\d{6}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"],0,[\"710[2-9]\\\\d{6}\"]]],\"UY\":[\"598\",\"0(?:0|1[3-9]\\\\d)\",\"(?:[249]\\\\d\\\\d|80)\\\\d{5}|9\\\\d{6}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"8|90\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[24]\"]]],\"0\",0,0,0,0,0,[0,[\"9[1-9]\\\\d{6}\",[8]]],\"00\",\" int. \"],\"UZ\":[\"998\",\"810\",\"[679]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[679]\"],\"8 $1\"]],\"8\",0,0,0,0,0,[0,[\"(?:6(?:1(?:2(?:2[01]|98)|35[0-4]|50\\\\d|61[23]|7(?:[01][017]|4\\\\d|55|9[5-9]))|2(?:(?:11|7\\\\d)\\\\d|2(?:[12]1|9[01379])|5(?:[126]\\\\d|3[0-4]))|5(?:19[01]|2(?:27|9[26])|(?:30|59|7\\\\d)\\\\d)|6(?:2(?:1[5-9]|2[0367]|38|41|52|60)|(?:3[79]|9[0-3])\\\\d|4(?:56|83)|7(?:[07]\\\\d|1[017]|3[07]|4[047]|5[057]|67|8[0178]|9[79]))|7(?:2(?:24|3[237]|4[5-9]|7[15-8])|5(?:7[12]|8[0589])|7(?:0\\\\d|[39][07])|9(?:0\\\\d|7[079]))|9(?:2(?:1[1267]|3[01]|5\\\\d|7[0-4])|(?:5[67]|7\\\\d)\\\\d|6(?:2[0-26]|8\\\\d)))|7(?:0\\\\d{3}|1(?:13[01]|6(?:0[47]|1[67]|66)|71[3-69]|98\\\\d)|2(?:2(?:2[79]|95)|3(?:2[5-9]|6[0-6])|57\\\\d|7(?:0\\\\d|1[17]|2[27]|3[37]|44|5[057]|66|88))|3(?:2(?:1[0-6]|21|3[469]|7[159])|(?:33|9[4-6])\\\\d|5(?:0[0-4]|5[579]|9\\\\d)|7(?:[0-3579]\\\\d|4[0467]|6[67]|8[078]))|4(?:2(?:29|5[0257]|6[0-7]|7[1-57])|5(?:1[0-4]|8\\\\d|9[5-9])|7(?:0\\\\d|1[024589]|2[0-27]|3[0137]|[46][07]|5[01]|7[5-9]|9[079])|9(?:7[015-9]|[89]\\\\d))|5(?:112|2(?:0\\\\d|2[29]|[49]4)|3[1568]\\\\d|52[6-9]|7(?:0[01578]|1[017]|[23]7|4[047]|[5-7]\\\\d|8[78]|9[079]))|6(?:2(?:2[1245]|4[2-4])|39\\\\d|41[179]|5(?:[349]\\\\d|5[0-2])|7(?:0[017]|[13]\\\\d|22|44|55|67|88))|9(?:22[128]|3(?:2[0-4]|7\\\\d)|57[02569]|7(?:2[05-9]|3[37]|4\\\\d|60|7[2579]|87|9[07])))|9[0-57-9]\\\\d{3})\\\\d{4}\"]],\"8~10\"],\"VA\":[\"39\",\"00\",\"0\\\\d{5,10}|3[0-8]\\\\d{7,10}|55\\\\d{8}|8\\\\d{5}(?:\\\\d{2,4})?|(?:1\\\\d|39)\\\\d{7,8}\",[6,7,8,9,10,11],0,0,0,0,0,0,\"06698\",[[\"06698\\\\d{1,6}\"],[\"3[1-9]\\\\d{8}|3[2-9]\\\\d{7}\",[9,10]],[\"80(?:0\\\\d{3}|3)\\\\d{3}\",[6,9]],[\"(?:0878\\\\d\\\\d|89(?:2|4[5-9]\\\\d))\\\\d{3}|89[45][0-4]\\\\d\\\\d|(?:1(?:44|6[346])|89(?:5[5-9]|9))\\\\d{6}\",[6,8,9,10]],[\"1(?:78\\\\d|99)\\\\d{6}\",[9,10]],0,0,0,[\"55\\\\d{8}\",[10]],[\"84(?:[08]\\\\d{3}|[17])\\\\d{3}\",[6,9]]]],\"VC\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|784|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-7]\\\\d{6})$\",\"784$1\",0,\"784\",[[\"784(?:266|3(?:6[6-9]|7\\\\d|8[0-24-6])|4(?:38|5[0-36-8]|8[0-8])|5(?:55|7[0-2]|93)|638|784)\\\\d{4}\"],[\"784(?:4(?:3[0-5]|5[45]|89|9[0-8])|5(?:2[6-9]|3[0-4]))\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"VE\":[\"58\",\"00\",\"[68]00\\\\d{7}|(?:[24]\\\\d|[59]0)\\\\d{8}\",[10],[[\"(\\\\d{3})(\\\\d{7})\",\"$1-$2\",[\"[24-689]\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"4(?:1[24-8]|2[46])\\\\d{7}\"]]],\"VG\":[\"1\",\"011\",\"(?:284|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-578]\\\\d{6})$\",\"284$1\",0,\"284\",[[\"284496[0-5]\\\\d{3}|284(?:229|4(?:22|9[45])|774|8(?:52|6[459]))\\\\d{4}\"],[\"284496[6-9]\\\\d{3}|284(?:3(?:0[0-3]|4[0-7]|68|9[34])|4(?:4[0-6]|68|99)|54[0-57])\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"VI\":[\"1\",\"011\",\"[58]\\\\d{9}|(?:34|90)0\\\\d{7}\",[10],0,\"1\",0,\"1|([2-9]\\\\d{6})$\",\"340$1\",0,\"340\",[[\"340(?:2(?:0[12]|2[06-8]|4[49]|77)|3(?:32|44)|4(?:22|7[34]|89)|5(?:1[34]|55)|6(?:2[56]|4[23]|77|9[023])|7(?:1[2-57-9]|27|7\\\\d)|884|998)\\\\d{4}\"],[\"340(?:2(?:0[12]|2[06-8]|4[49]|77)|3(?:32|44)|4(?:22|7[34]|89)|5(?:1[34]|55)|6(?:2[56]|4[23]|77|9[023])|7(?:1[2-57-9]|27|7\\\\d)|884|998)\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"VN\":[\"84\",\"00\",\"[12]\\\\d{9}|[135-9]\\\\d{8}|[16]\\\\d{7}|[16-8]\\\\d{6}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"80\"],\"0$1\",1],[\"(\\\\d{4})(\\\\d{4,6})\",\"$1 $2\",[\"1\"],0,1],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[69]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[3578]\"],\"0$1\",1],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2[48]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"],\"0$1\",1]],\"0\",0,0,0,0,0,[0,[\"(?:52[238]|8(?:79|9[689])|99[013-9])\\\\d{6}|(?:3\\\\d|5[689]|7[06-9]|8[1-68]|9[0-8])\\\\d{7}\",[9]]]],\"VU\":[\"678\",\"00\",\"(?:[23]\\\\d|[48]8)\\\\d{3}|(?:[57]\\\\d|90)\\\\d{5}\",[5,7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[579]\"]]],0,0,0,0,0,0,[0,[\"(?:5\\\\d|7[013-7])\\\\d{5}\",[7]]]],\"WF\":[\"681\",\"00\",\"(?:[45]0|68|72|8\\\\d)\\\\d{4}\",[6],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[4-8]\"]]],0,0,0,0,0,0,[0,[\"(?:50|68|72|8[23])\\\\d{4}\"]]],\"WS\":[\"685\",\"0\",\"(?:[2-6]|8\\\\d{5})\\\\d{4}|[78]\\\\d{6}|[68]\\\\d{5}\",[5,6,7,10],[[\"(\\\\d{5})\",\"$1\",[\"[2-5]|6[1-9]\"]],[\"(\\\\d{3})(\\\\d{3,7})\",\"$1 $2\",[\"[68]\"]],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"7\"]]],0,0,0,0,0,0,[0,[\"(?:7[235-7]|8(?:[3-7]|9\\\\d{3}))\\\\d{5}\",[7,10]]]],\"XK\":[\"383\",\"00\",\"[23]\\\\d{7,8}|(?:4\\\\d\\\\d|[89]00)\\\\d{5}\",[8,9],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-4]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[23]\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"4[3-9]\\\\d{6}\",[8]]]],\"YE\":[\"967\",\"00\",\"(?:1|7\\\\d)\\\\d{7}|[1-7]\\\\d{6}\",[7,8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-6]|7[24-68]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"7[0137]\\\\d{7}\",[9]]]],\"YT\":[\"262\",\"00\",\"80\\\\d{7}|(?:26|63)9\\\\d{6}\",[9],0,\"0\",0,0,0,0,\"269|63\",[[\"269(?:0[67]|5[0-2]|6\\\\d|[78]0)\\\\d{4}\"],[\"639(?:0[0-79]|1[019]|[267]\\\\d|3[09]|[45]0|9[04-79])\\\\d{4}\"],[\"80\\\\d{7}\"]]],\"ZA\":[\"27\",\"00\",\"[1-9]\\\\d{8}|8\\\\d{4,7}\",[5,6,7,8,9],[[\"(\\\\d{2})(\\\\d{3,4})\",\"$1 $2\",[\"8[1-4]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\",\"$1 $2 $3\",[\"8[1-4]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"860\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-9]\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"(?:1(?:3492[0-25]|4495[0235]|549(?:20|5[01]))|4[34]492[01])\\\\d{3}|8[1-4]\\\\d{3,7}|(?:2[27]|47|54)4950\\\\d{3}|(?:1(?:049[2-4]|9[12]\\\\d\\\\d)|(?:6\\\\d|7[0-46-9])\\\\d{3}|8(?:5\\\\d{3}|7(?:08[67]|158|28[5-9]|310)))\\\\d{4}|(?:1[6-8]|28|3[2-69]|4[025689]|5[36-8])4920\\\\d{3}|(?:12|[2-5]1)492\\\\d{4}\"]]],\"ZM\":[\"260\",\"00\",\"(?:63|80)0\\\\d{6}|(?:21|[79]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[28]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"[79]\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"(?:7[679]|9[5-8])\\\\d{7}\"]]],\"ZW\":[\"263\",\"00\",\"2(?:[0-57-9]\\\\d{6,8}|6[0-24-9]\\\\d{6,7})|[38]\\\\d{9}|[35-8]\\\\d{8}|[3-6]\\\\d{7}|[1-689]\\\\d{6}|[1-3569]\\\\d{5}|[1356]\\\\d{4}\",[5,6,7,8,9,10],[[\"(\\\\d{3})(\\\\d{3,5})\",\"$1 $2\",[\"2(?:0[45]|2[278]|[49]8)|3(?:[09]8|17)|6(?:[29]8|37|75)|[23][78]|(?:33|5[15]|6[68])[78]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2,4})\",\"$1 $2 $3\",[\"[49]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"80\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"24|8[13-59]|(?:2[05-79]|39|5[45]|6[15-8])2\",\"2(?:02[014]|4|[56]20|[79]2)|392|5(?:42|525)|6(?:[16-8]21|52[013])|8[13-59]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2(?:1[39]|2[0157]|[378]|[56][14])|3(?:12|29)\",\"2(?:1[39]|2[0157]|[378]|[56][14])|3(?:123|29)\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,5})\",\"$1 $2\",[\"1|2(?:0[0-36-9]|12|29|[56])|3(?:1[0-689]|[24-6])|5(?:[0236-9]|1[2-4])|6(?:[013-59]|7[0-46-9])|(?:33|55|6[68])[0-69]|(?:29|3[09]|62)[0-79]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"29[013-9]|39|54\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3,5})\",\"$1 $2\",[\"(?:25|54)8\",\"258|5483\"],\"0$1\"]],\"0\",0,0,0,0,0,[0,[\"7(?:[17]\\\\d|[38][1-9])\\\\d{6}\",[9]]]]},\"nonGeographic\":{\"800\":[\"800\",0,\"\\\\d{8}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\"]],0,0,0,0,0,0,[0,0,[\"\\\\d{8}\"]]],\"808\":[\"808\",0,\"\\\\d{8}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\"]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,0,[\"\\\\d{8}\"]]],\"870\":[\"870\",0,\"[35-7]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[35-7]\"]]],0,0,0,0,0,0,[0,[\"(?:[356]\\\\d|7[6-8])\\\\d{7}\"]]],\"878\":[\"878\",0,\"10\\\\d{10}\",[12],[[\"(\\\\d{2})(\\\\d{5})(\\\\d{5})\",\"$1 $2 $3\",[\"1\"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,[\"10\\\\d{10}\"]]],\"881\":[\"881\",0,\"[67]\\\\d{8}\",[9],[[\"(\\\\d)(\\\\d{3})(\\\\d{5})\",\"$1 $2 $3\",[\"[67]\"]]],0,0,0,0,0,0,[0,[\"[67]\\\\d{8}\"]]],\"882\":[\"882\",0,\"1\\\\d{6,11}|3\\\\d{6}(?:\\\\d{2,5})?\",[7,8,9,10,11,12],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"16|342\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"3[23]\"]],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"34[57]\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"34\"]],[\"(\\\\d{2})(\\\\d{4,5})(\\\\d{5})\",\"$1 $2 $3\",[\"[13]\"]]],0,0,0,0,0,0,[0,[\"3(?:37\\\\d\\\\d|42)\\\\d{4}|3(?:2|47|7\\\\d{3})\\\\d{7}\",[7,9,10,12]],0,0,0,0,0,0,[\"1(?:3(?:0[0347]|[13][0139]|2[035]|4[013568]|6[0459]|7[06]|8[15-8]|9[0689])\\\\d{4}|6\\\\d{5,10})|3(?:45|9\\\\d{3})\\\\d{7}\"]]],\"883\":[\"883\",0,\"51\\\\d{7}(?:\\\\d{3})?\",[9,12],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"510\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"510\"]],[\"(\\\\d{4})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"5\"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,[\"51[013]0\\\\d{8}|5100\\\\d{5}\"]]],\"888\":[\"888\",0,\"\\\\d{11}\",[11],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{5})\",\"$1 $2 $3\"]],0,0,0,0,0,0,[0,0,0,0,0,0,[\"\\\\d{11}\"]]],\"979\":[\"979\",0,\"\\\\d{9}\",[9],[[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\"]],0,0,0,0,0,0,[0,0,0,[\"\\\\d{9}\"]]]}}","// Importing from `.json.js` a workaround for a bug in web browsers' \"native\"\r\n// ES6 importing system which is uncapable of importing \"*.json\" files.\r\n// https://github.com/catamphetamine/libphonenumber-js/issues/239\r\nimport metadata from '../metadata.mobile.json.js'\r\n\r\nimport {\r\n\tparsePhoneNumber as _parsePhoneNumber,\r\n\tparsePhoneNumberFromString as _parsePhoneNumberFromString,\r\n\r\n\tfindNumbers as _findNumbers,\r\n\tsearchNumbers as _searchNumbers,\r\n\tfindPhoneNumbersInText as _findPhoneNumbersInText,\r\n\tsearchPhoneNumbersInText as _searchPhoneNumbersInText,\r\n\tPhoneNumberMatcher as _PhoneNumberMatcher,\r\n\r\n\tAsYouType as _AsYouType,\r\n\r\n\tisSupportedCountry as _isSupportedCountry,\r\n\tgetCountries as _getCountries,\r\n\tgetCountryCallingCode as _getCountryCallingCode,\r\n\tgetExtPrefix as _getExtPrefix,\r\n\r\n\tgetExampleNumber as _getExampleNumber,\r\n\r\n\tformatIncompletePhoneNumber as _formatIncompletePhoneNumber,\r\n\tparseIncompletePhoneNumber,\r\n\tparsePhoneNumberCharacter,\r\n\tparseDigits,\r\n\r\n\tparseRFC3966,\r\n\tformatRFC3966\r\n} from '../core/index'\r\n\r\nexport {\r\n\tParseError,\r\n\r\n\tparseIncompletePhoneNumber,\r\n\tparsePhoneNumberCharacter,\r\n\tparseDigits,\r\n\r\n\tparseRFC3966,\r\n\tformatRFC3966\r\n} from '../core/index'\r\n\r\nfunction call(func, _arguments) {\r\n\tvar args = Array.prototype.slice.call(_arguments)\r\n\targs.push(metadata)\r\n\treturn func.apply(this, args)\r\n}\r\n\r\nexport function parsePhoneNumber() {\r\n\treturn call(_parsePhoneNumber, arguments)\r\n}\r\n\r\nexport function parsePhoneNumberFromString() {\r\n\treturn call(_parsePhoneNumberFromString, arguments)\r\n}\r\n\r\nexport function findNumbers() {\r\n\treturn call(_findNumbers, arguments)\r\n}\r\n\r\nexport function searchNumbers() {\r\n\treturn call(_searchNumbers, arguments)\r\n}\r\n\r\nexport function findPhoneNumbersInText() {\r\n\treturn call(_findPhoneNumbersInText, arguments)\r\n}\r\n\r\nexport function searchPhoneNumbersInText() {\r\n\treturn call(_searchPhoneNumbersInText, arguments)\r\n}\r\n\r\nexport function PhoneNumberMatcher(text, options) {\r\n\treturn _PhoneNumberMatcher.call(this, text, options, metadata)\r\n}\r\nPhoneNumberMatcher.prototype = Object.create(_PhoneNumberMatcher.prototype, {})\r\nPhoneNumberMatcher.prototype.constructor = PhoneNumberMatcher\r\n\r\nexport function AsYouType(country) {\r\n\treturn _AsYouType.call(this, country, metadata)\r\n}\r\nAsYouType.prototype = Object.create(_AsYouType.prototype, {})\r\nAsYouType.prototype.constructor = AsYouType\r\n\r\nexport function isSupportedCountry() {\r\n\treturn call(_isSupportedCountry, arguments)\r\n}\r\n\r\nexport function getCountries() {\r\n\treturn call(_getCountries, arguments)\r\n}\r\n\r\nexport function getCountryCallingCode() {\r\n\treturn call(_getCountryCallingCode, arguments)\r\n}\r\n\r\nexport function getExtPrefix(country) {\r\n\treturn call(_getExtPrefix, arguments)\r\n}\r\n\r\nexport function getExampleNumber() {\r\n\treturn call(_getExampleNumber, arguments)\r\n}\r\n\r\nexport function formatIncompletePhoneNumber() {\r\n\treturn call(_formatIncompletePhoneNumber, arguments)\r\n}"],"sourceRoot":""}