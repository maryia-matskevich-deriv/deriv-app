import { ReadyState } from './readyStates';
declare type Data = Parameters<WebSocket["send"]>[0];
export declare type SockJSManager<Incoming extends Data, Outgoing extends Data> = {
    connect(): void;
    destroy(): void;
    disconnect(): void;
    reconnect(delay?: number): void;
    emit(data: Outgoing): void;
    getReadyState(): ReadyState;
} & {
    on(event: 'connect', handler: () => void): void;
    on(event: 'disconnect', handler: () => void): void;
    on(event: 'heartbeat', handler: () => void): void;
    on(event: 'message', handler: (message: Incoming) => void): void;
    off(event: 'connect', handler: () => void): void;
    off(event: 'disconnect', handler: () => void): void;
    off(event: 'heartbeat', handler: () => void): void;
    off(event: 'message', handler: (message: Incoming) => void): void;
    off(): void;
};
declare const createSockJSManager: <Incoming extends string | ArrayBuffer | SharedArrayBuffer | Blob | ArrayBufferView, Outgoing extends string | ArrayBuffer | SharedArrayBuffer | Blob | ArrayBufferView>(url: string, { query, transports }?: {
    query?: {
        [key: string]: string;
    } | undefined;
    transports?: ("websocket" | "xhr-polling")[] | undefined;
}) => SockJSManager<Incoming, Outgoing>;
export default createSockJSManager;
//# sourceMappingURL=index.d.ts.map