import { SockJSManager } from '@livechat/sockjs-manager';
import { Mitt } from '@livechat/mitt';
import { Request, Response, ResponseError, Push, PushResponse } from './types';
declare type Events<Incoming> = {
    connect: undefined;
    disconnect: undefined;
    heartbeat: undefined;
    message: Incoming;
    connection_unstable: undefined;
    connection_recovered: undefined;
};
declare type Emitter<Incoming, Outgoing> = {
    emit(frame: Outgoing): void;
    on(type: 'connect', handler: () => void): void;
    on(type: 'disconnect', handler: () => void): void;
    on(type: 'message', handler: (message: Incoming) => void): void;
    on(type: 'connection_unstable', handler: () => void): void;
    on(type: 'connection_recovered', handler: () => void): void;
    off(type: 'connect', handler: () => void): void;
    off(type: 'disconnect', handler: () => void): void;
    off(type: 'message', handler: (message: Incoming) => void): void;
    off(type: 'connection_unstable', handler: () => void): void;
    off(type: 'connection_recovered', handler: () => void): void;
    off(): void;
};
export declare type PlatformClient<Incoming, Outgoing> = Omit<SockJSManager<string, string>, 'emit' | 'on' | 'off'> & Emitter<Incoming, Outgoing>;
declare const createPlatformClient: <Incoming extends Response | ResponseError | Push | PushResponse, Outgoing extends Request>(url: string, { query, rescheduleTimeout, transports, emitter, }?: {
    query?: {
        [key: string]: string;
    } | undefined;
    rescheduleTimeout?: number | undefined;
    transports?: ("websocket" | "xhr-polling")[] | undefined;
    emitter?: Mitt<Events<Incoming>> | undefined;
}) => PlatformClient<Incoming, Outgoing>;
export default createPlatformClient;
//# sourceMappingURL=index.d.ts.map