import { toPairs, fromPairs } from '@livechat/data-utils';

var buildQueryString = function buildQueryString(obj) {
  return toPairs(obj).map(function (pair) {
    return pair.map(encodeURIComponent).join('=');
  }).join('&');
};

var decodeQueryString = function decodeQueryString(query) {
  var pairs = query.split('&').map(function (pair) {
    return pair.split('=').map(function (value) {
      return decodeURIComponent(value.replace('+', '%20'));
    });
  });
  var decoded = fromPairs(pairs);
  return decoded;
};

var hostnameRegexp = /(?:[^:]+:\/\/)?([^/\s]+)/;
function getHostname(url) {
  var hostnameMatch = url.match(hostnameRegexp);
  return hostnameMatch && hostnameMatch[1];
}

var originRegexp = /[^:]+:\/\/[^(/|?)\s]+/;

var getOrigin = function getOrigin(url) {
  var domain = url.match(originRegexp);
  return domain && domain[0];
};

var searchRegexp = /.*?\?([^#]+)/;

var getSearch = function getSearch(url) {
  var match = url.match(searchRegexp);
  return match ? "?" + match[1] : '';
};

var trimSearch = function trimSearch(search) {
  return search.replace(/^\?/, '');
};

var getQueryParams = function getQueryParams(url) {
  var search = trimSearch(getSearch(url));
  return decodeQueryString(search ? search : url);
};

var getQueryParam = function getQueryParam(name, url) {
  return getQueryParams(url)[name];
};

var pathnameRegexp = /^(?:https?:)?\/\/[^/]+\/([^?#]+)/;

var getPathname = function getPathname(url) {
  var pathname = url.match(pathnameRegexp);
  return "/" + (pathname && pathname[1] || '');
};

// URL can contain leading C0 control or \u0020 SPACE,
// and any newline or tab are filtered out as if they're not part of the URL.
// https://url.spec.whatwg.org/#url-parsing
// Tab or newline are defined as \r\n\t:
// https://infra.spec.whatwg.org/#ascii-tab-or-newline
// A C0 control is a code point in the range \u0000 NULL to \u001F
// INFORMATION SEPARATOR ONE, inclusive:
// https://infra.spec.whatwg.org/#c0-control-or-space
var intersperseWithTabOrNewline = function intersperseWithTabOrNewline(str) {
  return str.replace(/\w/g, '$&[\\r\\n\\t]*');
};

var unsafeProtocol = new RegExp("^[\0-\x1F]*(" + intersperseWithTabOrNewline('javascript') + "|" + intersperseWithTabOrNewline('data') + "):", 'i'); // would be better to filter safe things
// but people might paste in protocolless URLs
// and we would filter them out

var hasUnsafeProtocol = function hasUnsafeProtocol(url) {
  return unsafeProtocol.test(url);
};

var protocolRegexp = /^((http(s)?:)?\/\/)/;

var removeProtocol = function removeProtocol(url) {
  return url.replace(protocolRegexp, '');
};

var protocolRegexp$1 = /^((http(s)?:)?\/\/)/;

var getProtocol = function getProtocol(url) {
  var match = url.match(protocolRegexp$1);
  return match ? match[2] : null;
};

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var extendURLByQueryParams = function extendURLByQueryParams(url, params) {
  if (Object.keys(params).length === 0) {
    return url;
  }

  var urlOrigin = getOrigin(url);
  var originalParams = getSearch(url) ? getQueryParams(url) : {};
  var extendParams = buildQueryString(_extends({}, originalParams, params));
  return urlOrigin + "?" + extendParams;
};

export { buildQueryString, decodeQueryString, extendURLByQueryParams, getHostname, getOrigin, getPathname, getProtocol, getQueryParam, getQueryParams, getSearch, hasUnsafeProtocol, removeProtocol, trimSearch };
