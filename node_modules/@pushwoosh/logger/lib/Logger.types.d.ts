export declare type TLoggerLevelSilent = 'silent';
export declare type TLoggerLevelFatal = 'fatal';
export declare type TLoggerLevelError = 'error';
export declare type TLoggerLevelWarn = 'warn';
export declare type TLoggerLevelInfo = 'info';
export declare type TLoggerLevelDebug = 'debug';
export declare type TLoggerFromSDK = 'sdk';
export declare type TLoggerFromCP = 'cp';
export declare type TLoggerApplicationType = TLoggerFromSDK | TLoggerFromCP;
export declare type TLoggerOutputLevels = TLoggerLevelFatal | TLoggerLevelError | TLoggerLevelWarn | TLoggerLevelInfo | TLoggerLevelDebug;
export declare type TLoggerLevels = TLoggerLevelSilent | TLoggerOutputLevels;
export interface ILoggerLogOptions {
    handler?: TLoggerHandler;
    [key: string]: any;
}
export interface ILoggerLogParams {
    type: TLoggerOutputLevels;
    text: string;
    code?: string | number;
    options?: ILoggerLogOptions;
}
export declare type TLoggerHandler = (message: ILoggerMessage) => void | Promise<void>;
export interface ILoggerSubscriber {
    handler: TLoggerHandler;
    level: TLoggerOutputLevels;
}
export interface ILoggerMessage {
    type: TLoggerOutputLevels;
    text: string;
    applicationType: TLoggerApplicationType;
    code?: string | number;
    applicationCode?: string;
    domain?: string;
    deviceInfo?: {
        [key: string]: any;
    };
    [key: string]: any;
}
export interface ILoggerConfig {
    level?: TLoggerLevels;
    applicationType?: TLoggerApplicationType;
    subscribers?: ILoggerSubscriber[];
}
export declare type TReject = (reason: Error) => void;
