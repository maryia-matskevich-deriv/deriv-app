"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const propTypes = {
  storyFn: _propTypes.default.func,
  context: _propTypes.default.object,
  children: _propTypes.default.node,
  store: _propTypes.default.object.isRequired
};
const defaultProps = {
  storyFn: null,
  context: null,
  children: null
};

class State extends _react.Component {
  constructor(props) {
    super(props);
    this.state = props.store.state;
  }

  componentDidMount() {
    const {
      store
    } = this.props;
    this.subscription = store.subscribe(state => this.setState(state));
  }

  componentWillUnmount() {
    const {
      store
    } = this.props;
    store.unsubscribe(this.subscription);
  }

  render() {
    const {
      storyFn,
      context,
      children
    } = this.props;
    const child = children ? _react.default.cloneElement(this.props.children, _objectSpread({}, this.state)) : storyFn(context);
    return _react.default.Children.only(child);
  }

}

State.propTypes = propTypes;
State.defaultProps = defaultProps;
var _default = State;
exports.default = _default;